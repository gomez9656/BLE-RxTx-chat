
BLE-RxTx-chat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006908  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08006aa8  08006aa8  00016aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e5c  08006e5c  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e64  08006e64  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e64  08006e64  00016e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e68  08006e68  00016e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08006e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b4  200000ac  08006f18  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  08006f18  00020860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002799d  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003acd  00000000  00000000  00047a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  0004b548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001388  00000000  00000000  0004ca00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a597  00000000  00000000  0004dd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177df  00000000  00000000  0006831f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094d0a  00000000  00000000  0007fafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00114808  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006028  00000000  00000000  0011485c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a90 	.word	0x08006a90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	08006a90 	.word	0x08006a90

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800058c:	2006      	movs	r0, #6
 800058e:	f001 f9e4 	bl	800195a <HAL_NVIC_EnableIRQ>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}

08000596 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800059a:	2006      	movs	r0, #6
 800059c:	f001 f9eb 	bl	8001976 <HAL_NVIC_DisableIRQ>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b20      	ldr	r3, [pc, #128]	; (8000634 <HCI_TL_SPI_Init+0x90>)
 80005b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b4:	4a1f      	ldr	r2, [pc, #124]	; (8000634 <HCI_TL_SPI_Init+0x90>)
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	6313      	str	r3, [r2, #48]	; 0x30
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <HCI_TL_SPI_Init+0x90>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80005c8:	2301      	movs	r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4619      	mov	r1, r3
 80005dc:	4816      	ldr	r0, [pc, #88]	; (8000638 <HCI_TL_SPI_Init+0x94>)
 80005de:	f001 fa37 	bl	8001a50 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	480f      	ldr	r0, [pc, #60]	; (8000638 <HCI_TL_SPI_Init+0x94>)
 80005fc:	f001 fa28 	bl	8001a50 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000600:	2302      	movs	r3, #2
 8000602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	4619      	mov	r1, r3
 8000616:	4808      	ldr	r0, [pc, #32]	; (8000638 <HCI_TL_SPI_Init+0x94>)
 8000618:	f001 fa1a 	bl	8001a50 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2102      	movs	r1, #2
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <HCI_TL_SPI_Init+0x94>)
 8000622:	f001 fc95 	bl	8001f50 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8000626:	f000 fa4f 	bl	8000ac8 <BSP_SPI1_Init>
 800062a:	4603      	mov	r3, r0
}
 800062c:	4618      	mov	r0, r3
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40020000 	.word	0x40020000

0800063c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000640:	2101      	movs	r1, #1
 8000642:	4807      	ldr	r0, [pc, #28]	; (8000660 <HCI_TL_SPI_DeInit+0x24>)
 8000644:	f001 fb88 	bl	8001d58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000648:	2102      	movs	r1, #2
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <HCI_TL_SPI_DeInit+0x24>)
 800064c:	f001 fb84 	bl	8001d58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <HCI_TL_SPI_DeInit+0x24>)
 8000656:	f001 fb7f 	bl	8001d58 <HAL_GPIO_DeInit>
  return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40020000 	.word	0x40020000

08000664 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2102      	movs	r1, #2
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <HCI_TL_SPI_Reset+0x38>)
 800066e:	f001 fc6f 	bl	8001f50 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000678:	4808      	ldr	r0, [pc, #32]	; (800069c <HCI_TL_SPI_Reset+0x38>)
 800067a:	f001 fc69 	bl	8001f50 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800067e:	2005      	movs	r0, #5
 8000680:	f001 f82c 	bl	80016dc <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068a:	4804      	ldr	r0, [pc, #16]	; (800069c <HCI_TL_SPI_Reset+0x38>)
 800068c:	f001 fc60 	bl	8001f50 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000690:	2005      	movs	r0, #5
 8000692:	f001 f823 	bl	80016dc <HAL_Delay>
  return 0;
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40020000 	.word	0x40020000

080006a0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 80006b0:	2300      	movs	r3, #0
 80006b2:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80006b4:	4a30      	ldr	r2, [pc, #192]	; (8000778 <HCI_TL_SPI_Receive+0xd8>)
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006be:	6018      	str	r0, [r3, #0]
 80006c0:	3304      	adds	r3, #4
 80006c2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80006c4:	f7ff ff67 	bl	8000596 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2102      	movs	r1, #2
 80006cc:	482b      	ldr	r0, [pc, #172]	; (800077c <HCI_TL_SPI_Receive+0xdc>)
 80006ce:	f001 fc3f 	bl	8001f50 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006d2:	f107 0108 	add.w	r1, r7, #8
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	2205      	movs	r2, #5
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fa23 	bl	8000b28 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80006e2:	7b3b      	ldrb	r3, [r7, #12]
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	b21a      	sxth	r2, r3
 80006e8:	7afb      	ldrb	r3, [r7, #11]
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b21b      	sxth	r3, r3
 80006f0:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80006f2:	8bfb      	ldrh	r3, [r7, #30]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d01e      	beq.n	8000736 <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80006f8:	8bfa      	ldrh	r2, [r7, #30]
 80006fa:	887b      	ldrh	r3, [r7, #2]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d901      	bls.n	8000704 <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 8000700:	887b      	ldrh	r3, [r7, #2]
 8000702:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8000704:	2300      	movs	r3, #0
 8000706:	777b      	strb	r3, [r7, #29]
 8000708:	e010      	b.n	800072c <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 800070a:	f107 0116 	add.w	r1, r7, #22
 800070e:	f107 0317 	add.w	r3, r7, #23
 8000712:	2201      	movs	r2, #1
 8000714:	4618      	mov	r0, r3
 8000716:	f000 fa07 	bl	8000b28 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 800071a:	7f7b      	ldrb	r3, [r7, #29]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	7dba      	ldrb	r2, [r7, #22]
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8000726:	7f7b      	ldrb	r3, [r7, #29]
 8000728:	3301      	adds	r3, #1
 800072a:	777b      	strb	r3, [r7, #29]
 800072c:	7f7b      	ldrb	r3, [r7, #29]
 800072e:	b29b      	uxth	r3, r3
 8000730:	8bfa      	ldrh	r2, [r7, #30]
 8000732:	429a      	cmp	r2, r3
 8000734:	d8e9      	bhi.n	800070a <HCI_TL_SPI_Receive+0x6a>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8000736:	f000 ffc5 	bl	80016c4 <HAL_GetTick>
 800073a:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800073c:	e006      	b.n	800074c <HCI_TL_SPI_Receive+0xac>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 800073e:	2101      	movs	r1, #1
 8000740:	480e      	ldr	r0, [pc, #56]	; (800077c <HCI_TL_SPI_Receive+0xdc>)
 8000742:	f001 fbed 	bl	8001f20 <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d008      	beq.n	800075e <HCI_TL_SPI_Receive+0xbe>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800074c:	f000 ffba 	bl	80016c4 <HAL_GetTick>
 8000750:	4602      	mov	r2, r0
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800075a:	d3f0      	bcc.n	800073e <HCI_TL_SPI_Receive+0x9e>
 800075c:	e000      	b.n	8000760 <HCI_TL_SPI_Receive+0xc0>
      break;
 800075e:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8000760:	f7ff ff12 	bl	8000588 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2102      	movs	r1, #2
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <HCI_TL_SPI_Receive+0xdc>)
 800076a:	f001 fbf1 	bl	8001f50 <HAL_GPIO_WritePin>

  return len;
 800076e:	7f7b      	ldrb	r3, [r7, #29]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08006aa8 	.word	0x08006aa8
 800077c:	40020000 	.word	0x40020000

08000780 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800078c:	4a3f      	ldr	r2, [pc, #252]	; (800088c <HCI_TL_SPI_Send+0x10c>)
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000796:	6018      	str	r0, [r3, #0]
 8000798:	3304      	adds	r3, #4
 800079a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 800079c:	f000 ff92 	bl	80016c4 <HAL_GetTick>
 80007a0:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 80007a2:	f7ff fef8 	bl	8000596 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 80007a6:	f000 ff8d 	bl	80016c4 <HAL_GetTick>
 80007aa:	61f8      	str	r0, [r7, #28]

    result = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2102      	movs	r1, #2
 80007b4:	4836      	ldr	r0, [pc, #216]	; (8000890 <HCI_TL_SPI_Send+0x110>)
 80007b6:	f001 fbcb 	bl	8001f50 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80007ba:	e00a      	b.n	80007d2 <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80007bc:	f000 ff82 	bl	80016c4 <HAL_GetTick>
 80007c0:	4602      	mov	r2, r0
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	2b0f      	cmp	r3, #15
 80007c8:	d903      	bls.n	80007d2 <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 80007ca:	f06f 0302 	mvn.w	r3, #2
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80007d0:	e004      	b.n	80007dc <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 80007d2:	f000 f861 	bl	8000898 <IsDataAvailable>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d0ef      	beq.n	80007bc <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 80007dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007de:	f113 0f03 	cmn.w	r3, #3
 80007e2:	d105      	bne.n	80007f0 <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2102      	movs	r1, #2
 80007e8:	4829      	ldr	r0, [pc, #164]	; (8000890 <HCI_TL_SPI_Send+0x110>)
 80007ea:	f001 fbb1 	bl	8001f50 <HAL_GPIO_WritePin>
      break;
 80007ee:	e030      	b.n	8000852 <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80007f0:	f107 010c 	add.w	r1, r7, #12
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2205      	movs	r2, #5
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f994 	bl	8000b28 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	021b      	lsls	r3, r3, #8
 8000804:	b21a      	sxth	r2, r3
 8000806:	7b7b      	ldrb	r3, [r7, #13]
 8000808:	b21b      	sxth	r3, r3
 800080a:	4313      	orrs	r3, r2
 800080c:	b21b      	sxth	r3, r3
 800080e:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8000810:	8b7a      	ldrh	r2, [r7, #26]
 8000812:	887b      	ldrh	r3, [r7, #2]
 8000814:	429a      	cmp	r2, r3
 8000816:	d306      	bcc.n	8000826 <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000818:	887b      	ldrh	r3, [r7, #2]
 800081a:	461a      	mov	r2, r3
 800081c:	491d      	ldr	r1, [pc, #116]	; (8000894 <HCI_TL_SPI_Send+0x114>)
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f982 	bl	8000b28 <BSP_SPI1_SendRecv>
 8000824:	e002      	b.n	800082c <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8000826:	f06f 0301 	mvn.w	r3, #1
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	2102      	movs	r1, #2
 8000830:	4817      	ldr	r0, [pc, #92]	; (8000890 <HCI_TL_SPI_Send+0x110>)
 8000832:	f001 fb8d 	bl	8001f50 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000836:	f000 ff45 	bl	80016c4 <HAL_GetTick>
 800083a:	4602      	mov	r2, r0
 800083c:	6a3b      	ldr	r3, [r7, #32]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d903      	bls.n	800084c <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 8000844:	f06f 0302 	mvn.w	r3, #2
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800084a:	e002      	b.n	8000852 <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	2b00      	cmp	r3, #0
 8000850:	dba9      	blt.n	80007a6 <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 8000852:	f000 ff37 	bl	80016c4 <HAL_GetTick>
 8000856:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000858:	e006      	b.n	8000868 <HCI_TL_SPI_Send+0xe8>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 800085a:	2101      	movs	r1, #1
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <HCI_TL_SPI_Send+0x110>)
 800085e:	f001 fb5f 	bl	8001f20 <HAL_GPIO_ReadPin>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d008      	beq.n	800087a <HCI_TL_SPI_Send+0xfa>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000868:	f000 ff2c 	bl	80016c4 <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	6a3b      	ldr	r3, [r7, #32]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000876:	d3f0      	bcc.n	800085a <HCI_TL_SPI_Send+0xda>
 8000878:	e000      	b.n	800087c <HCI_TL_SPI_Send+0xfc>
      break;
 800087a:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 800087c:	f7ff fe84 	bl	8000588 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8000880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000882:	4618      	mov	r0, r3
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	08006ab0 	.word	0x08006ab0
 8000890:	40020000 	.word	0x40020000
 8000894:	200000c8 	.word	0x200000c8

08000898 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800089c:	2101      	movs	r1, #1
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <IsDataAvailable+0x1c>)
 80008a0:	f001 fb3e 	bl	8001f20 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	bf0c      	ite	eq
 80008aa:	2301      	moveq	r3, #1
 80008ac:	2300      	movne	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40020000 	.word	0x40020000

080008b8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <hci_tl_lowlevel_init+0x54>)
 80008c0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <hci_tl_lowlevel_init+0x58>)
 80008c4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <hci_tl_lowlevel_init+0x5c>)
 80008c8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <hci_tl_lowlevel_init+0x60>)
 80008cc:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <hci_tl_lowlevel_init+0x64>)
 80008d0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <hci_tl_lowlevel_init+0x68>)
 80008d4:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4618      	mov	r0, r3
 80008da:	f004 fe79 	bl	80055d0 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80008de:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 80008e2:	4810      	ldr	r0, [pc, #64]	; (8000924 <hci_tl_lowlevel_init+0x6c>)
 80008e4:	f001 f87b 	bl	80019de <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80008e8:	4a0f      	ldr	r2, [pc, #60]	; (8000928 <hci_tl_lowlevel_init+0x70>)
 80008ea:	2100      	movs	r1, #0
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <hci_tl_lowlevel_init+0x6c>)
 80008ee:	f001 f85c 	bl	80019aa <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2006      	movs	r0, #6
 80008f8:	f001 f813 	bl	8001922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008fc:	2006      	movs	r0, #6
 80008fe:	f001 f82c 	bl	800195a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000902:	bf00      	nop
 8000904:	3720      	adds	r7, #32
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	080005a5 	.word	0x080005a5
 8000910:	0800063d 	.word	0x0800063d
 8000914:	08000781 	.word	0x08000781
 8000918:	080006a1 	.word	0x080006a1
 800091c:	08000665 	.word	0x08000665
 8000920:	08000b69 	.word	0x08000b69
 8000924:	20000778 	.word	0x20000778
 8000928:	0800092d 	.word	0x0800092d

0800092c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000930:	e005      	b.n	800093e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8000932:	2000      	movs	r0, #0
 8000934:	f004 ffb2 	bl	800589c <hci_notify_asynch_evt>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d105      	bne.n	800094a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800093e:	f7ff ffab 	bl	8000898 <IsDataAvailable>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f4      	bne.n	8000932 <hci_tl_lowlevel_isr+0x6>
 8000948:	e000      	b.n	800094c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800094a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <bluenrg_init>:

#define BDADDR_SIZE		6

uint8_t  SERVER_BDARR[] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06};

void bluenrg_init(void){
 8000950:	b5b0      	push	{r4, r5, r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af02      	add	r7, sp, #8

	tBleStatus ret;
	uint8_t bdaddr[BDADDR_SIZE];
	const char *name = "Juan";
 8000956:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <bluenrg_init+0xcc>)
 8000958:	617b      	str	r3, [r7, #20]
	uint16_t service_handle, dev_name_char_handle, appearance_char_habdle;

	BLUENRG_memcpy(bdaddr, SERVER_BDARR, sizeof(SERVER_BDARR));
 800095a:	4a31      	ldr	r2, [pc, #196]	; (8000a20 <bluenrg_init+0xd0>)
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000964:	6018      	str	r0, [r3, #0]
 8000966:	3304      	adds	r3, #4
 8000968:	8019      	strh	r1, [r3, #0]

	// Initialize HCI
	hci_init(APP_UserEvRx, NULL);
 800096a:	2100      	movs	r1, #0
 800096c:	482d      	ldr	r0, [pc, #180]	; (8000a24 <bluenrg_init+0xd4>)
 800096e:	f004 fded 	bl	800554c <hci_init>
	//Reset HCI
	hci_reset();
 8000972:	f004 f8f7 	bl	8004b64 <hci_reset>
	HAL_Delay(100);
 8000976:	2064      	movs	r0, #100	; 0x64
 8000978:	f000 feb0 	bl	80016dc <HAL_Delay>
	//Configure device address
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	461a      	mov	r2, r3
 8000982:	2106      	movs	r1, #6
 8000984:	2000      	movs	r0, #0
 8000986:	f004 fcd7 	bl	8005338 <aci_hal_write_config_data>
 800098a:	4603      	mov	r3, r0
 800098c:	74fb      	strb	r3, [r7, #19]
	if(ret != BLE_STATUS_SUCCESS){
 800098e:	7cfb      	ldrb	r3, [r7, #19]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <bluenrg_init+0x4a>
		printf("aci_hal_write_config_data : FAILED \n\r");
 8000994:	4824      	ldr	r0, [pc, #144]	; (8000a28 <bluenrg_init+0xd8>)
 8000996:	f005 f925 	bl	8005be4 <iprintf>
	}
	//Initialize GATT server
	ret = aci_gatt_init();
 800099a:	f004 fa7c 	bl	8004e96 <aci_gatt_init>
 800099e:	4603      	mov	r3, r0
 80009a0:	74fb      	strb	r3, [r7, #19]
	if(ret != BLE_STATUS_SUCCESS){
 80009a2:	7cfb      	ldrb	r3, [r7, #19]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <bluenrg_init+0x5e>
		printf("aci_gatt_init : FAILED \n\r");
 80009a8:	4820      	ldr	r0, [pc, #128]	; (8000a2c <bluenrg_init+0xdc>)
 80009aa:	f005 f91b 	bl	8005be4 <iprintf>
	}
	//Initialize GAP service
	ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0, 0x07,  &service_handle, &dev_name_char_handle, &appearance_char_habdle);
 80009ae:	f107 020a 	add.w	r2, r7, #10
 80009b2:	1dbb      	adds	r3, r7, #6
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	4613      	mov	r3, r2
 80009be:	2207      	movs	r2, #7
 80009c0:	2100      	movs	r1, #0
 80009c2:	2001      	movs	r0, #1
 80009c4:	f004 f9dc 	bl	8004d80 <aci_gap_init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	74fb      	strb	r3, [r7, #19]
	if(ret != BLE_STATUS_SUCCESS){
 80009cc:	7cfb      	ldrb	r3, [r7, #19]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <bluenrg_init+0x88>
		printf("aci_gap_init : FAILED \n\r");
 80009d2:	4817      	ldr	r0, [pc, #92]	; (8000a30 <bluenrg_init+0xe0>)
 80009d4:	f005 f906 	bl	8005be4 <iprintf>
	}
	//Update device name characteristic
	aci_gatt_update_char_value(&service_handle, &dev_name_char_handle, 0, strlen(name), (uint8_t*)name);
 80009d8:	f107 030a 	add.w	r3, r7, #10
 80009dc:	b29c      	uxth	r4, r3
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	b29d      	uxth	r5, r3
 80009e4:	6978      	ldr	r0, [r7, #20]
 80009e6:	f7ff fbfb 	bl	80001e0 <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	4613      	mov	r3, r2
 80009f4:	2200      	movs	r2, #0
 80009f6:	4629      	mov	r1, r5
 80009f8:	4620      	mov	r0, r4
 80009fa:	f004 fc0f 	bl	800521c <aci_gatt_update_char_value>
	//Add custom service
	ret = add_siemple_service();
 80009fe:	f000 faab 	bl	8000f58 <add_siemple_service>
 8000a02:	4603      	mov	r3, r0
 8000a04:	74fb      	strb	r3, [r7, #19]
	if(ret != BLE_STATUS_SUCCESS){
 8000a06:	7cfb      	ldrb	r3, [r7, #19]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <bluenrg_init+0xc2>
		printf("add_siemple_service : FAILED \n\r");
 8000a0c:	4809      	ldr	r0, [pc, #36]	; (8000a34 <bluenrg_init+0xe4>)
 8000a0e:	f005 f8e9 	bl	8005be4 <iprintf>
	}
}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bdb0      	pop	{r4, r5, r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	08006ab8 	.word	0x08006ab8
 8000a20:	20000000 	.word	0x20000000
 8000a24:	080011f1 	.word	0x080011f1
 8000a28:	08006ac0 	.word	0x08006ac0
 8000a2c:	08006ae8 	.word	0x08006ae8
 8000a30:	08006b04 	.word	0x08006b04
 8000a34:	08006b20 	.word	0x08006b20

08000a38 <bluenrg_process>:

uint8_t btn_state;

void bluenrg_process(void){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	; 0x30
 8000a3c:	af08      	add	r7, sp, #32

	tBleStatus ret;

	uint8_t local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'B', 'L','E', '-', 'J', 'U', 'A', 'N'};
 8000a3e:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <bluenrg_process+0x80>)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a44:	c303      	stmia	r3!, {r0, r1}
 8000a46:	701a      	strb	r2, [r3, #0]

	//Set device in General Discoverable Mode
	ret = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 8000a48:	2300      	movs	r3, #0
 8000a4a:	9306      	str	r3, [sp, #24]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	9305      	str	r3, [sp, #20]
 8000a50:	2300      	movs	r3, #0
 8000a52:	9304      	str	r3, [sp, #16]
 8000a54:	2300      	movs	r3, #0
 8000a56:	9303      	str	r3, [sp, #12]
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	9302      	str	r3, [sp, #8]
 8000a5c:	2309      	movs	r3, #9
 8000a5e:	9301      	str	r3, [sp, #4]
 8000a60:	2300      	movs	r3, #0
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	2300      	movs	r3, #0
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f004 f8a3 	bl	8004bb6 <aci_gap_set_discoverable>
 8000a70:	4603      	mov	r3, r0
 8000a72:	73fb      	strb	r3, [r7, #15]
	if(ret != BLE_STATUS_SUCCESS){
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d002      	beq.n	8000a80 <bluenrg_process+0x48>
		printf("aci_gap_set_discoverable : FAILED \n\r");
 8000a7a:	4810      	ldr	r0, [pc, #64]	; (8000abc <bluenrg_process+0x84>)
 8000a7c:	f005 f8b2 	bl	8005be4 <iprintf>
	}

	//process user event
	hci_user_evt_proc();
 8000a80:	f004 fee0 	bl	8005844 <hci_user_evt_proc>

	//get button state
	btn_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000a84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <bluenrg_process+0x88>)
 8000a8a:	f001 fa49 	bl	8001f20 <HAL_GPIO_ReadPin>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <bluenrg_process+0x8c>)
 8000a94:	701a      	strb	r2, [r3, #0]

	if(btn_state == 0){
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <bluenrg_process+0x8c>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d107      	bne.n	8000aae <bluenrg_process+0x76>

		uint8_t data[2] = {'a', 'a'};
 8000a9e:	f246 1361 	movw	r3, #24929	; 0x6161
 8000aa2:	803b      	strh	r3, [r7, #0]
		send_data(data, sizeof(data));
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fadb 	bl	8001064 <send_data>
	}
}
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	08006b68 	.word	0x08006b68
 8000abc:	08006b40 	.word	0x08006b40
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	20000780 	.word	0x20000780

08000ac8 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <BSP_SPI1_Init+0x54>)
 8000ad4:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <BSP_SPI1_Init+0x58>)
 8000ad6:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <BSP_SPI1_Init+0x5c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	4911      	ldr	r1, [pc, #68]	; (8000b24 <BSP_SPI1_Init+0x5c>)
 8000ae0:	600a      	str	r2, [r1, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d114      	bne.n	8000b10 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <BSP_SPI1_Init+0x54>)
 8000ae8:	f002 f933 	bl	8002d52 <HAL_SPI_GetState>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d10e      	bne.n	8000b10 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8000af2:	480a      	ldr	r0, [pc, #40]	; (8000b1c <BSP_SPI1_Init+0x54>)
 8000af4:	f000 f87c 	bl	8000bf0 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d108      	bne.n	8000b10 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000afe:	4807      	ldr	r0, [pc, #28]	; (8000b1c <BSP_SPI1_Init+0x54>)
 8000b00:	f000 f83a 	bl	8000b78 <MX_SPI1_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000b0a:	f06f 0307 	mvn.w	r3, #7
 8000b0e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000b10:	687b      	ldr	r3, [r7, #4]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000784 	.word	0x20000784
 8000b20:	40013000 	.word	0x40013000
 8000b24:	200001c8 	.word	0x200001c8

08000b28 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	4613      	mov	r3, r2
 8000b34:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b40:	9200      	str	r2, [sp, #0]
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	68f9      	ldr	r1, [r7, #12]
 8000b46:	4807      	ldr	r0, [pc, #28]	; (8000b64 <BSP_SPI1_SendRecv+0x3c>)
 8000b48:	f001 ff61 	bl	8002a0e <HAL_SPI_TransmitReceive>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000b52:	f06f 0305 	mvn.w	r3, #5
 8000b56:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8000b58:	697b      	ldr	r3, [r7, #20]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000784 	.word	0x20000784

08000b68 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000b6c:	f000 fdaa 	bl	80016c4 <HAL_GetTick>
 8000b70:	4603      	mov	r3, r0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a19      	ldr	r2, [pc, #100]	; (8000bec <MX_SPI1_Init+0x74>)
 8000b88:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b90:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb0:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2228      	movs	r2, #40	; 0x28
 8000bb6:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	220a      	movs	r2, #10
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f001 fe89 	bl	80028e8 <HAL_SPI_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40013000 	.word	0x40013000

08000bf0 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	4b2d      	ldr	r3, [pc, #180]	; (8000cb4 <SPI1_MspInit+0xc4>)
 8000bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c00:	4a2c      	ldr	r2, [pc, #176]	; (8000cb4 <SPI1_MspInit+0xc4>)
 8000c02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c06:	6453      	str	r3, [r2, #68]	; 0x44
 8000c08:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <SPI1_MspInit+0xc4>)
 8000c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <SPI1_MspInit+0xc4>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	4a25      	ldr	r2, [pc, #148]	; (8000cb4 <SPI1_MspInit+0xc4>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6313      	str	r3, [r2, #48]	; 0x30
 8000c24:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <SPI1_MspInit+0xc4>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <SPI1_MspInit+0xc4>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <SPI1_MspInit+0xc4>)
 8000c3a:	f043 0302 	orr.w	r3, r3, #2
 8000c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c40:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <SPI1_MspInit+0xc4>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000c4c:	2340      	movs	r3, #64	; 0x40
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000c5c:	2305      	movs	r3, #5
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	4814      	ldr	r0, [pc, #80]	; (8000cb8 <SPI1_MspInit+0xc8>)
 8000c68:	f000 fef2 	bl	8001a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000c7c:	2305      	movs	r3, #5
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <SPI1_MspInit+0xc8>)
 8000c88:	f000 fee2 	bl	8001a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000c9c:	2305      	movs	r3, #5
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <SPI1_MspInit+0xcc>)
 8000ca8:	f000 fed2 	bl	8001a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40020400 	.word	0x40020400

08000cc0 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 10);
 8000cc8:	1d39      	adds	r1, r7, #4
 8000cca:	230a      	movs	r3, #10
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <__io_putchar+0x20>)
 8000cd0:	f002 f965 	bl	8002f9e <HAL_UART_Transmit>

	return ch;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200007dc 	.word	0x200007dc

08000ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce8:	f000 fc86 	bl	80015f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cec:	f000 f80e 	bl	8000d0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf0:	f000 f89e 	bl	8000e30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cf4:	f000 f872 	bl	8000ddc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //1 Enable BLE module
  bluenrg_init();
 8000cf8:	f7ff fe2a 	bl	8000950 <bluenrg_init>
  printf("Initialization successful...\n\r");
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <main+0x24>)
 8000cfe:	f004 ff71 	bl	8005be4 <iprintf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //2. Process BLE
	  bluenrg_process();
 8000d02:	f7ff fe99 	bl	8000a38 <bluenrg_process>
 8000d06:	e7fc      	b.n	8000d02 <main+0x1e>
 8000d08:	08006b74 	.word	0x08006b74

08000d0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b094      	sub	sp, #80	; 0x50
 8000d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d12:	f107 0320 	add.w	r3, r7, #32
 8000d16:	2230      	movs	r2, #48	; 0x30
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f004 ff5a 	bl	8005bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <SystemClock_Config+0xc8>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	4a26      	ldr	r2, [pc, #152]	; (8000dd4 <SystemClock_Config+0xc8>)
 8000d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <SystemClock_Config+0xc8>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <SystemClock_Config+0xcc>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a20      	ldr	r2, [pc, #128]	; (8000dd8 <SystemClock_Config+0xcc>)
 8000d56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <SystemClock_Config+0xcc>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d70:	2310      	movs	r3, #16
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d74:	2302      	movs	r3, #2
 8000d76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d7c:	2308      	movs	r3, #8
 8000d7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000d80:	2340      	movs	r3, #64	; 0x40
 8000d82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8c:	f107 0320 	add.w	r3, r7, #32
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 f935 	bl	8002000 <HAL_RCC_OscConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d9c:	f000 f8d6 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da0:	230f      	movs	r3, #15
 8000da2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da4:	2302      	movs	r3, #2
 8000da6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	2102      	movs	r1, #2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 fb97 	bl	80024f0 <HAL_RCC_ClockConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dc8:	f000 f8c0 	bl	8000f4c <Error_Handler>
  }
}
 8000dcc:	bf00      	nop
 8000dce:	3750      	adds	r7, #80	; 0x50
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40007000 	.word	0x40007000

08000ddc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <MX_USART2_UART_Init+0x50>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e14:	f002 f876 	bl	8002f04 <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e1e:	f000 f895 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200007dc 	.word	0x200007dc
 8000e2c:	40004400 	.word	0x40004400

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <MX_GPIO_Init+0x110>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a3c      	ldr	r2, [pc, #240]	; (8000f40 <MX_GPIO_Init+0x110>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b3a      	ldr	r3, [pc, #232]	; (8000f40 <MX_GPIO_Init+0x110>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <MX_GPIO_Init+0x110>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a35      	ldr	r2, [pc, #212]	; (8000f40 <MX_GPIO_Init+0x110>)
 8000e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b33      	ldr	r3, [pc, #204]	; (8000f40 <MX_GPIO_Init+0x110>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b2f      	ldr	r3, [pc, #188]	; (8000f40 <MX_GPIO_Init+0x110>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a2e      	ldr	r2, [pc, #184]	; (8000f40 <MX_GPIO_Init+0x110>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <MX_GPIO_Init+0x110>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <MX_GPIO_Init+0x110>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a27      	ldr	r2, [pc, #156]	; (8000f40 <MX_GPIO_Init+0x110>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <MX_GPIO_Init+0x110>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 7191 	mov.w	r1, #290	; 0x122
 8000ebc:	4821      	ldr	r0, [pc, #132]	; (8000f44 <MX_GPIO_Init+0x114>)
 8000ebe:	f001 f847 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481b      	ldr	r0, [pc, #108]	; (8000f48 <MX_GPIO_Init+0x118>)
 8000eda:	f000 fdb9 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4814      	ldr	r0, [pc, #80]	; (8000f44 <MX_GPIO_Init+0x114>)
 8000ef4:	f000 fdac 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_1| GPIO_PIN_5|GPIO_PIN_8;
 8000ef8:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <MX_GPIO_Init+0x114>)
 8000f12:	f000 fd9d 	bl	8001a50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2006      	movs	r0, #6
 8000f1c:	f000 fd01 	bl	8001922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f20:	2006      	movs	r0, #6
 8000f22:	f000 fd1a 	bl	800195a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2028      	movs	r0, #40	; 0x28
 8000f2c:	f000 fcf9 	bl	8001922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f30:	2028      	movs	r0, #40	; 0x28
 8000f32:	f000 fd12 	bl	800195a <HAL_NVIC_EnableIRQ>

}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40020800 	.word	0x40020800

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <Error_Handler+0x8>
	...

08000f58 <add_siemple_service>:
uint8_t connected = 0;
uint8_t set_connectable = 1;
uint16_t connection_handle = 0;
uint8_t notification_enabled = 0;

tBleStatus add_siemple_service(void){
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b095      	sub	sp, #84	; 0x54
 8000f5c:	af06      	add	r7, sp, #24

	tBleStatus ret;
	Service_UUID_t service_uuid;
	Char_UUID_t char_uuid_tx, char_uuid_rx;

	BLUENRG_memcpy(service_uuid.Service_UUID_128, SERVICE_UUID, 16);
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <add_siemple_service+0xa8>)
 8000f60:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000f64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BLUENRG_memcpy(char_uuid_tx.Char_UUID_128, CHAR_UUID_TX, 16);
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <add_siemple_service+0xac>)
 8000f6c:	f107 0414 	add.w	r4, r7, #20
 8000f70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BLUENRG_memcpy(char_uuid_rx.Char_UUID_128, CHAR_UUID_RX, 16);
 8000f76:	4b24      	ldr	r3, [pc, #144]	; (8001008 <add_siemple_service+0xb0>)
 8000f78:	1d3c      	adds	r4, r7, #4
 8000f7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//add service
	ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE, 7, &chat_service_handle);
 8000f80:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000f84:	4b21      	ldr	r3, [pc, #132]	; (800100c <add_siemple_service+0xb4>)
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2307      	movs	r3, #7
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f003 ffac 	bl	8004eea <aci_gatt_add_service>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	// add characteristic
	ret = aci_gatt_add_char(chat_service_handle, UUID_TYPE_128, &char_uuid_tx, 20,
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <add_siemple_service+0xb4>)
 8000f9a:	8818      	ldrh	r0, [r3, #0]
 8000f9c:	f107 0214 	add.w	r2, r7, #20
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <add_siemple_service+0xb8>)
 8000fa2:	9305      	str	r3, [sp, #20]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	9304      	str	r3, [sp, #16]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9303      	str	r3, [sp, #12]
 8000fac:	2300      	movs	r3, #0
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2314      	movs	r3, #20
 8000fba:	2102      	movs	r1, #2
 8000fbc:	f004 f844 	bl	8005048 <aci_gatt_add_char>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
											CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE,
											0, 0, 1, &tx_char_handle);

	ret = aci_gatt_add_char(chat_service_handle, UUID_TYPE_128, &char_uuid_rx, 20,
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <add_siemple_service+0xb4>)
 8000fc8:	8818      	ldrh	r0, [r3, #0]
 8000fca:	1d3a      	adds	r2, r7, #4
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <add_siemple_service+0xbc>)
 8000fce:	9305      	str	r3, [sp, #20]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	9304      	str	r3, [sp, #16]
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	9303      	str	r3, [sp, #12]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	230c      	movs	r3, #12
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2314      	movs	r3, #20
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	f004 f82e 	bl	8005048 <aci_gatt_add_char>
 8000fec:	4603      	mov	r3, r0
 8000fee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
											CHAR_PROP_WRITE | CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE,
											GATT_NOTIFY_ATTRIBUTE_WRITE, 0, 1, &rx_char_handle);

	return ret;
 8000ff2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	373c      	adds	r7, #60	; 0x3c
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008
 8001004:	20000018 	.word	0x20000018
 8001008:	20000028 	.word	0x20000028
 800100c:	20000822 	.word	0x20000822
 8001010:	20000820 	.word	0x20000820
 8001014:	20000838 	.word	0x20000838

08001018 <receive_data>:

uint8_t rcv_data[20];

void receive_data(uint8_t * data_buffer, uint8_t no_bytes){
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001024:	2120      	movs	r1, #32
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <receive_data+0x44>)
 8001028:	f000 ffab 	bl	8001f82 <HAL_GPIO_TogglePin>

	for(int i = 0;  i < no_bytes; i++){
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e00b      	b.n	800104a <receive_data+0x32>

		rcv_data[i] = data_buffer[i];
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	7819      	ldrb	r1, [r3, #0]
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <receive_data+0x48>)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	460a      	mov	r2, r1
 8001042:	701a      	strb	r2, [r3, #0]
	for(int i = 0;  i < no_bytes; i++){
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3301      	adds	r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	429a      	cmp	r2, r3
 8001050:	dbef      	blt.n	8001032 <receive_data+0x1a>
	}
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40020000 	.word	0x40020000
 8001060:	20000824 	.word	0x20000824

08001064 <send_data>:

void send_data(uint8_t * data_buffer, uint8_t no_bytes){
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af02      	add	r7, sp, #8
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]

	tBleStatus ret;

	//update characteristic value
	ret = aci_gatt_update_char_value(chat_service_handle, tx_char_handle, 0, no_bytes, (uint8_t*)&data_buffer);
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <send_data+0x3c>)
 8001072:	8818      	ldrh	r0, [r3, #0]
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <send_data+0x40>)
 8001076:	8819      	ldrh	r1, [r3, #0]
 8001078:	78fa      	ldrb	r2, [r7, #3]
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	4613      	mov	r3, r2
 8001080:	2200      	movs	r2, #0
 8001082:	f004 f8cb 	bl	800521c <aci_gatt_update_char_value>
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]
	if(ret != BLE_STATUS_SUCCESS){
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <send_data+0x32>
		printf("aci_gatt_update_char_value : FAILED \n\r");
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <send_data+0x44>)
 8001092:	f004 fda7 	bl	8005be4 <iprintf>
	}
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000822 	.word	0x20000822
 80010a4:	20000820 	.word	0x20000820
 80010a8:	08006b94 	.word	0x08006b94

080010ac <Attribute_Modified_CB>:

void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t * att_data){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	603a      	str	r2, [r7, #0]
 80010b6:	80fb      	strh	r3, [r7, #6]
 80010b8:	460b      	mov	r3, r1
 80010ba:	717b      	strb	r3, [r7, #5]

	if(handle == rx_char_handle + 1){
 80010bc:	88fa      	ldrh	r2, [r7, #6]
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <Attribute_Modified_CB+0x4c>)
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d105      	bne.n	80010d4 <Attribute_Modified_CB+0x28>

		receive_data(att_data, data_length);
 80010c8:	797b      	ldrb	r3, [r7, #5]
 80010ca:	4619      	mov	r1, r3
 80010cc:	6838      	ldr	r0, [r7, #0]
 80010ce:	f7ff ffa3 	bl	8001018 <receive_data>
		if(att_data[0]  == 0x01){

			notification_enabled = 1;
		}
	}
}
 80010d2:	e00c      	b.n	80010ee <Attribute_Modified_CB+0x42>
	else if(handle == tx_char_handle + 2){
 80010d4:	88fa      	ldrh	r2, [r7, #6]
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <Attribute_Modified_CB+0x50>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	3302      	adds	r3, #2
 80010dc:	429a      	cmp	r2, r3
 80010de:	d106      	bne.n	80010ee <Attribute_Modified_CB+0x42>
		if(att_data[0]  == 0x01){
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d102      	bne.n	80010ee <Attribute_Modified_CB+0x42>
			notification_enabled = 1;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <Attribute_Modified_CB+0x54>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000838 	.word	0x20000838
 80010fc:	20000820 	.word	0x20000820
 8001100:	200001d0 	.word	0x200001d0

08001104 <aci_gatt_attribute_modified_event>:

void aci_gatt_attribute_modified_event(uint16_t Connection_handle, uint16_t Attr_Handle, uint16_t Offset,
		uint16_t Attr_Data_Length, uint8_t Attr_Data[]){
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4604      	mov	r4, r0
 800110c:	4608      	mov	r0, r1
 800110e:	4611      	mov	r1, r2
 8001110:	461a      	mov	r2, r3
 8001112:	4623      	mov	r3, r4
 8001114:	80fb      	strh	r3, [r7, #6]
 8001116:	4603      	mov	r3, r0
 8001118:	80bb      	strh	r3, [r7, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	807b      	strh	r3, [r7, #2]
 800111e:	4613      	mov	r3, r2
 8001120:	803b      	strh	r3, [r7, #0]

	Attribute_Modified_CB(Attr_Handle, Attr_Data_Length, Attr_Data);
 8001122:	883b      	ldrh	r3, [r7, #0]
 8001124:	b2d9      	uxtb	r1, r3
 8001126:	88bb      	ldrh	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ffbe 	bl	80010ac <Attribute_Modified_CB>
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bd90      	pop	{r4, r7, pc}

08001138 <aci_gatt_notification_event>:

void aci_gatt_notification_event(uint16_t Connection_Handle, uint16_t Attribute_Handle,
														uint8_t Attribute_Value_Length, uint8_t Attribute_Value[]){
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	4603      	mov	r3, r0
 8001142:	81fb      	strh	r3, [r7, #14]
 8001144:	460b      	mov	r3, r1
 8001146:	81bb      	strh	r3, [r7, #12]
 8001148:	4613      	mov	r3, r2
 800114a:	72fb      	strb	r3, [r7, #11]

	if(Attribute_Handle == tx_char_handle + 2){
 800114c:	89ba      	ldrh	r2, [r7, #12]
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <aci_gatt_notification_event+0x34>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	3302      	adds	r3, #2
 8001154:	429a      	cmp	r2, r3
 8001156:	d104      	bne.n	8001162 <aci_gatt_notification_event+0x2a>

		receive_data(Attribute_Value, Attribute_Value_Length);
 8001158:	7afb      	ldrb	r3, [r7, #11]
 800115a:	4619      	mov	r1, r3
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff5b 	bl	8001018 <receive_data>
	}
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000820 	.word	0x20000820

08001170 <hci_le_connection_complete_event>:


void hci_le_connection_complete_event(uint8_t Status, uint16_t Connection_Handle, uint8_t Role, uint8_t Peer_Address_Type,
																	uint8_t Peer_Address[6], uint16_t Conn_Interval, uint16_t Conn_Latency,
																	uint16_t Supervision_Timeout, uint8_t Master_Clock_Accuracy)
{
 8001170:	b490      	push	{r4, r7}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4604      	mov	r4, r0
 8001178:	4608      	mov	r0, r1
 800117a:	4611      	mov	r1, r2
 800117c:	461a      	mov	r2, r3
 800117e:	4623      	mov	r3, r4
 8001180:	71fb      	strb	r3, [r7, #7]
 8001182:	4603      	mov	r3, r0
 8001184:	80bb      	strh	r3, [r7, #4]
 8001186:	460b      	mov	r3, r1
 8001188:	71bb      	strb	r3, [r7, #6]
 800118a:	4613      	mov	r3, r2
 800118c:	70fb      	strb	r3, [r7, #3]
	connected = 1;
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <hci_le_connection_complete_event+0x34>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
	connection_handle = Connection_Handle;
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <hci_le_connection_complete_event+0x38>)
 8001196:	88bb      	ldrh	r3, [r7, #4]
 8001198:	8013      	strh	r3, [r2, #0]
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc90      	pop	{r4, r7}
 80011a2:	4770      	bx	lr
 80011a4:	200001cc 	.word	0x200001cc
 80011a8:	200001ce 	.word	0x200001ce

080011ac <hci_disconnection_complete_event>:

void hci_disconnection_complete_event(uint8_t Status, uint16_t Connection_Handle, uint8_t Reason){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	460b      	mov	r3, r1
 80011b8:	80bb      	strh	r3, [r7, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	71bb      	strb	r3, [r7, #6]

	connected = 1;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <hci_disconnection_complete_event+0x34>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
	set_connectable = 1;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <hci_disconnection_complete_event+0x38>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
	connection_handle = 0;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <hci_disconnection_complete_event+0x3c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	801a      	strh	r2, [r3, #0]

	printf("Disconnected \n\r");
 80011d0:	4806      	ldr	r0, [pc, #24]	; (80011ec <hci_disconnection_complete_event+0x40>)
 80011d2:	f004 fd07 	bl	8005be4 <iprintf>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200001cc 	.word	0x200001cc
 80011e4:	20000038 	.word	0x20000038
 80011e8:	200001ce 	.word	0x200001ce
 80011ec:	08006bbc 	.word	0x08006bbc

080011f0 <APP_UserEvRx>:

void APP_UserEvRx(void *pData){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

	uint32_t i;

	hci_spi_pckt *hci_pckt = (hci_spi_pckt*)pData;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	61bb      	str	r3, [r7, #24]

	//process event packet
	if(hci_pckt->type == HCI_EVENT_PKT){
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b04      	cmp	r3, #4
 8001202:	d163      	bne.n	80012cc <APP_UserEvRx+0xdc>

		//Get data from packet
		hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	3301      	adds	r3, #1
 8001208:	617b      	str	r3, [r7, #20]

		//process meta data
		if(event_pckt->evt == EVT_LE_META_EVENT){
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b3e      	cmp	r3, #62	; 0x3e
 8001210:	d11e      	bne.n	8001250 <APP_UserEvRx+0x60>

			//get meta data
			evt_le_meta_event *evt = (void*)event_pckt->data;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	3302      	adds	r3, #2
 8001216:	60fb      	str	r3, [r7, #12]

			//process each meta data event
			for(i = 0; i < (sizeof(hci_le_meta_events_table) / sizeof(hci_le_meta_events_table_type)); i++){
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
 800121c:	e014      	b.n	8001248 <APP_UserEvRx+0x58>

				if(evt->subevent == hci_le_meta_events_table[i].evt_code){
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b29a      	uxth	r2, r3
 8001224:	492b      	ldr	r1, [pc, #172]	; (80012d4 <APP_UserEvRx+0xe4>)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800122c:	429a      	cmp	r2, r3
 800122e:	d108      	bne.n	8001242 <APP_UserEvRx+0x52>

					hci_le_meta_events_table[i].process((void*)evt->data);
 8001230:	4a28      	ldr	r2, [pc, #160]	; (80012d4 <APP_UserEvRx+0xe4>)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	3201      	adds	r2, #1
 800123e:	4610      	mov	r0, r2
 8001240:	4798      	blx	r3
			for(i = 0; i < (sizeof(hci_le_meta_events_table) / sizeof(hci_le_meta_events_table_type)); i++){
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3301      	adds	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	2b09      	cmp	r3, #9
 800124c:	d9e7      	bls.n	800121e <APP_UserEvRx+0x2e>
					hci_events_table[i].process((void*)event_pckt->data);
				}
			}
		}
	}
}
 800124e:	e03d      	b.n	80012cc <APP_UserEvRx+0xdc>
		else if(event_pckt->evt == EVT_VENDOR){
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2bff      	cmp	r3, #255	; 0xff
 8001256:	d11e      	bne.n	8001296 <APP_UserEvRx+0xa6>
			evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3302      	adds	r3, #2
 800125c:	613b      	str	r3, [r7, #16]
			for(i = 0; i < (sizeof(hci_vendor_specific_events_table) / sizeof(hci_vendor_specific_events_table_type)); i++){
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	e014      	b.n	800128e <APP_UserEvRx+0x9e>
				if(blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code){
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	b29a      	uxth	r2, r3
 800126a:	491b      	ldr	r1, [pc, #108]	; (80012d8 <APP_UserEvRx+0xe8>)
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8001272:	429a      	cmp	r2, r3
 8001274:	d108      	bne.n	8001288 <APP_UserEvRx+0x98>
					hci_vendor_specific_events_table[i].process((void*)blue_evt->data);
 8001276:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <APP_UserEvRx+0xe8>)
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	4413      	add	r3, r2
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	3202      	adds	r2, #2
 8001284:	4610      	mov	r0, r2
 8001286:	4798      	blx	r3
			for(i = 0; i < (sizeof(hci_vendor_specific_events_table) / sizeof(hci_vendor_specific_events_table_type)); i++){
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	3301      	adds	r3, #1
 800128c:	61fb      	str	r3, [r7, #28]
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	2b2a      	cmp	r3, #42	; 0x2a
 8001292:	d9e7      	bls.n	8001264 <APP_UserEvRx+0x74>
}
 8001294:	e01a      	b.n	80012cc <APP_UserEvRx+0xdc>
			for(i = 0; i < (sizeof(hci_events_table) / sizeof(hci_events_table_type)); i++){
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	e014      	b.n	80012c6 <APP_UserEvRx+0xd6>
				if(event_pckt->evt == hci_events_table[i].evt_code){
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	490e      	ldr	r1, [pc, #56]	; (80012dc <APP_UserEvRx+0xec>)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d108      	bne.n	80012c0 <APP_UserEvRx+0xd0>
					hci_events_table[i].process((void*)event_pckt->data);
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <APP_UserEvRx+0xec>)
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4413      	add	r3, r2
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	3202      	adds	r2, #2
 80012bc:	4610      	mov	r0, r2
 80012be:	4798      	blx	r3
			for(i = 0; i < (sizeof(hci_events_table) / sizeof(hci_events_table_type)); i++){
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	3301      	adds	r3, #1
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	2b06      	cmp	r3, #6
 80012ca:	d9e7      	bls.n	800129c <APP_UserEvRx+0xac>
}
 80012cc:	bf00      	nop
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	08006c1c 	.word	0x08006c1c
 80012d8:	08006c6c 	.word	0x08006c6c
 80012dc:	08006be4 	.word	0x08006be4

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_MspInit+0x4c>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a0f      	ldr	r2, [pc, #60]	; (800132c <HAL_MspInit+0x4c>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_MspInit+0x4c>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_MspInit+0x4c>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800

08001330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <HAL_UART_MspInit+0x84>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12b      	bne.n	80013aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <HAL_UART_MspInit+0x88>)
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800138a:	230c      	movs	r3, #12
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800139a:	2307      	movs	r3, #7
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <HAL_UART_MspInit+0x8c>)
 80013a6:	f000 fb53 	bl	8001a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	; 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40004400 	.word	0x40004400
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <NMI_Handler+0x4>

080013c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <MemManage_Handler+0x4>

080013d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler+0x4>

080013de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140c:	f000 f946 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <EXTI0_IRQHandler+0x10>)
 800141a:	f000 faf5 	bl	8001a08 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000778 	.word	0x20000778

08001428 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800142c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001430:	f000 fdc2 	bl	8001fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	e00a      	b.n	8001460 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800144a:	f3af 8000 	nop.w
 800144e:	4601      	mov	r1, r0
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	60ba      	str	r2, [r7, #8]
 8001456:	b2ca      	uxtb	r2, r1
 8001458:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3301      	adds	r3, #1
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	429a      	cmp	r2, r3
 8001466:	dbf0      	blt.n	800144a <_read+0x12>
	}

return len;
 8001468:	687b      	ldr	r3, [r7, #4]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	e009      	b.n	8001498 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	60ba      	str	r2, [r7, #8]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fc17 	bl	8000cc0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	dbf1      	blt.n	8001484 <_write+0x12>
	}
	return len;
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_close>:

int _close(int file)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
	return -1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d2:	605a      	str	r2, [r3, #4]
	return 0;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_isatty>:

int _isatty(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	return 1;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
	return 0;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800151c:	4a14      	ldr	r2, [pc, #80]	; (8001570 <_sbrk+0x5c>)
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <_sbrk+0x60>)
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <_sbrk+0x64>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <_sbrk+0x68>)
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	429a      	cmp	r2, r3
 8001542:	d207      	bcs.n	8001554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001544:	f004 fb0e 	bl	8005b64 <__errno>
 8001548:	4603      	mov	r3, r0
 800154a:	220c      	movs	r2, #12
 800154c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	e009      	b.n	8001568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <_sbrk+0x64>)
 8001564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20020000 	.word	0x20020000
 8001574:	00000400 	.word	0x00000400
 8001578:	200001d4 	.word	0x200001d4
 800157c:	20000860 	.word	0x20000860

08001580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <SystemInit+0x20>)
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <SystemInit+0x20>)
 800158c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015a8:	480d      	ldr	r0, [pc, #52]	; (80015e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015aa:	490e      	ldr	r1, [pc, #56]	; (80015e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015ac:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b0:	e002      	b.n	80015b8 <LoopCopyDataInit>

080015b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b6:	3304      	adds	r3, #4

080015b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015bc:	d3f9      	bcc.n	80015b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015be:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015c0:	4c0b      	ldr	r4, [pc, #44]	; (80015f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c4:	e001      	b.n	80015ca <LoopFillZerobss>

080015c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c8:	3204      	adds	r2, #4

080015ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015cc:	d3fb      	bcc.n	80015c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ce:	f7ff ffd7 	bl	8001580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d2:	f004 facd 	bl	8005b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d6:	f7ff fb85 	bl	8000ce4 <main>
  bx  lr    
 80015da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e4:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80015e8:	08006e6c 	.word	0x08006e6c
  ldr r2, =_sbss
 80015ec:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80015f0:	20000860 	.word	0x20000860

080015f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC_IRQHandler>
	...

080015f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <HAL_Init+0x40>)
 8001602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_Init+0x40>)
 800160e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_Init+0x40>)
 800161a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001620:	2003      	movs	r0, #3
 8001622:	f000 f973 	bl	800190c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001626:	200f      	movs	r0, #15
 8001628:	f000 f808 	bl	800163c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800162c:	f7ff fe58 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023c00 	.word	0x40023c00

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_InitTick+0x54>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x58>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f999 	bl	8001992 <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e00e      	b.n	8001688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d80a      	bhi.n	8001686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f000 f953 	bl	8001922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4a06      	ldr	r2, [pc, #24]	; (8001698 <HAL_InitTick+0x5c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000003c 	.word	0x2000003c
 8001694:	20000044 	.word	0x20000044
 8001698:	20000040 	.word	0x20000040

0800169c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_IncTick+0x20>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x24>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_IncTick+0x24>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000044 	.word	0x20000044
 80016c0:	2000083c 	.word	0x2000083c

080016c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <HAL_GetTick+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	2000083c 	.word	0x2000083c

080016dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff ffee 	bl	80016c4 <HAL_GetTick>
 80016e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d005      	beq.n	8001702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_Delay+0x44>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001702:	bf00      	nop
 8001704:	f7ff ffde 	bl	80016c4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d8f7      	bhi.n	8001704 <HAL_Delay+0x28>
  {
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000044 	.word	0x20000044

08001724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800174c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001756:	4a04      	ldr	r2, [pc, #16]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	60d3      	str	r3, [r2, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <__NVIC_GetPriorityGrouping+0x18>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	f003 0307 	and.w	r3, r3, #7
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	2b00      	cmp	r3, #0
 8001798:	db0b      	blt.n	80017b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	f003 021f 	and.w	r2, r3, #31
 80017a0:	4907      	ldr	r1, [pc, #28]	; (80017c0 <__NVIC_EnableIRQ+0x38>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	2001      	movs	r0, #1
 80017aa:	fa00 f202 	lsl.w	r2, r0, r2
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000e100 	.word	0xe000e100

080017c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db12      	blt.n	80017fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	490a      	ldr	r1, [pc, #40]	; (8001808 <__NVIC_DisableIRQ+0x44>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	3320      	adds	r3, #32
 80017ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017f0:	f3bf 8f4f 	dsb	sy
}
 80017f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017f6:	f3bf 8f6f 	isb	sy
}
 80017fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	; (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d8:	d301      	bcc.n	80018de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018da:	2301      	movs	r3, #1
 80018dc:	e00f      	b.n	80018fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <SysTick_Config+0x40>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e6:	210f      	movs	r1, #15
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f7ff ff8e 	bl	800180c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <SysTick_Config+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <SysTick_Config+0x40>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	e000e010 	.word	0xe000e010

0800190c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff05 	bl	8001724 <__NVIC_SetPriorityGrouping>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001934:	f7ff ff1a 	bl	800176c <__NVIC_GetPriorityGrouping>
 8001938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	6978      	ldr	r0, [r7, #20]
 8001940:	f7ff ff8e 	bl	8001860 <NVIC_EncodePriority>
 8001944:	4602      	mov	r2, r0
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff5d 	bl	800180c <__NVIC_SetPriority>
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff0d 	bl	8001788 <__NVIC_EnableIRQ>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff1d 	bl	80017c4 <__NVIC_DisableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ff94 	bl	80018c8 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80019aa:	b480      	push	{r7}
 80019ac:	b087      	sub	sp, #28
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	460b      	mov	r3, r1
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80019bc:	7afb      	ldrb	r3, [r7, #11]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d103      	bne.n	80019ca <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	605a      	str	r2, [r3, #4]
      break;
 80019c8:	e002      	b.n	80019d0 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	75fb      	strb	r3, [r7, #23]
      break;
 80019ce:	bf00      	nop
  }

  return status;
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	371c      	adds	r7, #28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e003      	b.n	80019fa <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80019f8:	2300      	movs	r3, #0
  }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	2201      	movs	r2, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_EXTI_IRQHandler+0x44>)
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4013      	ands	r3, r2
 8001a28:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d009      	beq.n	8001a44 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8001a30:	4a06      	ldr	r2, [pc, #24]	; (8001a4c <HAL_EXTI_IRQHandler+0x44>)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	4798      	blx	r3
    }
  }
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40013c00 	.word	0x40013c00

08001a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	; 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	e159      	b.n	8001d20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	f040 8148 	bne.w	8001d1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d005      	beq.n	8001aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d130      	bne.n	8001b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 0201 	and.w	r2, r3, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d017      	beq.n	8001b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d123      	bne.n	8001b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	220f      	movs	r2, #15
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	08da      	lsrs	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3208      	adds	r2, #8
 8001b8e:	69b9      	ldr	r1, [r7, #24]
 8001b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0203 	and.w	r2, r3, #3
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80a2 	beq.w	8001d1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b57      	ldr	r3, [pc, #348]	; (8001d38 <HAL_GPIO_Init+0x2e8>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	4a56      	ldr	r2, [pc, #344]	; (8001d38 <HAL_GPIO_Init+0x2e8>)
 8001be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be4:	6453      	str	r3, [r2, #68]	; 0x44
 8001be6:	4b54      	ldr	r3, [pc, #336]	; (8001d38 <HAL_GPIO_Init+0x2e8>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf2:	4a52      	ldr	r2, [pc, #328]	; (8001d3c <HAL_GPIO_Init+0x2ec>)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	220f      	movs	r2, #15
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a49      	ldr	r2, [pc, #292]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d019      	beq.n	8001c52 <HAL_GPIO_Init+0x202>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a48      	ldr	r2, [pc, #288]	; (8001d44 <HAL_GPIO_Init+0x2f4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_GPIO_Init+0x1fe>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a47      	ldr	r2, [pc, #284]	; (8001d48 <HAL_GPIO_Init+0x2f8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00d      	beq.n	8001c4a <HAL_GPIO_Init+0x1fa>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a46      	ldr	r2, [pc, #280]	; (8001d4c <HAL_GPIO_Init+0x2fc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <HAL_GPIO_Init+0x1f6>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a45      	ldr	r2, [pc, #276]	; (8001d50 <HAL_GPIO_Init+0x300>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d101      	bne.n	8001c42 <HAL_GPIO_Init+0x1f2>
 8001c3e:	2304      	movs	r3, #4
 8001c40:	e008      	b.n	8001c54 <HAL_GPIO_Init+0x204>
 8001c42:	2307      	movs	r3, #7
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x204>
 8001c46:	2303      	movs	r3, #3
 8001c48:	e004      	b.n	8001c54 <HAL_GPIO_Init+0x204>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e002      	b.n	8001c54 <HAL_GPIO_Init+0x204>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_Init+0x204>
 8001c52:	2300      	movs	r3, #0
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	f002 0203 	and.w	r2, r2, #3
 8001c5a:	0092      	lsls	r2, r2, #2
 8001c5c:	4093      	lsls	r3, r2
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c64:	4935      	ldr	r1, [pc, #212]	; (8001d3c <HAL_GPIO_Init+0x2ec>)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c72:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c96:	4a2f      	ldr	r2, [pc, #188]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc0:	4a24      	ldr	r2, [pc, #144]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cea:	4a1a      	ldr	r2, [pc, #104]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d14:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	2b0f      	cmp	r3, #15
 8001d24:	f67f aea2 	bls.w	8001a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3724      	adds	r7, #36	; 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40013800 	.word	0x40013800
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40013c00 	.word	0x40013c00

08001d58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	e0bb      	b.n	8001eec <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d74:	2201      	movs	r2, #1
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	f040 80ab 	bne.w	8001ee6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001d90:	4a5c      	ldr	r2, [pc, #368]	; (8001f04 <HAL_GPIO_DeInit+0x1ac>)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	4013      	ands	r3, r2
 8001db0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a54      	ldr	r2, [pc, #336]	; (8001f08 <HAL_GPIO_DeInit+0x1b0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d019      	beq.n	8001dee <HAL_GPIO_DeInit+0x96>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a53      	ldr	r2, [pc, #332]	; (8001f0c <HAL_GPIO_DeInit+0x1b4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_DeInit+0x92>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a52      	ldr	r2, [pc, #328]	; (8001f10 <HAL_GPIO_DeInit+0x1b8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00d      	beq.n	8001de6 <HAL_GPIO_DeInit+0x8e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a51      	ldr	r2, [pc, #324]	; (8001f14 <HAL_GPIO_DeInit+0x1bc>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d007      	beq.n	8001de2 <HAL_GPIO_DeInit+0x8a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a50      	ldr	r2, [pc, #320]	; (8001f18 <HAL_GPIO_DeInit+0x1c0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_GPIO_DeInit+0x86>
 8001dda:	2304      	movs	r3, #4
 8001ddc:	e008      	b.n	8001df0 <HAL_GPIO_DeInit+0x98>
 8001dde:	2307      	movs	r3, #7
 8001de0:	e006      	b.n	8001df0 <HAL_GPIO_DeInit+0x98>
 8001de2:	2303      	movs	r3, #3
 8001de4:	e004      	b.n	8001df0 <HAL_GPIO_DeInit+0x98>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e002      	b.n	8001df0 <HAL_GPIO_DeInit+0x98>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_GPIO_DeInit+0x98>
 8001dee:	2300      	movs	r3, #0
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	f002 0203 	and.w	r2, r2, #3
 8001df6:	0092      	lsls	r2, r2, #2
 8001df8:	4093      	lsls	r3, r2
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d132      	bne.n	8001e66 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001e00:	4b46      	ldr	r3, [pc, #280]	; (8001f1c <HAL_GPIO_DeInit+0x1c4>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	4944      	ldr	r1, [pc, #272]	; (8001f1c <HAL_GPIO_DeInit+0x1c4>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001e0e:	4b43      	ldr	r3, [pc, #268]	; (8001f1c <HAL_GPIO_DeInit+0x1c4>)
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	4941      	ldr	r1, [pc, #260]	; (8001f1c <HAL_GPIO_DeInit+0x1c4>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001e1c:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <HAL_GPIO_DeInit+0x1c4>)
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	493d      	ldr	r1, [pc, #244]	; (8001f1c <HAL_GPIO_DeInit+0x1c4>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001e2a:	4b3c      	ldr	r3, [pc, #240]	; (8001f1c <HAL_GPIO_DeInit+0x1c4>)
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	493a      	ldr	r1, [pc, #232]	; (8001f1c <HAL_GPIO_DeInit+0x1c4>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	220f      	movs	r2, #15
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001e48:	4a2e      	ldr	r2, [pc, #184]	; (8001f04 <HAL_GPIO_DeInit+0x1ac>)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	43da      	mvns	r2, r3
 8001e58:	482a      	ldr	r0, [pc, #168]	; (8001f04 <HAL_GPIO_DeInit+0x1ac>)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	400a      	ands	r2, r1
 8001e60:	3302      	adds	r3, #2
 8001e62:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2103      	movs	r1, #3
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	401a      	ands	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	08da      	lsrs	r2, r3, #3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3208      	adds	r2, #8
 8001e84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	08d2      	lsrs	r2, r2, #3
 8001e9c:	4019      	ands	r1, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3208      	adds	r2, #8
 8001ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	2103      	movs	r1, #3
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	401a      	ands	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2103      	movs	r1, #3
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	401a      	ands	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f af40 	bls.w	8001d74 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	371c      	adds	r7, #28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40013c00 	.word	0x40013c00

08001f20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	887b      	ldrh	r3, [r7, #2]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
 8001f3c:	e001      	b.n	8001f42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f60:	787b      	ldrb	r3, [r7, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f6c:	e003      	b.n	8001f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	041a      	lsls	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	619a      	str	r2, [r3, #24]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f94:	887a      	ldrh	r2, [r7, #2]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	041a      	lsls	r2, r3, #16
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	400b      	ands	r3, r1
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f806 	bl	8001fe8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40013c00 	.word	0x40013c00

08001fe8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e264      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d075      	beq.n	800210a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800201e:	4ba3      	ldr	r3, [pc, #652]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b04      	cmp	r3, #4
 8002028:	d00c      	beq.n	8002044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800202a:	4ba0      	ldr	r3, [pc, #640]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002032:	2b08      	cmp	r3, #8
 8002034:	d112      	bne.n	800205c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002036:	4b9d      	ldr	r3, [pc, #628]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002042:	d10b      	bne.n	800205c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	4b99      	ldr	r3, [pc, #612]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d05b      	beq.n	8002108 <HAL_RCC_OscConfig+0x108>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d157      	bne.n	8002108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e23f      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002064:	d106      	bne.n	8002074 <HAL_RCC_OscConfig+0x74>
 8002066:	4b91      	ldr	r3, [pc, #580]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a90      	ldr	r2, [pc, #576]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e01d      	b.n	80020b0 <HAL_RCC_OscConfig+0xb0>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x98>
 800207e:	4b8b      	ldr	r3, [pc, #556]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a8a      	ldr	r2, [pc, #552]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b88      	ldr	r3, [pc, #544]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a87      	ldr	r2, [pc, #540]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0xb0>
 8002098:	4b84      	ldr	r3, [pc, #528]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a83      	ldr	r2, [pc, #524]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b81      	ldr	r3, [pc, #516]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a80      	ldr	r2, [pc, #512]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d013      	beq.n	80020e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fb04 	bl	80016c4 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c0:	f7ff fb00 	bl	80016c4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e204      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b76      	ldr	r3, [pc, #472]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0xc0>
 80020de:	e014      	b.n	800210a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff faf0 	bl	80016c4 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff faec 	bl	80016c4 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e1f0      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	4b6c      	ldr	r3, [pc, #432]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0xe8>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d063      	beq.n	80021de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002116:	4b65      	ldr	r3, [pc, #404]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002122:	4b62      	ldr	r3, [pc, #392]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800212a:	2b08      	cmp	r3, #8
 800212c:	d11c      	bne.n	8002168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212e:	4b5f      	ldr	r3, [pc, #380]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d116      	bne.n	8002168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	4b5c      	ldr	r3, [pc, #368]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <HAL_RCC_OscConfig+0x152>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e1c4      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b56      	ldr	r3, [pc, #344]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4952      	ldr	r1, [pc, #328]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	e03a      	b.n	80021de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d020      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002170:	4b4f      	ldr	r3, [pc, #316]	; (80022b0 <HAL_RCC_OscConfig+0x2b0>)
 8002172:	2201      	movs	r2, #1
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7ff faa5 	bl	80016c4 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217e:	f7ff faa1 	bl	80016c4 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e1a5      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	4b46      	ldr	r3, [pc, #280]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219c:	4b43      	ldr	r3, [pc, #268]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4940      	ldr	r1, [pc, #256]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	600b      	str	r3, [r1, #0]
 80021b0:	e015      	b.n	80021de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b2:	4b3f      	ldr	r3, [pc, #252]	; (80022b0 <HAL_RCC_OscConfig+0x2b0>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7ff fa84 	bl	80016c4 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c0:	f7ff fa80 	bl	80016c4 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e184      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	4b36      	ldr	r3, [pc, #216]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d030      	beq.n	800224c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d016      	beq.n	8002220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f2:	4b30      	ldr	r3, [pc, #192]	; (80022b4 <HAL_RCC_OscConfig+0x2b4>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7ff fa64 	bl	80016c4 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002200:	f7ff fa60 	bl	80016c4 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e164      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	4b26      	ldr	r3, [pc, #152]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x200>
 800221e:	e015      	b.n	800224c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_RCC_OscConfig+0x2b4>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7ff fa4d 	bl	80016c4 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800222e:	f7ff fa49 	bl	80016c4 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e14d      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002240:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f0      	bne.n	800222e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80a0 	beq.w	800239a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 8002274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <HAL_RCC_OscConfig+0x2ac>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_RCC_OscConfig+0x2b8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d121      	bne.n	80022da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_RCC_OscConfig+0x2b8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <HAL_RCC_OscConfig+0x2b8>)
 800229c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a2:	f7ff fa0f 	bl	80016c4 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	e011      	b.n	80022ce <HAL_RCC_OscConfig+0x2ce>
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800
 80022b0:	42470000 	.word	0x42470000
 80022b4:	42470e80 	.word	0x42470e80
 80022b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022bc:	f7ff fa02 	bl	80016c4 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e106      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ce:	4b85      	ldr	r3, [pc, #532]	; (80024e4 <HAL_RCC_OscConfig+0x4e4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d106      	bne.n	80022f0 <HAL_RCC_OscConfig+0x2f0>
 80022e2:	4b81      	ldr	r3, [pc, #516]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 80022e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e6:	4a80      	ldr	r2, [pc, #512]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6713      	str	r3, [r2, #112]	; 0x70
 80022ee:	e01c      	b.n	800232a <HAL_RCC_OscConfig+0x32a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d10c      	bne.n	8002312 <HAL_RCC_OscConfig+0x312>
 80022f8:	4b7b      	ldr	r3, [pc, #492]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fc:	4a7a      	ldr	r2, [pc, #488]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 80022fe:	f043 0304 	orr.w	r3, r3, #4
 8002302:	6713      	str	r3, [r2, #112]	; 0x70
 8002304:	4b78      	ldr	r3, [pc, #480]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	4a77      	ldr	r2, [pc, #476]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6713      	str	r3, [r2, #112]	; 0x70
 8002310:	e00b      	b.n	800232a <HAL_RCC_OscConfig+0x32a>
 8002312:	4b75      	ldr	r3, [pc, #468]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002316:	4a74      	ldr	r2, [pc, #464]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	6713      	str	r3, [r2, #112]	; 0x70
 800231e:	4b72      	ldr	r3, [pc, #456]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002322:	4a71      	ldr	r2, [pc, #452]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002324:	f023 0304 	bic.w	r3, r3, #4
 8002328:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d015      	beq.n	800235e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002332:	f7ff f9c7 	bl	80016c4 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002338:	e00a      	b.n	8002350 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7ff f9c3 	bl	80016c4 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	; 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e0c5      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002350:	4b65      	ldr	r3, [pc, #404]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0ee      	beq.n	800233a <HAL_RCC_OscConfig+0x33a>
 800235c:	e014      	b.n	8002388 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235e:	f7ff f9b1 	bl	80016c4 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002364:	e00a      	b.n	800237c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7ff f9ad 	bl	80016c4 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f241 3288 	movw	r2, #5000	; 0x1388
 8002374:	4293      	cmp	r3, r2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e0af      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237c:	4b5a      	ldr	r3, [pc, #360]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ee      	bne.n	8002366 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002388:	7dfb      	ldrb	r3, [r7, #23]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d105      	bne.n	800239a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238e:	4b56      	ldr	r3, [pc, #344]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	4a55      	ldr	r2, [pc, #340]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002398:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 809b 	beq.w	80024da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023a4:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 030c 	and.w	r3, r3, #12
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d05c      	beq.n	800246a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d141      	bne.n	800243c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b8:	4b4c      	ldr	r3, [pc, #304]	; (80024ec <HAL_RCC_OscConfig+0x4ec>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7ff f981 	bl	80016c4 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c6:	f7ff f97d 	bl	80016c4 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e081      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d8:	4b43      	ldr	r3, [pc, #268]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f0      	bne.n	80023c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69da      	ldr	r2, [r3, #28]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	019b      	lsls	r3, r3, #6
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	085b      	lsrs	r3, r3, #1
 80023fc:	3b01      	subs	r3, #1
 80023fe:	041b      	lsls	r3, r3, #16
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	061b      	lsls	r3, r3, #24
 8002408:	4937      	ldr	r1, [pc, #220]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240e:	4b37      	ldr	r3, [pc, #220]	; (80024ec <HAL_RCC_OscConfig+0x4ec>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7ff f956 	bl	80016c4 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241c:	f7ff f952 	bl	80016c4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e056      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242e:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x41c>
 800243a:	e04e      	b.n	80024da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_RCC_OscConfig+0x4ec>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7ff f93f 	bl	80016c4 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244a:	f7ff f93b 	bl	80016c4 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e03f      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245c:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f0      	bne.n	800244a <HAL_RCC_OscConfig+0x44a>
 8002468:	e037      	b.n	80024da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e032      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002476:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <HAL_RCC_OscConfig+0x4e8>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d028      	beq.n	80024d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248e:	429a      	cmp	r2, r3
 8002490:	d121      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d11a      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024a6:	4013      	ands	r3, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d111      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	085b      	lsrs	r3, r3, #1
 80024be:	3b01      	subs	r3, #1
 80024c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d001      	beq.n	80024da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40007000 	.word	0x40007000
 80024e8:	40023800 	.word	0x40023800
 80024ec:	42470060 	.word	0x42470060

080024f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0cc      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002504:	4b68      	ldr	r3, [pc, #416]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d90c      	bls.n	800252c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b65      	ldr	r3, [pc, #404]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b63      	ldr	r3, [pc, #396]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0b8      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002544:	4b59      	ldr	r3, [pc, #356]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800254e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800255c:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b50      	ldr	r3, [pc, #320]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	494d      	ldr	r1, [pc, #308]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d044      	beq.n	8002610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d119      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e07f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d003      	beq.n	80025ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ae:	4b3f      	ldr	r3, [pc, #252]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e06f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e067      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ce:	4b37      	ldr	r3, [pc, #220]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f023 0203 	bic.w	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4934      	ldr	r1, [pc, #208]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e0:	f7ff f870 	bl	80016c4 <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7ff f86c 	bl	80016c4 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e04f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 020c 	and.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	429a      	cmp	r2, r3
 800260e:	d1eb      	bne.n	80025e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002610:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d20c      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e032      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4916      	ldr	r1, [pc, #88]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	490e      	ldr	r1, [pc, #56]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002676:	f000 f821 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 800267a:	4602      	mov	r2, r0
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	490a      	ldr	r1, [pc, #40]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	5ccb      	ldrb	r3, [r1, r3]
 800268a:	fa22 f303 	lsr.w	r3, r2, r3
 800268e:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe ffd0 	bl	800163c <HAL_InitTick>

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023c00 	.word	0x40023c00
 80026ac:	40023800 	.word	0x40023800
 80026b0:	08006bcc 	.word	0x08006bcc
 80026b4:	2000003c 	.word	0x2000003c
 80026b8:	20000040 	.word	0x20000040

080026bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	2300      	movs	r3, #0
 80026ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d4:	4b67      	ldr	r3, [pc, #412]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d00d      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x40>
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	f200 80bd 	bhi.w	8002860 <HAL_RCC_GetSysClockFreq+0x1a4>
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x34>
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d003      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ee:	e0b7      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026f0:	4b61      	ldr	r3, [pc, #388]	; (8002878 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026f2:	60bb      	str	r3, [r7, #8]
       break;
 80026f4:	e0b7      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026f6:	4b61      	ldr	r3, [pc, #388]	; (800287c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80026f8:	60bb      	str	r3, [r7, #8]
      break;
 80026fa:	e0b4      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026fc:	4b5d      	ldr	r3, [pc, #372]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002704:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002706:	4b5b      	ldr	r3, [pc, #364]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d04d      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002712:	4b58      	ldr	r3, [pc, #352]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	099b      	lsrs	r3, r3, #6
 8002718:	461a      	mov	r2, r3
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002722:	f04f 0100 	mov.w	r1, #0
 8002726:	ea02 0800 	and.w	r8, r2, r0
 800272a:	ea03 0901 	and.w	r9, r3, r1
 800272e:	4640      	mov	r0, r8
 8002730:	4649      	mov	r1, r9
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	014b      	lsls	r3, r1, #5
 800273c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002740:	0142      	lsls	r2, r0, #5
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	ebb0 0008 	subs.w	r0, r0, r8
 800274a:	eb61 0109 	sbc.w	r1, r1, r9
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	018b      	lsls	r3, r1, #6
 8002758:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800275c:	0182      	lsls	r2, r0, #6
 800275e:	1a12      	subs	r2, r2, r0
 8002760:	eb63 0301 	sbc.w	r3, r3, r1
 8002764:	f04f 0000 	mov.w	r0, #0
 8002768:	f04f 0100 	mov.w	r1, #0
 800276c:	00d9      	lsls	r1, r3, #3
 800276e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002772:	00d0      	lsls	r0, r2, #3
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	eb12 0208 	adds.w	r2, r2, r8
 800277c:	eb43 0309 	adc.w	r3, r3, r9
 8002780:	f04f 0000 	mov.w	r0, #0
 8002784:	f04f 0100 	mov.w	r1, #0
 8002788:	0259      	lsls	r1, r3, #9
 800278a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800278e:	0250      	lsls	r0, r2, #9
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	461a      	mov	r2, r3
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	f7fd fd76 	bl	8000290 <__aeabi_uldivmod>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4613      	mov	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	e04a      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ae:	4b31      	ldr	r3, [pc, #196]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	099b      	lsrs	r3, r3, #6
 80027b4:	461a      	mov	r2, r3
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027be:	f04f 0100 	mov.w	r1, #0
 80027c2:	ea02 0400 	and.w	r4, r2, r0
 80027c6:	ea03 0501 	and.w	r5, r3, r1
 80027ca:	4620      	mov	r0, r4
 80027cc:	4629      	mov	r1, r5
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	014b      	lsls	r3, r1, #5
 80027d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027dc:	0142      	lsls	r2, r0, #5
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	1b00      	subs	r0, r0, r4
 80027e4:	eb61 0105 	sbc.w	r1, r1, r5
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	018b      	lsls	r3, r1, #6
 80027f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027f6:	0182      	lsls	r2, r0, #6
 80027f8:	1a12      	subs	r2, r2, r0
 80027fa:	eb63 0301 	sbc.w	r3, r3, r1
 80027fe:	f04f 0000 	mov.w	r0, #0
 8002802:	f04f 0100 	mov.w	r1, #0
 8002806:	00d9      	lsls	r1, r3, #3
 8002808:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800280c:	00d0      	lsls	r0, r2, #3
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	1912      	adds	r2, r2, r4
 8002814:	eb45 0303 	adc.w	r3, r5, r3
 8002818:	f04f 0000 	mov.w	r0, #0
 800281c:	f04f 0100 	mov.w	r1, #0
 8002820:	0299      	lsls	r1, r3, #10
 8002822:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002826:	0290      	lsls	r0, r2, #10
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	461a      	mov	r2, r3
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	f7fd fd2a 	bl	8000290 <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4613      	mov	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	0c1b      	lsrs	r3, r3, #16
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	3301      	adds	r3, #1
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	60bb      	str	r3, [r7, #8]
      break;
 800285e:	e002      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002862:	60bb      	str	r3, [r7, #8]
      break;
 8002864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002866:	68bb      	ldr	r3, [r7, #8]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	00f42400 	.word	0x00f42400
 800287c:	007a1200 	.word	0x007a1200

08002880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_RCC_GetHCLKFreq+0x14>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	2000003c 	.word	0x2000003c

08002898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800289c:	f7ff fff0 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	0a9b      	lsrs	r3, r3, #10
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4903      	ldr	r1, [pc, #12]	; (80028bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800
 80028bc:	08006bdc 	.word	0x08006bdc

080028c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028c4:	f7ff ffdc 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	0b5b      	lsrs	r3, r3, #13
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	4903      	ldr	r1, [pc, #12]	; (80028e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40023800 	.word	0x40023800
 80028e4:	08006bdc 	.word	0x08006bdc

080028e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e07b      	b.n	80029f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d108      	bne.n	8002914 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800290a:	d009      	beq.n	8002920 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]
 8002912:	e005      	b.n	8002920 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f85d 	bl	80029fa <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002956:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a4:	ea42 0103 	orr.w	r1, r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	0c1b      	lsrs	r3, r3, #16
 80029be:	f003 0104 	and.w	r1, r3, #4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	f003 0210 	and.w	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69da      	ldr	r2, [r3, #28]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b08c      	sub	sp, #48	; 0x30
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_SPI_TransmitReceive+0x26>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e18a      	b.n	8002d4a <HAL_SPI_TransmitReceive+0x33c>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a3c:	f7fe fe42 	bl	80016c4 <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a52:	887b      	ldrh	r3, [r7, #2]
 8002a54:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d00f      	beq.n	8002a7e <HAL_SPI_TransmitReceive+0x70>
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a64:	d107      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d103      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x68>
 8002a6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d003      	beq.n	8002a7e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
 8002a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a7c:	e15b      	b.n	8002d36 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0x82>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0x82>
 8002a8a:	887b      	ldrh	r3, [r7, #2]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d103      	bne.n	8002a98 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a96:	e14e      	b.n	8002d36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d003      	beq.n	8002aac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2205      	movs	r2, #5
 8002aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	887a      	ldrh	r2, [r7, #2]
 8002ac2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	887a      	ldrh	r2, [r7, #2]
 8002ace:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d007      	beq.n	8002b00 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002afe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b08:	d178      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <HAL_SPI_TransmitReceive+0x10a>
 8002b12:	8b7b      	ldrh	r3, [r7, #26]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d166      	bne.n	8002be6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	881a      	ldrh	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	1c9a      	adds	r2, r3, #2
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b3c:	e053      	b.n	8002be6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d11b      	bne.n	8002b84 <HAL_SPI_TransmitReceive+0x176>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d016      	beq.n	8002b84 <HAL_SPI_TransmitReceive+0x176>
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d113      	bne.n	8002b84 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	881a      	ldrh	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	1c9a      	adds	r2, r3, #2
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d119      	bne.n	8002bc6 <HAL_SPI_TransmitReceive+0x1b8>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d014      	beq.n	8002bc6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	b292      	uxth	r2, r2
 8002ba8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	1c9a      	adds	r2, r3, #2
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bc6:	f7fe fd7d 	bl	80016c4 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d807      	bhi.n	8002be6 <HAL_SPI_TransmitReceive+0x1d8>
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bdc:	d003      	beq.n	8002be6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002be4:	e0a7      	b.n	8002d36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1a6      	bne.n	8002b3e <HAL_SPI_TransmitReceive+0x130>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1a1      	bne.n	8002b3e <HAL_SPI_TransmitReceive+0x130>
 8002bfa:	e07c      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_SPI_TransmitReceive+0x1fc>
 8002c04:	8b7b      	ldrh	r3, [r7, #26]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d16b      	bne.n	8002ce2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	330c      	adds	r3, #12
 8002c14:	7812      	ldrb	r2, [r2, #0]
 8002c16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c30:	e057      	b.n	8002ce2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d11c      	bne.n	8002c7a <HAL_SPI_TransmitReceive+0x26c>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d017      	beq.n	8002c7a <HAL_SPI_TransmitReceive+0x26c>
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d114      	bne.n	8002c7a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	7812      	ldrb	r2, [r2, #0]
 8002c5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d119      	bne.n	8002cbc <HAL_SPI_TransmitReceive+0x2ae>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d014      	beq.n	8002cbc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cbc:	f7fe fd02 	bl	80016c4 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d803      	bhi.n	8002cd4 <HAL_SPI_TransmitReceive+0x2c6>
 8002ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd2:	d102      	bne.n	8002cda <HAL_SPI_TransmitReceive+0x2cc>
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d103      	bne.n	8002ce2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ce0:	e029      	b.n	8002d36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1a2      	bne.n	8002c32 <HAL_SPI_TransmitReceive+0x224>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d19d      	bne.n	8002c32 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f8c0 	bl	8002e80 <SPI_EndRxTxTransaction>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d12:	e010      	b.n	8002d36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10b      	bne.n	8002d34 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	e000      	b.n	8002d36 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3730      	adds	r7, #48	; 0x30
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d60:	b2db      	uxtb	r3, r3
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d80:	f7fe fca0 	bl	80016c4 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d90:	f7fe fc98 	bl	80016c4 <HAL_GetTick>
 8002d94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d96:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	015b      	lsls	r3, r3, #5
 8002d9c:	0d1b      	lsrs	r3, r3, #20
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	fb02 f303 	mul.w	r3, r2, r3
 8002da4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002da6:	e054      	b.n	8002e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dae:	d050      	beq.n	8002e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002db0:	f7fe fc88 	bl	80016c4 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d902      	bls.n	8002dc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d13d      	bne.n	8002e42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dde:	d111      	bne.n	8002e04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de8:	d004      	beq.n	8002df4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df2:	d107      	bne.n	8002e04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e0c:	d10f      	bne.n	8002e2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e017      	b.n	8002e72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	bf0c      	ite	eq
 8002e62:	2301      	moveq	r3, #1
 8002e64:	2300      	movne	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d19b      	bne.n	8002da8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	2000003c 	.word	0x2000003c

08002e80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <SPI_EndRxTxTransaction+0x7c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1b      	ldr	r2, [pc, #108]	; (8002f00 <SPI_EndRxTxTransaction+0x80>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	0d5b      	lsrs	r3, r3, #21
 8002e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eaa:	d112      	bne.n	8002ed2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2180      	movs	r1, #128	; 0x80
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f7ff ff5a 	bl	8002d70 <SPI_WaitFlagStateUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d016      	beq.n	8002ef0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	f043 0220 	orr.w	r2, r3, #32
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e00f      	b.n	8002ef2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee8:	2b80      	cmp	r3, #128	; 0x80
 8002eea:	d0f2      	beq.n	8002ed2 <SPI_EndRxTxTransaction+0x52>
 8002eec:	e000      	b.n	8002ef0 <SPI_EndRxTxTransaction+0x70>
        break;
 8002eee:	bf00      	nop
  }

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	2000003c 	.word	0x2000003c
 8002f00:	165e9f81 	.word	0x165e9f81

08002f04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e03f      	b.n	8002f96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe fa00 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2224      	movs	r2, #36	; 0x24
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f929 	bl	80031a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b08a      	sub	sp, #40	; 0x28
 8002fa2:	af02      	add	r7, sp, #8
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	603b      	str	r3, [r7, #0]
 8002faa:	4613      	mov	r3, r2
 8002fac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d17c      	bne.n	80030b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_UART_Transmit+0x2c>
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e075      	b.n	80030ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_UART_Transmit+0x3e>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e06e      	b.n	80030ba <HAL_UART_Transmit+0x11c>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2221      	movs	r2, #33	; 0x21
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ff2:	f7fe fb67 	bl	80016c4 <HAL_GetTick>
 8002ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	88fa      	ldrh	r2, [r7, #6]
 8002ffc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	88fa      	ldrh	r2, [r7, #6]
 8003002:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300c:	d108      	bne.n	8003020 <HAL_UART_Transmit+0x82>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d104      	bne.n	8003020 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	e003      	b.n	8003028 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003024:	2300      	movs	r3, #0
 8003026:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003030:	e02a      	b.n	8003088 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2200      	movs	r2, #0
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 f840 	bl	80030c2 <UART_WaitOnFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e036      	b.n	80030ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10b      	bne.n	800306a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003060:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	3302      	adds	r3, #2
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	e007      	b.n	800307a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	781a      	ldrb	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	3301      	adds	r3, #1
 8003078:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1cf      	bne.n	8003032 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2200      	movs	r2, #0
 800309a:	2140      	movs	r1, #64	; 0x40
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f810 	bl	80030c2 <UART_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e006      	b.n	80030ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e000      	b.n	80030ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030b8:	2302      	movs	r3, #2
  }
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b090      	sub	sp, #64	; 0x40
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	4613      	mov	r3, r2
 80030d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030d2:	e050      	b.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030da:	d04c      	beq.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80030e2:	f7fe faef 	bl	80016c4 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d241      	bcs.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	330c      	adds	r3, #12
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	330c      	adds	r3, #12
 8003110:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003112:	637a      	str	r2, [r7, #52]	; 0x34
 8003114:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e5      	bne.n	80030f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3314      	adds	r3, #20
 800312c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	e853 3f00 	ldrex	r3, [r3]
 8003134:	613b      	str	r3, [r7, #16]
   return(result);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f023 0301 	bic.w	r3, r3, #1
 800313c:	63bb      	str	r3, [r7, #56]	; 0x38
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3314      	adds	r3, #20
 8003144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003146:	623a      	str	r2, [r7, #32]
 8003148:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314a:	69f9      	ldr	r1, [r7, #28]
 800314c:	6a3a      	ldr	r2, [r7, #32]
 800314e:	e841 2300 	strex	r3, r2, [r1]
 8003152:	61bb      	str	r3, [r7, #24]
   return(result);
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1e5      	bne.n	8003126 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e00f      	b.n	8003196 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4013      	ands	r3, r2
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	429a      	cmp	r2, r3
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	429a      	cmp	r2, r3
 8003192:	d09f      	beq.n	80030d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3740      	adds	r7, #64	; 0x40
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a4:	b09f      	sub	sp, #124	; 0x7c
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b6:	68d9      	ldr	r1, [r3, #12]
 80031b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	ea40 0301 	orr.w	r3, r0, r1
 80031c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80031da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031e4:	f021 010c 	bic.w	r1, r1, #12
 80031e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ee:	430b      	orrs	r3, r1
 80031f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031fe:	6999      	ldr	r1, [r3, #24]
 8003200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	ea40 0301 	orr.w	r3, r0, r1
 8003208:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800320a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4bc5      	ldr	r3, [pc, #788]	; (8003524 <UART_SetConfig+0x384>)
 8003210:	429a      	cmp	r2, r3
 8003212:	d004      	beq.n	800321e <UART_SetConfig+0x7e>
 8003214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4bc3      	ldr	r3, [pc, #780]	; (8003528 <UART_SetConfig+0x388>)
 800321a:	429a      	cmp	r2, r3
 800321c:	d103      	bne.n	8003226 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800321e:	f7ff fb4f 	bl	80028c0 <HAL_RCC_GetPCLK2Freq>
 8003222:	6778      	str	r0, [r7, #116]	; 0x74
 8003224:	e002      	b.n	800322c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003226:	f7ff fb37 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 800322a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800322c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003234:	f040 80b6 	bne.w	80033a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800323a:	461c      	mov	r4, r3
 800323c:	f04f 0500 	mov.w	r5, #0
 8003240:	4622      	mov	r2, r4
 8003242:	462b      	mov	r3, r5
 8003244:	1891      	adds	r1, r2, r2
 8003246:	6439      	str	r1, [r7, #64]	; 0x40
 8003248:	415b      	adcs	r3, r3
 800324a:	647b      	str	r3, [r7, #68]	; 0x44
 800324c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003250:	1912      	adds	r2, r2, r4
 8003252:	eb45 0303 	adc.w	r3, r5, r3
 8003256:	f04f 0000 	mov.w	r0, #0
 800325a:	f04f 0100 	mov.w	r1, #0
 800325e:	00d9      	lsls	r1, r3, #3
 8003260:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003264:	00d0      	lsls	r0, r2, #3
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	1911      	adds	r1, r2, r4
 800326c:	6639      	str	r1, [r7, #96]	; 0x60
 800326e:	416b      	adcs	r3, r5
 8003270:	667b      	str	r3, [r7, #100]	; 0x64
 8003272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	461a      	mov	r2, r3
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	1891      	adds	r1, r2, r2
 800327e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003280:	415b      	adcs	r3, r3
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003284:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003288:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800328c:	f7fd f800 	bl	8000290 <__aeabi_uldivmod>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4ba5      	ldr	r3, [pc, #660]	; (800352c <UART_SetConfig+0x38c>)
 8003296:	fba3 2302 	umull	r2, r3, r3, r2
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	011e      	lsls	r6, r3, #4
 800329e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a0:	461c      	mov	r4, r3
 80032a2:	f04f 0500 	mov.w	r5, #0
 80032a6:	4622      	mov	r2, r4
 80032a8:	462b      	mov	r3, r5
 80032aa:	1891      	adds	r1, r2, r2
 80032ac:	6339      	str	r1, [r7, #48]	; 0x30
 80032ae:	415b      	adcs	r3, r3
 80032b0:	637b      	str	r3, [r7, #52]	; 0x34
 80032b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032b6:	1912      	adds	r2, r2, r4
 80032b8:	eb45 0303 	adc.w	r3, r5, r3
 80032bc:	f04f 0000 	mov.w	r0, #0
 80032c0:	f04f 0100 	mov.w	r1, #0
 80032c4:	00d9      	lsls	r1, r3, #3
 80032c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ca:	00d0      	lsls	r0, r2, #3
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	1911      	adds	r1, r2, r4
 80032d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80032d4:	416b      	adcs	r3, r5
 80032d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	461a      	mov	r2, r3
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	1891      	adds	r1, r2, r2
 80032e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80032e6:	415b      	adcs	r3, r3
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80032f2:	f7fc ffcd 	bl	8000290 <__aeabi_uldivmod>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4b8c      	ldr	r3, [pc, #560]	; (800352c <UART_SetConfig+0x38c>)
 80032fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	2164      	movs	r1, #100	; 0x64
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	3332      	adds	r3, #50	; 0x32
 800330e:	4a87      	ldr	r2, [pc, #540]	; (800352c <UART_SetConfig+0x38c>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800331c:	441e      	add	r6, r3
 800331e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003320:	4618      	mov	r0, r3
 8003322:	f04f 0100 	mov.w	r1, #0
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	1894      	adds	r4, r2, r2
 800332c:	623c      	str	r4, [r7, #32]
 800332e:	415b      	adcs	r3, r3
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
 8003332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003336:	1812      	adds	r2, r2, r0
 8003338:	eb41 0303 	adc.w	r3, r1, r3
 800333c:	f04f 0400 	mov.w	r4, #0
 8003340:	f04f 0500 	mov.w	r5, #0
 8003344:	00dd      	lsls	r5, r3, #3
 8003346:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800334a:	00d4      	lsls	r4, r2, #3
 800334c:	4622      	mov	r2, r4
 800334e:	462b      	mov	r3, r5
 8003350:	1814      	adds	r4, r2, r0
 8003352:	653c      	str	r4, [r7, #80]	; 0x50
 8003354:	414b      	adcs	r3, r1
 8003356:	657b      	str	r3, [r7, #84]	; 0x54
 8003358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	461a      	mov	r2, r3
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	1891      	adds	r1, r2, r2
 8003364:	61b9      	str	r1, [r7, #24]
 8003366:	415b      	adcs	r3, r3
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800336e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003372:	f7fc ff8d 	bl	8000290 <__aeabi_uldivmod>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4b6c      	ldr	r3, [pc, #432]	; (800352c <UART_SetConfig+0x38c>)
 800337c:	fba3 1302 	umull	r1, r3, r3, r2
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	2164      	movs	r1, #100	; 0x64
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	3332      	adds	r3, #50	; 0x32
 800338e:	4a67      	ldr	r2, [pc, #412]	; (800352c <UART_SetConfig+0x38c>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	f003 0207 	and.w	r2, r3, #7
 800339a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4432      	add	r2, r6
 80033a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033a2:	e0b9      	b.n	8003518 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a6:	461c      	mov	r4, r3
 80033a8:	f04f 0500 	mov.w	r5, #0
 80033ac:	4622      	mov	r2, r4
 80033ae:	462b      	mov	r3, r5
 80033b0:	1891      	adds	r1, r2, r2
 80033b2:	6139      	str	r1, [r7, #16]
 80033b4:	415b      	adcs	r3, r3
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033bc:	1912      	adds	r2, r2, r4
 80033be:	eb45 0303 	adc.w	r3, r5, r3
 80033c2:	f04f 0000 	mov.w	r0, #0
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	00d9      	lsls	r1, r3, #3
 80033cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033d0:	00d0      	lsls	r0, r2, #3
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	eb12 0804 	adds.w	r8, r2, r4
 80033da:	eb43 0905 	adc.w	r9, r3, r5
 80033de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f04f 0100 	mov.w	r1, #0
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	008b      	lsls	r3, r1, #2
 80033f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033f6:	0082      	lsls	r2, r0, #2
 80033f8:	4640      	mov	r0, r8
 80033fa:	4649      	mov	r1, r9
 80033fc:	f7fc ff48 	bl	8000290 <__aeabi_uldivmod>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4b49      	ldr	r3, [pc, #292]	; (800352c <UART_SetConfig+0x38c>)
 8003406:	fba3 2302 	umull	r2, r3, r3, r2
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	011e      	lsls	r6, r3, #4
 800340e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003410:	4618      	mov	r0, r3
 8003412:	f04f 0100 	mov.w	r1, #0
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	1894      	adds	r4, r2, r2
 800341c:	60bc      	str	r4, [r7, #8]
 800341e:	415b      	adcs	r3, r3
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003426:	1812      	adds	r2, r2, r0
 8003428:	eb41 0303 	adc.w	r3, r1, r3
 800342c:	f04f 0400 	mov.w	r4, #0
 8003430:	f04f 0500 	mov.w	r5, #0
 8003434:	00dd      	lsls	r5, r3, #3
 8003436:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800343a:	00d4      	lsls	r4, r2, #3
 800343c:	4622      	mov	r2, r4
 800343e:	462b      	mov	r3, r5
 8003440:	1814      	adds	r4, r2, r0
 8003442:	64bc      	str	r4, [r7, #72]	; 0x48
 8003444:	414b      	adcs	r3, r1
 8003446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4618      	mov	r0, r3
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	008b      	lsls	r3, r1, #2
 800345c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003460:	0082      	lsls	r2, r0, #2
 8003462:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003466:	f7fc ff13 	bl	8000290 <__aeabi_uldivmod>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4b2f      	ldr	r3, [pc, #188]	; (800352c <UART_SetConfig+0x38c>)
 8003470:	fba3 1302 	umull	r1, r3, r3, r2
 8003474:	095b      	lsrs	r3, r3, #5
 8003476:	2164      	movs	r1, #100	; 0x64
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	3332      	adds	r3, #50	; 0x32
 8003482:	4a2a      	ldr	r2, [pc, #168]	; (800352c <UART_SetConfig+0x38c>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800348e:	441e      	add	r6, r3
 8003490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003492:	4618      	mov	r0, r3
 8003494:	f04f 0100 	mov.w	r1, #0
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	1894      	adds	r4, r2, r2
 800349e:	603c      	str	r4, [r7, #0]
 80034a0:	415b      	adcs	r3, r3
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034a8:	1812      	adds	r2, r2, r0
 80034aa:	eb41 0303 	adc.w	r3, r1, r3
 80034ae:	f04f 0400 	mov.w	r4, #0
 80034b2:	f04f 0500 	mov.w	r5, #0
 80034b6:	00dd      	lsls	r5, r3, #3
 80034b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034bc:	00d4      	lsls	r4, r2, #3
 80034be:	4622      	mov	r2, r4
 80034c0:	462b      	mov	r3, r5
 80034c2:	eb12 0a00 	adds.w	sl, r2, r0
 80034c6:	eb43 0b01 	adc.w	fp, r3, r1
 80034ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f04f 0100 	mov.w	r1, #0
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	008b      	lsls	r3, r1, #2
 80034de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80034e2:	0082      	lsls	r2, r0, #2
 80034e4:	4650      	mov	r0, sl
 80034e6:	4659      	mov	r1, fp
 80034e8:	f7fc fed2 	bl	8000290 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4b0e      	ldr	r3, [pc, #56]	; (800352c <UART_SetConfig+0x38c>)
 80034f2:	fba3 1302 	umull	r1, r3, r3, r2
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	2164      	movs	r1, #100	; 0x64
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	3332      	adds	r3, #50	; 0x32
 8003504:	4a09      	ldr	r2, [pc, #36]	; (800352c <UART_SetConfig+0x38c>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	f003 020f 	and.w	r2, r3, #15
 8003510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4432      	add	r2, r6
 8003516:	609a      	str	r2, [r3, #8]
}
 8003518:	bf00      	nop
 800351a:	377c      	adds	r7, #124	; 0x7c
 800351c:	46bd      	mov	sp, r7
 800351e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003522:	bf00      	nop
 8003524:	40011000 	.word	0x40011000
 8003528:	40011400 	.word	0x40011400
 800352c:	51eb851f 	.word	0x51eb851f

08003530 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	7818      	ldrb	r0, [r3, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800354a:	b299      	uxth	r1, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	78db      	ldrb	r3, [r3, #3]
 8003550:	461a      	mov	r2, r3
 8003552:	f7fd fe2b 	bl	80011ac <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8003556:	7bfb      	ldrb	r3, [r7, #15]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003568:	2300      	movs	r3, #0
 800356a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	7818      	ldrb	r0, [r3, #0]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800357a:	b299      	uxth	r1, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	78db      	ldrb	r3, [r3, #3]
 8003580:	461a      	mov	r2, r3
 8003582:	f000 ffd8 	bl	8004536 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8003586:	7bfb      	ldrb	r3, [r7, #15]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8003590:	b590      	push	{r4, r7, lr}
 8003592:	b087      	sub	sp, #28
 8003594:	af02      	add	r7, sp, #8
 8003596:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003598:	2300      	movs	r3, #0
 800359a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	7818      	ldrb	r0, [r3, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80035aa:	b299      	uxth	r1, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	78da      	ldrb	r2, [r3, #3]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	889b      	ldrh	r3, [r3, #4]
 80035b4:	b29c      	uxth	r4, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	88db      	ldrh	r3, [r3, #6]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	4623      	mov	r3, r4
 80035c0:	f000 ffc8 	bl	8004554 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd90      	pop	{r4, r7, pc}

080035ce <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80035d6:	2300      	movs	r3, #0
 80035d8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 ffca 	bl	800457c <hci_hardware_error_event>

  return status;
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b0a6      	sub	sp, #152	; 0x98
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8003606:	2301      	movs	r3, #1
 8003608:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800360c:	2300      	movs	r3, #0
 800360e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003612:	e030      	b.n	8003676 <hci_number_of_completed_packets_event_process+0x84>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8003614:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003618:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003624:	b29a      	uxth	r2, r3
 8003626:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003630:	440b      	add	r3, r1
 8003632:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8003636:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800363a:	3302      	adds	r3, #2
 800363c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8003640:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003650:	b29a      	uxth	r2, r3
 8003652:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800365c:	440b      	add	r3, r1
 800365e:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8003662:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003666:	3302      	adds	r3, #2
 8003668:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800366c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003670:	3301      	adds	r3, #1
 8003672:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003676:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003682:	4293      	cmp	r3, r2
 8003684:	dbc6      	blt.n	8003614 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8003686:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	f107 0208 	add.w	r2, r7, #8
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f000 ff7d 	bl	8004592 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8003698:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800369c:	4618      	mov	r0, r3
 800369e:	3798      	adds	r7, #152	; 0x98
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 ff76 	bl	80045aa <hci_data_buffer_overflow_event>

  return status;
 80036be:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80036d0:	2300      	movs	r3, #0
 80036d2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	781a      	ldrb	r2, [r3, #0]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f000 ff6a 	bl	80045c0 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80036fe:	2300      	movs	r3, #0
 8003700:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f001 f9dd 	bl	8004aca <aci_blue_initialized_event>

  return status;
 8003710:	7bfb      	ldrb	r3, [r7, #15]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003722:	2300      	movs	r3, #0
 8003724:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4618      	mov	r0, r3
 800372e:	f001 f9d7 	bl	8004ae0 <aci_blue_events_lost_event>

  return status;
 8003732:	7bfb      	ldrb	r3, [r7, #15]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 800373c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003740:	b08d      	sub	sp, #52	; 0x34
 8003742:	af08      	add	r7, sp, #32
 8003744:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003746:	2300      	movs	r3, #0
 8003748:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f893 c000 	ldrb.w	ip, [r3]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f8d3 e001 	ldr.w	lr, [r3, #1]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f8d3 300d 	ldr.w	r3, [r3, #13]
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	f8d1 1015 	ldr.w	r1, [r1, #21]
 800377a:	68b8      	ldr	r0, [r7, #8]
 800377c:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8003780:	68bc      	ldr	r4, [r7, #8]
 8003782:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8003786:	68bd      	ldr	r5, [r7, #8]
 8003788:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 800378c:	68be      	ldr	r6, [r7, #8]
 800378e:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8003796:	9307      	str	r3, [sp, #28]
 8003798:	9606      	str	r6, [sp, #24]
 800379a:	9505      	str	r5, [sp, #20]
 800379c:	9404      	str	r4, [sp, #16]
 800379e:	9003      	str	r0, [sp, #12]
 80037a0:	9102      	str	r1, [sp, #8]
 80037a2:	9201      	str	r2, [sp, #4]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	464b      	mov	r3, r9
 80037aa:	4642      	mov	r2, r8
 80037ac:	4671      	mov	r1, lr
 80037ae:	4660      	mov	r0, ip
 80037b0:	f001 f9a0 	bl	8004af4 <aci_blue_crash_info_event>

  return status;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080037c0 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80037c8:	2300      	movs	r3, #0
 80037ca:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	7818      	ldrb	r0, [r3, #0]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	7859      	ldrb	r1, [r3, #1]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80037de:	461a      	mov	r2, r3
 80037e0:	f001 f996 	bl	8004b10 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f993 0000 	ldrsb.w	r0, [r3]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 800380c:	461a      	mov	r2, r3
 800380e:	f001 f98d 	bl	8004b2c <aci_hal_scan_req_report_event>

  return status;
 8003812:	7bfb      	ldrb	r3, [r7, #15]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003824:	2300      	movs	r3, #0
 8003826:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	7818      	ldrb	r0, [r3, #0]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8003838:	461a      	mov	r2, r3
 800383a:	f001 f985 	bl	8004b48 <aci_hal_fw_error_event>

  return status;
 800383e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003850:	2300      	movs	r3, #0
 8003852:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8003854:	f000 ff4a 	bl	80046ec <aci_gap_limited_discoverable_event>

  return status;
 8003858:	7bfb      	ldrb	r3, [r7, #15]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	b298      	uxth	r0, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	7899      	ldrb	r1, [r3, #2]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	78db      	ldrb	r3, [r3, #3]
 8003880:	461a      	mov	r2, r3
 8003882:	f000 ff3a 	bl	80046fa <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8003886:	7bfb      	ldrb	r3, [r7, #15]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003898:	2300      	movs	r3, #0
 800389a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 ff36 	bl	8004718 <aci_gap_pass_key_req_event>

  return status;
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80038be:	2300      	movs	r3, #0
 80038c0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 ff2e 	bl	800472e <aci_gap_authorization_req_event>

  return status;
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80038e4:	2300      	movs	r3, #0
 80038e6:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 80038e8:	f000 ff2c 	bl	8004744 <aci_gap_slave_security_initiated_event>

  return status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 8003902:	f000 ff26 	bl	8004752 <aci_gap_bond_lost_event>

  return status;
 8003906:	7bfb      	ldrb	r3, [r7, #15]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003918:	2300      	movs	r3, #0
 800391a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	7818      	ldrb	r0, [r3, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	7859      	ldrb	r1, [r3, #1]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8003930:	f000 ff16 	bl	8004760 <aci_gap_proc_complete_event>

  return status;
 8003934:	7bfb      	ldrb	r3, [r7, #15]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	4618      	mov	r0, r3
 8003956:	f000 ff13 	bl	8004780 <aci_gap_addr_not_resolved_event>

  return status;
 800395a:	7bfb      	ldrb	r3, [r7, #15]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800396c:	2300      	movs	r3, #0
 800396e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	b29a      	uxth	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003980:	4619      	mov	r1, r3
 8003982:	4610      	mov	r0, r2
 8003984:	f000 ff07 	bl	8004796 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800399a:	2300      	movs	r3, #0
 800399c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	789b      	ldrb	r3, [r3, #2]
 80039ac:	4619      	mov	r1, r3
 80039ae:	4610      	mov	r0, r2
 80039b0:	f000 fefd 	bl	80047ae <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80039c6:	2300      	movs	r3, #0
 80039c8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	885b      	ldrh	r3, [r3, #2]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	4619      	mov	r1, r3
 80039dc:	4610      	mov	r0, r2
 80039de:	f001 f830 	bl	8004a42 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	b298      	uxth	r0, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f001 f827 	bl	8004a5e <aci_l2cap_proc_timeout_event>

  return status;
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8003a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a1c:	b089      	sub	sp, #36	; 0x24
 8003a1e:	af04      	add	r7, sp, #16
 8003a20:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003a22:	2300      	movs	r3, #0
 8003a24:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b298      	uxth	r0, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	789c      	ldrb	r4, [r3, #2]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003a3a:	b29d      	uxth	r5, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8003a42:	b29e      	uxth	r6, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8003a52:	b292      	uxth	r2, r2
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8003a5a:	b289      	uxth	r1, r1
 8003a5c:	9102      	str	r1, [sp, #8]
 8003a5e:	9201      	str	r2, [sp, #4]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	4633      	mov	r3, r6
 8003a64:	462a      	mov	r2, r5
 8003a66:	4621      	mov	r1, r4
 8003a68:	f001 f807 	bl	8004a7a <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a76 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8003a76:	b590      	push	{r4, r7, lr}
 8003a78:	b087      	sub	sp, #28
 8003a7a:	af02      	add	r7, sp, #8
 8003a7c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	b298      	uxth	r0, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	7899      	ldrb	r1, [r3, #2]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	4623      	mov	r3, r4
 8003aa4:	f000 fffd 	bl	8004aa2 <aci_l2cap_command_reject_event>

  return status;
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd90      	pop	{r4, r7, pc}

08003ab2 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8003ab2:	b590      	push	{r4, r7, lr}
 8003ab4:	b087      	sub	sp, #28
 8003ab6:	af02      	add	r7, sp, #8
 8003ab8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003aba:	2300      	movs	r3, #0
 8003abc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	b298      	uxth	r0, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	885b      	ldrh	r3, [r3, #2]
 8003acc:	b299      	uxth	r1, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	889b      	ldrh	r3, [r3, #4]
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	88db      	ldrh	r3, [r3, #6]
 8003ad8:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	4623      	mov	r3, r4
 8003ae2:	f7fd fb0f 	bl	8001104 <aci_gatt_attribute_modified_event>

  return status;
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd90      	pop	{r4, r7, pc}

08003af0 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003af8:	2300      	movs	r3, #0
 8003afa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fe5f 	bl	80047ca <aci_gatt_proc_timeout_event>

  return status;
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	885b      	ldrh	r3, [r3, #2]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	4619      	mov	r1, r3
 8003b34:	4610      	mov	r0, r2
 8003b36:	f000 fe53 	bl	80047e0 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	b298      	uxth	r0, r3
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	7899      	ldrb	r1, [r3, #2]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8003b66:	f000 fe49 	bl	80047fc <aci_att_find_info_resp_event>

  return status;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b0a6      	sub	sp, #152	; 0x98
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b94:	e030      	b.n	8003bf8 <aci_att_find_by_type_value_resp_event_process+0x84>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8003b96:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003b9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003bb2:	440b      	add	r3, r1
 8003bb4:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8003bb8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8003bc2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003bc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003bde:	440b      	add	r3, r1
 8003be0:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8003be4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003be8:	3302      	adds	r3, #2
 8003bea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8003bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bfc:	789b      	ldrb	r3, [r3, #2]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c04:	4293      	cmp	r3, r2
 8003c06:	dbc6      	blt.n	8003b96 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8003c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b298      	uxth	r0, r3
 8003c10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c14:	789b      	ldrb	r3, [r3, #2]
 8003c16:	f107 0208 	add.w	r2, r7, #8
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f000 fdfe 	bl	800481c <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8003c20:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3798      	adds	r7, #152	; 0x98
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003c34:	2300      	movs	r3, #0
 8003c36:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	b298      	uxth	r0, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	7899      	ldrb	r1, [r3, #2]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8003c4e:	f000 fdf3 	bl	8004838 <aci_att_read_by_type_resp_event>

  return status;
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003c64:	2300      	movs	r3, #0
 8003c66:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b298      	uxth	r0, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f000 fdec 	bl	8004858 <aci_att_read_resp_event>

  return status;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003c92:	2300      	movs	r3, #0
 8003c94:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b298      	uxth	r0, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f000 fde3 	bl	8004874 <aci_att_read_blob_resp_event>

  return status;
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	b298      	uxth	r0, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f000 fdda 	bl	8004890 <aci_att_read_multiple_resp_event>

  return status;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b298      	uxth	r0, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	7899      	ldrb	r1, [r3, #2]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8003d08:	f000 fdd0 	bl	80048ac <aci_att_read_by_group_type_resp_event>

  return status;
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 8003d16:	b590      	push	{r4, r7, lr}
 8003d18:	b087      	sub	sp, #28
 8003d1a:	af02      	add	r7, sp, #8
 8003d1c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	b298      	uxth	r0, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	885b      	ldrh	r3, [r3, #2]
 8003d30:	b299      	uxth	r1, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	889b      	ldrh	r3, [r3, #4]
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	4623      	mov	r3, r4
 8003d44:	f000 fdc2 	bl	80048cc <aci_att_prepare_write_resp_event>

  return status;
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd90      	pop	{r4, r7, pc}

08003d52 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fdc3 	bl	80048f4 <aci_att_exec_write_resp_event>

  return status;
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003d80:	2300      	movs	r3, #0
 8003d82:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	b298      	uxth	r0, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	885b      	ldrh	r3, [r3, #2]
 8003d92:	b299      	uxth	r1, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8003d9c:	f000 fdb5 	bl	800490a <aci_gatt_indication_event>

  return status;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003db2:	2300      	movs	r3, #0
 8003db4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b298      	uxth	r0, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	885b      	ldrh	r3, [r3, #2]
 8003dc4:	b299      	uxth	r1, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 8003dce:	f7fd f9b3 	bl	8001138 <aci_gatt_notification_event>

  return status;
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003de4:	2300      	movs	r3, #0
 8003de6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	789b      	ldrb	r3, [r3, #2]
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f000 fd96 	bl	800492a <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003e10:	2300      	movs	r3, #0
 8003e12:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b298      	uxth	r0, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	7899      	ldrb	r1, [r3, #2]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	795b      	ldrb	r3, [r3, #5]
 8003e2e:	f000 fd8a 	bl	8004946 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003e44:	2300      	movs	r3, #0
 8003e46:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b298      	uxth	r0, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	885b      	ldrh	r3, [r3, #2]
 8003e56:	b299      	uxth	r1, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8003e60:	f000 fd85 	bl	800496e <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003e76:	2300      	movs	r3, #0
 8003e78:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b298      	uxth	r0, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	885b      	ldrh	r3, [r3, #2]
 8003e88:	b299      	uxth	r1, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8003e92:	f000 fd7c 	bl	800498e <aci_gatt_write_permit_req_event>

  return status;
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b298      	uxth	r0, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	885b      	ldrh	r3, [r3, #2]
 8003eba:	b299      	uxth	r1, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	889b      	ldrh	r3, [r3, #4]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f000 fd73 	bl	80049ae <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b0a6      	sub	sp, #152	; 0x98
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8003eec:	2300      	movs	r3, #0
 8003eee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ef2:	e01a      	b.n	8003f2a <aci_gatt_read_multi_permit_req_event_process+0x58>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 8003ef4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003ef8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	4413      	add	r3, r2
 8003f00:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003f10:	440b      	add	r3, r1
 8003f12:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8003f16:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8003f20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f24:	3301      	adds	r3, #1
 8003f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f2e:	789b      	ldrb	r3, [r3, #2]
 8003f30:	461a      	mov	r2, r3
 8003f32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f36:	4293      	cmp	r3, r2
 8003f38:	dbdc      	blt.n	8003ef4 <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8003f3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	b298      	uxth	r0, r3
 8003f42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f46:	789b      	ldrb	r3, [r3, #2]
 8003f48:	f107 0208 	add.w	r2, r7, #8
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f000 fd3d 	bl	80049cc <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 8003f52:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3798      	adds	r7, #152	; 0x98
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003f66:	2300      	movs	r3, #0
 8003f68:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	885b      	ldrh	r3, [r3, #2]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	f000 fd33 	bl	80049e8 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003f94:	2300      	movs	r3, #0
 8003f96:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fd2e 	bl	8004a04 <aci_gatt_server_confirmation_event>

  return status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 8003fb2:	b590      	push	{r4, r7, lr}
 8003fb4:	b087      	sub	sp, #28
 8003fb6:	af02      	add	r7, sp, #8
 8003fb8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	b298      	uxth	r0, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	885b      	ldrh	r3, [r3, #2]
 8003fcc:	b299      	uxth	r1, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	889b      	ldrh	r3, [r3, #4]
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	4623      	mov	r3, r4
 8003fe0:	f000 fd1b 	bl	8004a1a <aci_gatt_prepare_write_permit_req_event>

  return status;
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd90      	pop	{r4, r7, pc}

08003fee <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8003fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff0:	b08b      	sub	sp, #44	; 0x2c
 8003ff2:	af06      	add	r7, sp, #24
 8003ff4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	781d      	ldrb	r5, [r3, #0]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004008:	b29e      	uxth	r6, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8004020:	b292      	uxth	r2, r2
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 8004028:	b289      	uxth	r1, r1
 800402a:	68b8      	ldr	r0, [r7, #8]
 800402c:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8004030:	b280      	uxth	r0, r0
 8004032:	68bc      	ldr	r4, [r7, #8]
 8004034:	7c64      	ldrb	r4, [r4, #17]
 8004036:	9404      	str	r4, [sp, #16]
 8004038:	9003      	str	r0, [sp, #12]
 800403a:	9102      	str	r1, [sp, #8]
 800403c:	9201      	str	r2, [sp, #4]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	4673      	mov	r3, lr
 8004042:	4662      	mov	r2, ip
 8004044:	4631      	mov	r1, r6
 8004046:	4628      	mov	r0, r5
 8004048:	f7fd f892 	bl	8001170 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004056 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b0a4      	sub	sp, #144	; 0x90
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800405e:	2300      	movs	r3, #0
 8004060:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8004070:	2300      	movs	r3, #0
 8004072:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004076:	e0b8      	b.n	80041ea <hci_le_advertising_report_event_process+0x194>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8004078:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800407c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	4413      	add	r3, r2
 800408a:	440b      	add	r3, r1
 800408c:	3301      	adds	r3, #1
 800408e:	7819      	ldrb	r1, [r3, #0]
 8004090:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80040a0:	4413      	add	r3, r2
 80040a2:	3b88      	subs	r3, #136	; 0x88
 80040a4:	460a      	mov	r2, r1
 80040a6:	701a      	strb	r2, [r3, #0]
    size += 1;
 80040a8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80040ac:	3301      	adds	r3, #1
 80040ae:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 80040b2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80040b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80040ba:	4613      	mov	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	440b      	add	r3, r1
 80040c6:	3302      	adds	r3, #2
 80040c8:	7819      	ldrb	r1, [r3, #0]
 80040ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80040da:	4413      	add	r3, r2
 80040dc:	3b87      	subs	r3, #135	; 0x87
 80040de:	460a      	mov	r2, r1
 80040e0:	701a      	strb	r2, [r3, #0]
    size += 1;
 80040e2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80040e6:	3301      	adds	r3, #1
 80040e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 80040ec:	f107 0108 	add.w	r1, r7, #8
 80040f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	1c98      	adds	r0, r3, #2
 8004100:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	4413      	add	r3, r2
 800410e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004112:	4413      	add	r3, r2
 8004114:	3303      	adds	r3, #3
 8004116:	2206      	movs	r2, #6
 8004118:	4619      	mov	r1, r3
 800411a:	f001 fd4d 	bl	8005bb8 <memcpy>
    size += 6;
 800411e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004122:	3306      	adds	r3, #6
 8004124:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8004128:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800412c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	4413      	add	r3, r2
 800413a:	440b      	add	r3, r1
 800413c:	3309      	adds	r3, #9
 800413e:	7819      	ldrb	r1, [r3, #0]
 8004140:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8004150:	4413      	add	r3, r2
 8004152:	3b80      	subs	r3, #128	; 0x80
 8004154:	460a      	mov	r2, r1
 8004156:	701a      	strb	r2, [r3, #0]
    size += 1;
 8004158:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800415c:	3301      	adds	r3, #1
 800415e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8004162:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004166:	4613      	mov	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	4413      	add	r3, r2
 8004170:	3308      	adds	r3, #8
 8004172:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004176:	4413      	add	r3, r2
 8004178:	1c99      	adds	r1, r3, #2
 800417a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800417e:	4613      	mov	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800418a:	4413      	add	r3, r2
 800418c:	3b7c      	subs	r3, #124	; 0x7c
 800418e:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 8004190:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8004194:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	4413      	add	r3, r2
 80041a2:	440b      	add	r3, r1
 80041a4:	3309      	adds	r3, #9
 80041a6:	781a      	ldrb	r2, [r3, #0]
 80041a8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80041ac:	4413      	add	r3, r2
 80041ae:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 80041b2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4413      	add	r3, r2
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	b259      	sxtb	r1, r3
 80041be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80041ce:	4413      	add	r3, r2
 80041d0:	3b78      	subs	r3, #120	; 0x78
 80041d2:	460a      	mov	r2, r1
 80041d4:	701a      	strb	r2, [r3, #0]
    size += 1;
 80041d6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80041da:	3301      	adds	r3, #1
 80041dc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 80041e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041e4:	3301      	adds	r3, #1
 80041e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041f6:	4293      	cmp	r3, r2
 80041f8:	f6ff af3e 	blt.w	8004078 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 80041fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	f107 0208 	add.w	r2, r7, #8
 8004206:	4611      	mov	r1, r2
 8004208:	4618      	mov	r0, r3
 800420a:	f000 f9e7 	bl	80045dc <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800420e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004212:	4618      	mov	r0, r3
 8004214:	3790      	adds	r7, #144	; 0x90
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800421a:	b590      	push	{r4, r7, lr}
 800421c:	b087      	sub	sp, #28
 800421e:	af02      	add	r7, sp, #8
 8004220:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004222:	2300      	movs	r3, #0
 8004224:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	7818      	ldrb	r0, [r3, #0]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004234:	b299      	uxth	r1, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800423c:	b29a      	uxth	r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004244:	b29c      	uxth	r4, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800424c:	b29b      	uxth	r3, r3
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	4623      	mov	r3, r4
 8004252:	f000 f9cf 	bl	80045f4 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8004256:	7bfb      	ldrb	r3, [r7, #15]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	bd90      	pop	{r4, r7, pc}

08004260 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004268:	2300      	movs	r3, #0
 800426a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	7818      	ldrb	r0, [r3, #0]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800427a:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8004280:	461a      	mov	r2, r3
 8004282:	f000 f9cb 	bl	800461c <hci_le_read_remote_used_features_complete_event>

  return status;
 8004286:	7bfb      	ldrb	r3, [r7, #15]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004298:	2300      	movs	r3, #0
 800429a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	895b      	ldrh	r3, [r3, #10]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	f000 f9c1 	bl	8004638 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 80042c0:	b590      	push	{r4, r7, lr}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	b298      	uxth	r0, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	885b      	ldrh	r3, [r3, #2]
 80042da:	b299      	uxth	r1, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	889b      	ldrh	r3, [r3, #4]
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	88db      	ldrh	r3, [r3, #6]
 80042e6:	b29c      	uxth	r4, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	891b      	ldrh	r3, [r3, #8]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	4623      	mov	r3, r4
 80042f2:	f000 f9af 	bl	8004654 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd90      	pop	{r4, r7, pc}

08004300 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004308:	2300      	movs	r3, #0
 800430a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f000 f9ae 	bl	800467c <hci_le_read_local_p256_public_key_complete_event>

  return status;
 8004320:	7bfb      	ldrb	r3, [r7, #15]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004332:	2300      	movs	r3, #0
 8004334:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8004342:	4619      	mov	r1, r3
 8004344:	4610      	mov	r0, r2
 8004346:	f000 f9a5 	bl	8004694 <hci_le_generate_dhkey_complete_event>

  return status;
 800434a:	7bfb      	ldrb	r3, [r7, #15]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8004354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004358:	b08d      	sub	sp, #52	; 0x34
 800435a:	af08      	add	r7, sp, #32
 800435c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800435e:	2300      	movs	r3, #0
 8004360:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f893 c000 	ldrb.w	ip, [r3]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004372:	fa1f fe83 	uxth.w	lr, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f893 8003 	ldrb.w	r8, [r3, #3]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800438a:	68b9      	ldr	r1, [r7, #8]
 800438c:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800438e:	68b8      	ldr	r0, [r7, #8]
 8004390:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 8004394:	b280      	uxth	r0, r0
 8004396:	68bc      	ldr	r4, [r7, #8]
 8004398:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800439c:	b2a4      	uxth	r4, r4
 800439e:	68bd      	ldr	r5, [r7, #8]
 80043a0:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 80043a4:	b2ad      	uxth	r5, r5
 80043a6:	68be      	ldr	r6, [r7, #8]
 80043a8:	7f76      	ldrb	r6, [r6, #29]
 80043aa:	9606      	str	r6, [sp, #24]
 80043ac:	9505      	str	r5, [sp, #20]
 80043ae:	9404      	str	r4, [sp, #16]
 80043b0:	9003      	str	r0, [sp, #12]
 80043b2:	9102      	str	r1, [sp, #8]
 80043b4:	9201      	str	r2, [sp, #4]
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	464b      	mov	r3, r9
 80043ba:	4642      	mov	r2, r8
 80043bc:	4671      	mov	r1, lr
 80043be:	4660      	mov	r0, ip
 80043c0:	f000 f974 	bl	80046ac <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080043d0 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b0a6      	sub	sp, #152	; 0x98
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80043d8:	2300      	movs	r3, #0
 80043da:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 80043ea:	2300      	movs	r3, #0
 80043ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043f0:	e089      	b.n	8004506 <hci_le_direct_advertising_report_event_process+0x136>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 80043f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80043f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	4413      	add	r3, r2
 80043fe:	3301      	adds	r3, #1
 8004400:	781a      	ldrb	r2, [r3, #0]
 8004402:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800440c:	440b      	add	r3, r1
 800440e:	3b90      	subs	r3, #144	; 0x90
 8004410:	701a      	strb	r2, [r3, #0]
    size += 1;
 8004412:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004416:	3301      	adds	r3, #1
 8004418:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800441c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004420:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	4413      	add	r3, r2
 8004428:	3302      	adds	r3, #2
 800442a:	781a      	ldrb	r2, [r3, #0]
 800442c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8004436:	440b      	add	r3, r1
 8004438:	3b8f      	subs	r3, #143	; 0x8f
 800443a:	701a      	strb	r2, [r3, #0]
    size += 1;
 800443c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004440:	3301      	adds	r3, #1
 8004442:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8004446:	f107 0208 	add.w	r2, r7, #8
 800444a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	4413      	add	r3, r2
 8004452:	1c98      	adds	r0, r3, #2
 8004454:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800445e:	4413      	add	r3, r2
 8004460:	3303      	adds	r3, #3
 8004462:	2206      	movs	r2, #6
 8004464:	4619      	mov	r1, r3
 8004466:	f001 fba7 	bl	8005bb8 <memcpy>
    size += 6;
 800446a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800446e:	3306      	adds	r3, #6
 8004470:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8004474:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004478:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	4413      	add	r3, r2
 8004480:	3309      	adds	r3, #9
 8004482:	781a      	ldrb	r2, [r3, #0]
 8004484:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800448e:	440b      	add	r3, r1
 8004490:	3b88      	subs	r3, #136	; 0x88
 8004492:	701a      	strb	r2, [r3, #0]
    size += 1;
 8004494:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004498:	3301      	adds	r3, #1
 800449a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800449e:	f107 0208 	add.w	r2, r7, #8
 80044a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	3308      	adds	r3, #8
 80044aa:	4413      	add	r3, r2
 80044ac:	1c58      	adds	r0, r3, #1
 80044ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	3308      	adds	r3, #8
 80044b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80044ba:	4413      	add	r3, r2
 80044bc:	3302      	adds	r3, #2
 80044be:	2206      	movs	r2, #6
 80044c0:	4619      	mov	r1, r3
 80044c2:	f001 fb79 	bl	8005bb8 <memcpy>
    size += 6;
 80044c6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80044ca:	3306      	adds	r3, #6
 80044cc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 80044d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80044d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	4413      	add	r3, r2
 80044dc:	3310      	adds	r3, #16
 80044de:	f993 2000 	ldrsb.w	r2, [r3]
 80044e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80044ec:	440b      	add	r3, r1
 80044ee:	3b81      	subs	r3, #129	; 0x81
 80044f0:	701a      	strb	r2, [r3, #0]
    size += 1;
 80044f2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80044f6:	3301      	adds	r3, #1
 80044f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 80044fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004500:	3301      	adds	r3, #1
 8004502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004506:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004512:	4293      	cmp	r3, r2
 8004514:	f6ff af6d 	blt.w	80043f2 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 8004518:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	f107 0208 	add.w	r2, r7, #8
 8004522:	4611      	mov	r1, r2
 8004524:	4618      	mov	r0, r3
 8004526:	f000 f8d5 	bl	80046d4 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800452a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800452e:	4618      	mov	r0, r3
 8004530:	3798      	adds	r7, #152	; 0x98
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	4603      	mov	r3, r0
 800453e:	71fb      	strb	r3, [r7, #7]
 8004540:	460b      	mov	r3, r1
 8004542:	80bb      	strh	r3, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 8004554:	b490      	push	{r4, r7}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	4604      	mov	r4, r0
 800455c:	4608      	mov	r0, r1
 800455e:	4611      	mov	r1, r2
 8004560:	461a      	mov	r2, r3
 8004562:	4623      	mov	r3, r4
 8004564:	71fb      	strb	r3, [r7, #7]
 8004566:	4603      	mov	r3, r0
 8004568:	80bb      	strh	r3, [r7, #4]
 800456a:	460b      	mov	r3, r1
 800456c:	71bb      	strb	r3, [r7, #6]
 800456e:	4613      	mov	r3, r2
 8004570:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bc90      	pop	{r4, r7}
 800457a:	4770      	bx	lr

0800457c <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	4603      	mov	r3, r0
 800459a:	6039      	str	r1, [r7, #0]
 800459c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	4603      	mov	r3, r0
 80045b2:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	460a      	mov	r2, r1
 80045ca:	71fb      	strb	r3, [r7, #7]
 80045cc:	4613      	mov	r3, r2
 80045ce:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	6039      	str	r1, [r7, #0]
 80045e6:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 80045f4:	b490      	push	{r4, r7}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4604      	mov	r4, r0
 80045fc:	4608      	mov	r0, r1
 80045fe:	4611      	mov	r1, r2
 8004600:	461a      	mov	r2, r3
 8004602:	4623      	mov	r3, r4
 8004604:	71fb      	strb	r3, [r7, #7]
 8004606:	4603      	mov	r3, r0
 8004608:	80bb      	strh	r3, [r7, #4]
 800460a:	460b      	mov	r3, r1
 800460c:	807b      	strh	r3, [r7, #2]
 800460e:	4613      	mov	r3, r2
 8004610:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bc90      	pop	{r4, r7}
 800461a:	4770      	bx	lr

0800461c <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	603a      	str	r2, [r7, #0]
 8004626:	71fb      	strb	r3, [r7, #7]
 8004628:	460b      	mov	r3, r1
 800462a:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	6039      	str	r1, [r7, #0]
 8004642:	80fb      	strh	r3, [r7, #6]
 8004644:	4613      	mov	r3, r2
 8004646:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8004654:	b490      	push	{r4, r7}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	4604      	mov	r4, r0
 800465c:	4608      	mov	r0, r1
 800465e:	4611      	mov	r1, r2
 8004660:	461a      	mov	r2, r3
 8004662:	4623      	mov	r3, r4
 8004664:	80fb      	strh	r3, [r7, #6]
 8004666:	4603      	mov	r3, r0
 8004668:	80bb      	strh	r3, [r7, #4]
 800466a:	460b      	mov	r3, r1
 800466c:	807b      	strh	r3, [r7, #2]
 800466e:	4613      	mov	r3, r2
 8004670:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bc90      	pop	{r4, r7}
 800467a:	4770      	bx	lr

0800467c <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	6039      	str	r1, [r7, #0]
 8004686:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	6039      	str	r1, [r7, #0]
 800469e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 80046ac:	b490      	push	{r4, r7}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4604      	mov	r4, r0
 80046b4:	4608      	mov	r0, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	461a      	mov	r2, r3
 80046ba:	4623      	mov	r3, r4
 80046bc:	71fb      	strb	r3, [r7, #7]
 80046be:	4603      	mov	r3, r0
 80046c0:	80bb      	strh	r3, [r7, #4]
 80046c2:	460b      	mov	r3, r1
 80046c4:	71bb      	strb	r3, [r7, #6]
 80046c6:	4613      	mov	r3, r2
 80046c8:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc90      	pop	{r4, r7}
 80046d2:	4770      	bx	lr

080046d4 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	6039      	str	r1, [r7, #0]
 80046de:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 80046f0:	bf00      	nop
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4603      	mov	r3, r0
 8004702:	80fb      	strh	r3, [r7, #6]
 8004704:	460b      	mov	r3, r1
 8004706:	717b      	strb	r3, [r7, #5]
 8004708:	4613      	mov	r3, r2
 800470a:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	4603      	mov	r3, r0
 8004736:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 8004748:	bf00      	nop
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8004752:	b480      	push	{r7}
 8004754:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8004756:	bf00      	nop
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	4603      	mov	r3, r0
 800476a:	71fb      	strb	r3, [r7, #7]
 800476c:	460b      	mov	r3, r1
 800476e:	71bb      	strb	r3, [r7, #6]
 8004770:	4613      	mov	r3, r2
 8004772:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	4603      	mov	r3, r0
 800479e:	6039      	str	r1, [r7, #0]
 80047a0:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	4603      	mov	r3, r0
 80047b6:	460a      	mov	r2, r1
 80047b8:	80fb      	strh	r3, [r7, #6]
 80047ba:	4613      	mov	r3, r2
 80047bc:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	4603      	mov	r3, r0
 80047d2:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	460a      	mov	r2, r1
 80047ea:	80fb      	strh	r3, [r7, #6]
 80047ec:	4613      	mov	r3, r2
 80047ee:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	4603      	mov	r3, r0
 8004806:	80fb      	strh	r3, [r7, #6]
 8004808:	460b      	mov	r3, r1
 800480a:	717b      	strb	r3, [r7, #5]
 800480c:	4613      	mov	r3, r2
 800480e:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	603a      	str	r2, [r7, #0]
 8004826:	80fb      	strh	r3, [r7, #6]
 8004828:	460b      	mov	r3, r1
 800482a:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	4603      	mov	r3, r0
 8004842:	80fb      	strh	r3, [r7, #6]
 8004844:	460b      	mov	r3, r1
 8004846:	717b      	strb	r3, [r7, #5]
 8004848:	4613      	mov	r3, r2
 800484a:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	603a      	str	r2, [r7, #0]
 8004862:	80fb      	strh	r3, [r7, #6]
 8004864:	460b      	mov	r3, r1
 8004866:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	603a      	str	r2, [r7, #0]
 800487e:	80fb      	strh	r3, [r7, #6]
 8004880:	460b      	mov	r3, r1
 8004882:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	603a      	str	r2, [r7, #0]
 800489a:	80fb      	strh	r3, [r7, #6]
 800489c:	460b      	mov	r3, r1
 800489e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	4603      	mov	r3, r0
 80048b6:	80fb      	strh	r3, [r7, #6]
 80048b8:	460b      	mov	r3, r1
 80048ba:	717b      	strb	r3, [r7, #5]
 80048bc:	4613      	mov	r3, r2
 80048be:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 80048cc:	b490      	push	{r4, r7}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4604      	mov	r4, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	4611      	mov	r1, r2
 80048d8:	461a      	mov	r2, r3
 80048da:	4623      	mov	r3, r4
 80048dc:	80fb      	strh	r3, [r7, #6]
 80048de:	4603      	mov	r3, r0
 80048e0:	80bb      	strh	r3, [r7, #4]
 80048e2:	460b      	mov	r3, r1
 80048e4:	807b      	strh	r3, [r7, #2]
 80048e6:	4613      	mov	r3, r2
 80048e8:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc90      	pop	{r4, r7}
 80048f2:	4770      	bx	lr

080048f4 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	607b      	str	r3, [r7, #4]
 8004912:	4603      	mov	r3, r0
 8004914:	81fb      	strh	r3, [r7, #14]
 8004916:	460b      	mov	r3, r1
 8004918:	81bb      	strh	r3, [r7, #12]
 800491a:	4613      	mov	r3, r2
 800491c:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	4603      	mov	r3, r0
 8004932:	460a      	mov	r2, r1
 8004934:	80fb      	strh	r3, [r7, #6]
 8004936:	4613      	mov	r3, r2
 8004938:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 8004946:	b490      	push	{r4, r7}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	4604      	mov	r4, r0
 800494e:	4608      	mov	r0, r1
 8004950:	4611      	mov	r1, r2
 8004952:	461a      	mov	r2, r3
 8004954:	4623      	mov	r3, r4
 8004956:	80fb      	strh	r3, [r7, #6]
 8004958:	4603      	mov	r3, r0
 800495a:	717b      	strb	r3, [r7, #5]
 800495c:	460b      	mov	r3, r1
 800495e:	807b      	strh	r3, [r7, #2]
 8004960:	4613      	mov	r3, r2
 8004962:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 8004964:	bf00      	nop
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bc90      	pop	{r4, r7}
 800496c:	4770      	bx	lr

0800496e <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 800496e:	b480      	push	{r7}
 8004970:	b085      	sub	sp, #20
 8004972:	af00      	add	r7, sp, #0
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	4603      	mov	r3, r0
 8004978:	81fb      	strh	r3, [r7, #14]
 800497a:	460b      	mov	r3, r1
 800497c:	81bb      	strh	r3, [r7, #12]
 800497e:	4613      	mov	r3, r2
 8004980:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 8004982:	bf00      	nop
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	607b      	str	r3, [r7, #4]
 8004996:	4603      	mov	r3, r0
 8004998:	81fb      	strh	r3, [r7, #14]
 800499a:	460b      	mov	r3, r1
 800499c:	81bb      	strh	r3, [r7, #12]
 800499e:	4613      	mov	r3, r2
 80049a0:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	4603      	mov	r3, r0
 80049b6:	80fb      	strh	r3, [r7, #6]
 80049b8:	460b      	mov	r3, r1
 80049ba:	80bb      	strh	r3, [r7, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	603a      	str	r2, [r7, #0]
 80049d6:	80fb      	strh	r3, [r7, #6]
 80049d8:	460b      	mov	r3, r1
 80049da:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	460a      	mov	r2, r1
 80049f2:	80fb      	strh	r3, [r7, #6]
 80049f4:	4613      	mov	r3, r2
 80049f6:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 8004a1a:	b490      	push	{r4, r7}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	4604      	mov	r4, r0
 8004a22:	4608      	mov	r0, r1
 8004a24:	4611      	mov	r1, r2
 8004a26:	461a      	mov	r2, r3
 8004a28:	4623      	mov	r3, r4
 8004a2a:	80fb      	strh	r3, [r7, #6]
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	80bb      	strh	r3, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
 8004a34:	4613      	mov	r3, r2
 8004a36:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc90      	pop	{r4, r7}
 8004a40:	4770      	bx	lr

08004a42 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	4603      	mov	r3, r0
 8004a4a:	460a      	mov	r2, r1
 8004a4c:	80fb      	strh	r3, [r7, #6]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	4603      	mov	r3, r0
 8004a66:	603a      	str	r2, [r7, #0]
 8004a68:	80fb      	strh	r3, [r7, #6]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 8004a7a:	b490      	push	{r4, r7}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	4604      	mov	r4, r0
 8004a82:	4608      	mov	r0, r1
 8004a84:	4611      	mov	r1, r2
 8004a86:	461a      	mov	r2, r3
 8004a88:	4623      	mov	r3, r4
 8004a8a:	80fb      	strh	r3, [r7, #6]
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	717b      	strb	r3, [r7, #5]
 8004a90:	460b      	mov	r3, r1
 8004a92:	807b      	strh	r3, [r7, #2]
 8004a94:	4613      	mov	r3, r2
 8004a96:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 8004a98:	bf00      	nop
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc90      	pop	{r4, r7}
 8004aa0:	4770      	bx	lr

08004aa2 <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 8004aa2:	b490      	push	{r4, r7}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	4608      	mov	r0, r1
 8004aac:	4611      	mov	r1, r2
 8004aae:	461a      	mov	r2, r3
 8004ab0:	4623      	mov	r3, r4
 8004ab2:	80fb      	strh	r3, [r7, #6]
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	717b      	strb	r3, [r7, #5]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	807b      	strh	r3, [r7, #2]
 8004abc:	4613      	mov	r3, r2
 8004abe:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8004ac0:	bf00      	nop
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc90      	pop	{r4, r7}
 8004ac8:	4770      	bx	lr

08004aca <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	4603      	mov	r3, r0
 8004b02:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	603a      	str	r2, [r7, #0]
 8004b1a:	71fb      	strb	r3, [r7, #7]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	603a      	str	r2, [r7, #0]
 8004b36:	71fb      	strb	r3, [r7, #7]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	603a      	str	r2, [r7, #0]
 8004b52:	71fb      	strb	r3, [r7, #7]
 8004b54:	460b      	mov	r3, r1
 8004b56:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004b6e:	f107 0308 	add.w	r3, r7, #8
 8004b72:	2218      	movs	r2, #24
 8004b74:	2100      	movs	r1, #0
 8004b76:	4618      	mov	r0, r3
 8004b78:	f001 f82c 	bl	8005bd4 <memset>
  rq.ogf = 0x03;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8004b80:	2303      	movs	r3, #3
 8004b82:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004b84:	1dfb      	adds	r3, r7, #7
 8004b86:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004b8c:	f107 0308 	add.w	r3, r7, #8
 8004b90:	2100      	movs	r1, #0
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fd3c 	bl	8005610 <hci_send_req>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	da01      	bge.n	8004ba2 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004b9e:	23ff      	movs	r3, #255	; 0xff
 8004ba0:	e005      	b.n	8004bae <hci_reset+0x4a>
  if (status) {
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <hci_reset+0x48>
    return status;
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	e000      	b.n	8004bae <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8004bb6:	b5b0      	push	{r4, r5, r7, lr}
 8004bb8:	b0ce      	sub	sp, #312	; 0x138
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	1dfb      	adds	r3, r7, #7
 8004bc6:	462a      	mov	r2, r5
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	1d3b      	adds	r3, r7, #4
 8004bcc:	4622      	mov	r2, r4
 8004bce:	801a      	strh	r2, [r3, #0]
 8004bd0:	1cbb      	adds	r3, r7, #2
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	801a      	strh	r2, [r3, #0]
 8004bd6:	1dbb      	adds	r3, r7, #6
 8004bd8:	460a      	mov	r2, r1
 8004bda:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8004bdc:	f107 030c 	add.w	r3, r7, #12
 8004be0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004be4:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004be8:	3308      	adds	r3, #8
 8004bea:	f107 020c 	add.w	r2, r7, #12
 8004bee:	4413      	add	r3, r2
 8004bf0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004bf4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004bf8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3309      	adds	r3, #9
 8004c00:	f107 020c 	add.w	r2, r7, #12
 8004c04:	4413      	add	r3, r2
 8004c06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004c0a:	f107 030b 	add.w	r3, r7, #11
 8004c0e:	2200      	movs	r2, #0
 8004c10:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8004c18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c1c:	1dfa      	adds	r2, r7, #7
 8004c1e:	7812      	ldrb	r2, [r2, #0]
 8004c20:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004c22:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004c26:	3301      	adds	r3, #1
 8004c28:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8004c2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c30:	1d3a      	adds	r2, r7, #4
 8004c32:	8812      	ldrh	r2, [r2, #0]
 8004c34:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8004c38:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8004c42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c46:	1cba      	adds	r2, r7, #2
 8004c48:	8812      	ldrh	r2, [r2, #0]
 8004c4a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8004c4e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004c52:	3302      	adds	r3, #2
 8004c54:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8004c58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c5c:	1dba      	adds	r2, r7, #6
 8004c5e:	7812      	ldrb	r2, [r2, #0]
 8004c60:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004c62:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004c66:	3301      	adds	r3, #1
 8004c68:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8004c6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c70:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8004c74:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004c76:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8004c80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c84:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004c88:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8004c8a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004c8e:	3301      	adds	r3, #1
 8004c90:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8004c94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c98:	3308      	adds	r3, #8
 8004c9a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004c9e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 ff88 	bl	8005bb8 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8004ca8:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8004cac:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8004cb6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cba:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004cbe:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004cc0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8004cca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004cd4:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 ff6d 	bl	8005bb8 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 8004cde:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8004ce2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8004cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cf0:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8004cf4:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004cf6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8004d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d04:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8004d08:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8004d0a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004d0e:	3302      	adds	r3, #2
 8004d10:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004d14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d18:	2218      	movs	r2, #24
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 ff59 	bl	8005bd4 <memset>
  rq.ogf = 0x3f;
 8004d22:	233f      	movs	r3, #63	; 0x3f
 8004d24:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8004d28:	2383      	movs	r3, #131	; 0x83
 8004d2a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004d2e:	f107 030c 	add.w	r3, r7, #12
 8004d32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004d36:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004d3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004d3e:	f107 030b 	add.w	r3, r7, #11
 8004d42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004d46:	2301      	movs	r3, #1
 8004d48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8004d4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d50:	2100      	movs	r1, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fc5c 	bl	8005610 <hci_send_req>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	da01      	bge.n	8004d62 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8004d5e:	23ff      	movs	r3, #255	; 0xff
 8004d60:	e009      	b.n	8004d76 <aci_gap_set_discoverable+0x1c0>
  if (status) {
 8004d62:	f107 030b 	add.w	r3, r7, #11
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <aci_gap_set_discoverable+0x1be>
    return status;
 8004d6c:	f107 030b 	add.w	r3, r7, #11
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	e000      	b.n	8004d76 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bdb0      	pop	{r4, r5, r7, pc}

08004d80 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8004d80:	b590      	push	{r4, r7, lr}
 8004d82:	b0cf      	sub	sp, #316	; 0x13c
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4604      	mov	r4, r0
 8004d88:	4608      	mov	r0, r1
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	463a      	mov	r2, r7
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	1dfb      	adds	r3, r7, #7
 8004d92:	4622      	mov	r2, r4
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	1dbb      	adds	r3, r7, #6
 8004d98:	4602      	mov	r2, r0
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	1d7b      	adds	r3, r7, #5
 8004d9e:	460a      	mov	r2, r1
 8004da0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004da2:	f107 0314 	add.w	r3, r7, #20
 8004da6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004daa:	f107 030c 	add.w	r3, r7, #12
 8004dae:	2207      	movs	r2, #7
 8004db0:	2100      	movs	r1, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 ff0e 	bl	8005bd4 <memset>
  uint8_t index_input = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 8004dbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004dc2:	1dfa      	adds	r2, r7, #7
 8004dc4:	7812      	ldrb	r2, [r2, #0]
 8004dc6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004dc8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004dcc:	3301      	adds	r3, #1
 8004dce:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8004dd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004dd6:	1dba      	adds	r2, r7, #6
 8004dd8:	7812      	ldrb	r2, [r2, #0]
 8004dda:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004ddc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004de0:	3301      	adds	r3, #1
 8004de2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8004de6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004dea:	1d7a      	adds	r2, r7, #5
 8004dec:	7812      	ldrb	r2, [r2, #0]
 8004dee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004df0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004df4:	3301      	adds	r3, #1
 8004df6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004dfa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004dfe:	2218      	movs	r2, #24
 8004e00:	2100      	movs	r1, #0
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fee6 	bl	8005bd4 <memset>
  rq.ogf = 0x3f;
 8004e08:	233f      	movs	r3, #63	; 0x3f
 8004e0a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 8004e0e:	238a      	movs	r3, #138	; 0x8a
 8004e10:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8004e14:	f107 0314 	add.w	r3, r7, #20
 8004e18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8004e1c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004e20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8004e24:	f107 030c 	add.w	r3, r7, #12
 8004e28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8004e2c:	2307      	movs	r3, #7
 8004e2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8004e32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004e36:	2100      	movs	r1, #0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 fbe9 	bl	8005610 <hci_send_req>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	da01      	bge.n	8004e48 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8004e44:	23ff      	movs	r3, #255	; 0xff
 8004e46:	e021      	b.n	8004e8c <aci_gap_init+0x10c>
  if (resp.Status) {
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <aci_gap_init+0xda>
    return resp.Status;
 8004e52:	f107 030c 	add.w	r3, r7, #12
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	e018      	b.n	8004e8c <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8004e5a:	f107 030c 	add.w	r3, r7, #12
 8004e5e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	463b      	mov	r3, r7
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8004e6a:	f107 030c 	add.w	r3, r7, #12
 8004e6e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004e78:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8004e7a:	f107 030c 	add.w	r3, r7, #12
 8004e7e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e88:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd90      	pop	{r4, r7, pc}

08004e96 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b088      	sub	sp, #32
 8004e9a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004ea0:	f107 0308 	add.w	r3, r7, #8
 8004ea4:	2218      	movs	r2, #24
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fe93 	bl	8005bd4 <memset>
  rq.ogf = 0x3f;
 8004eae:	233f      	movs	r3, #63	; 0x3f
 8004eb0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004eb2:	f240 1301 	movw	r3, #257	; 0x101
 8004eb6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004eb8:	1dfb      	adds	r3, r7, #7
 8004eba:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004ec0:	f107 0308 	add.w	r3, r7, #8
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fba2 	bl	8005610 <hci_send_req>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	da01      	bge.n	8004ed6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004ed2:	23ff      	movs	r3, #255	; 0xff
 8004ed4:	e005      	b.n	8004ee2 <aci_gatt_init+0x4c>
  if (status) {
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <aci_gatt_init+0x4a>
    return status;
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	e000      	b.n	8004ee2 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3720      	adds	r7, #32
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8004eea:	b590      	push	{r4, r7, lr}
 8004eec:	b0cf      	sub	sp, #316	; 0x13c
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	6001      	str	r1, [r0, #0]
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	4619      	mov	r1, r3
 8004efa:	1dfb      	adds	r3, r7, #7
 8004efc:	4622      	mov	r2, r4
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	1dbb      	adds	r3, r7, #6
 8004f02:	4602      	mov	r2, r0
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	1d7b      	adds	r3, r7, #5
 8004f08:	460a      	mov	r2, r1
 8004f0a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8004f0c:	f107 030c 	add.w	r3, r7, #12
 8004f10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004f14:	1dfb      	adds	r3, r7, #7
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d007      	beq.n	8004f2c <aci_gatt_add_service+0x42>
 8004f1c:	1dfb      	adds	r3, r7, #7
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d101      	bne.n	8004f28 <aci_gatt_add_service+0x3e>
 8004f24:	2311      	movs	r3, #17
 8004f26:	e002      	b.n	8004f2e <aci_gatt_add_service+0x44>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <aci_gatt_add_service+0x44>
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	f107 020c 	add.w	r2, r7, #12
 8004f32:	4413      	add	r3, r2
 8004f34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004f38:	f107 0308 	add.w	r3, r7, #8
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fe47 	bl	8005bd4 <memset>
  uint8_t index_input = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8004f4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f50:	1dfa      	adds	r2, r7, #7
 8004f52:	7812      	ldrb	r2, [r2, #0]
 8004f54:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004f56:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8004f60:	1dfb      	adds	r3, r7, #7
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d002      	beq.n	8004f6e <aci_gatt_add_service+0x84>
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d004      	beq.n	8004f76 <aci_gatt_add_service+0x8c>
 8004f6c:	e007      	b.n	8004f7e <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004f74:	e005      	b.n	8004f82 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8004f76:	2310      	movs	r3, #16
 8004f78:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004f7c:	e001      	b.n	8004f82 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8004f7e:	2347      	movs	r3, #71	; 0x47
 8004f80:	e05d      	b.n	800503e <aci_gatt_add_service+0x154>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8004f82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f86:	1c58      	adds	r0, r3, #1
 8004f88:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8004f8c:	463b      	mov	r3, r7
 8004f8e:	6819      	ldr	r1, [r3, #0]
 8004f90:	f000 fe12 	bl	8005bb8 <memcpy>
    index_input += size;
 8004f94:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8004f98:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8004fa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa6:	1dba      	adds	r2, r7, #6
 8004fa8:	7812      	ldrb	r2, [r2, #0]
 8004faa:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004fac:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8004fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fba:	1d7a      	adds	r2, r7, #5
 8004fbc:	7812      	ldrb	r2, [r2, #0]
 8004fbe:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8004fc0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004fca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fce:	2218      	movs	r2, #24
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fdfe 	bl	8005bd4 <memset>
  rq.ogf = 0x3f;
 8004fd8:	233f      	movs	r3, #63	; 0x3f
 8004fda:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8004fde:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004fe2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004fe6:	f107 030c 	add.w	r3, r7, #12
 8004fea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004fee:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004ff2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004ff6:	f107 0308 	add.w	r3, r7, #8
 8004ffa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8004ffe:	2303      	movs	r3, #3
 8005000:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005004:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005008:	2100      	movs	r1, #0
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fb00 	bl	8005610 <hci_send_req>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	da01      	bge.n	800501a <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8005016:	23ff      	movs	r3, #255	; 0xff
 8005018:	e011      	b.n	800503e <aci_gatt_add_service+0x154>
  if (resp.Status) {
 800501a:	f107 0308 	add.w	r3, r7, #8
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <aci_gatt_add_service+0x142>
    return resp.Status;
 8005024:	f107 0308 	add.w	r3, r7, #8
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	e008      	b.n	800503e <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800502c:	f107 0308 	add.w	r3, r7, #8
 8005030:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005034:	b29a      	uxth	r2, r3
 8005036:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800503a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005044:	46bd      	mov	sp, r7
 8005046:	bd90      	pop	{r4, r7, pc}

08005048 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8005048:	b590      	push	{r4, r7, lr}
 800504a:	b0d1      	sub	sp, #324	; 0x144
 800504c:	af00      	add	r7, sp, #0
 800504e:	4604      	mov	r4, r0
 8005050:	4608      	mov	r0, r1
 8005052:	f107 0108 	add.w	r1, r7, #8
 8005056:	600a      	str	r2, [r1, #0]
 8005058:	4619      	mov	r1, r3
 800505a:	f107 030e 	add.w	r3, r7, #14
 800505e:	4622      	mov	r2, r4
 8005060:	801a      	strh	r2, [r3, #0]
 8005062:	f107 030d 	add.w	r3, r7, #13
 8005066:	4602      	mov	r2, r0
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	1dbb      	adds	r3, r7, #6
 800506c:	460a      	mov	r2, r1
 800506e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8005070:	f107 0314 	add.w	r3, r7, #20
 8005074:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005078:	f107 030d 	add.w	r3, r7, #13
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d008      	beq.n	8005094 <aci_gatt_add_char+0x4c>
 8005082:	f107 030d 	add.w	r3, r7, #13
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b02      	cmp	r3, #2
 800508a:	d101      	bne.n	8005090 <aci_gatt_add_char+0x48>
 800508c:	2313      	movs	r3, #19
 800508e:	e002      	b.n	8005096 <aci_gatt_add_char+0x4e>
 8005090:	2303      	movs	r3, #3
 8005092:	e000      	b.n	8005096 <aci_gatt_add_char+0x4e>
 8005094:	2305      	movs	r3, #5
 8005096:	f107 0214 	add.w	r2, r7, #20
 800509a:	4413      	add	r3, r2
 800509c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80050a0:	f107 0310 	add.w	r3, r7, #16
 80050a4:	2203      	movs	r2, #3
 80050a6:	2100      	movs	r1, #0
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 fd93 	bl	8005bd4 <memset>
  uint8_t index_input = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 80050b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80050b8:	f107 020e 	add.w	r2, r7, #14
 80050bc:	8812      	ldrh	r2, [r2, #0]
 80050be:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80050c0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80050c4:	3302      	adds	r3, #2
 80050c6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 80050ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80050ce:	f107 020d 	add.w	r2, r7, #13
 80050d2:	7812      	ldrb	r2, [r2, #0]
 80050d4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80050d6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80050da:	3301      	adds	r3, #1
 80050dc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 80050e0:	f107 030d 	add.w	r3, r7, #13
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d002      	beq.n	80050f0 <aci_gatt_add_char+0xa8>
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d004      	beq.n	80050f8 <aci_gatt_add_char+0xb0>
 80050ee:	e007      	b.n	8005100 <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 80050f0:	2302      	movs	r3, #2
 80050f2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80050f6:	e005      	b.n	8005104 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80050f8:	2310      	movs	r3, #16
 80050fa:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80050fe:	e001      	b.n	8005104 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8005100:	2347      	movs	r3, #71	; 0x47
 8005102:	e086      	b.n	8005212 <aci_gatt_add_char+0x1ca>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8005104:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005108:	1cd8      	adds	r0, r3, #3
 800510a:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800510e:	f107 0308 	add.w	r3, r7, #8
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	f000 fd50 	bl	8005bb8 <memcpy>
    index_input += size;
 8005118:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 800511c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005120:	4413      	add	r3, r2
 8005122:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8005126:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800512a:	1dba      	adds	r2, r7, #6
 800512c:	8812      	ldrh	r2, [r2, #0]
 800512e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005130:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005134:	3302      	adds	r3, #2
 8005136:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800513a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800513e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005142:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005144:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005148:	3301      	adds	r3, #1
 800514a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800514e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005152:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005156:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8005158:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800515c:	3301      	adds	r3, #1
 800515e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8005162:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005166:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800516a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800516c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005170:	3301      	adds	r3, #1
 8005172:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8005176:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800517a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800517e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8005180:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005184:	3301      	adds	r3, #1
 8005186:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800518a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800518e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8005192:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8005194:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005198:	3301      	adds	r3, #1
 800519a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800519e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80051a2:	2218      	movs	r2, #24
 80051a4:	2100      	movs	r1, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fd14 	bl	8005bd4 <memset>
  rq.ogf = 0x3f;
 80051ac:	233f      	movs	r3, #63	; 0x3f
 80051ae:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80051b2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80051b6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80051ba:	f107 0314 	add.w	r3, r7, #20
 80051be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80051c2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80051c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80051ca:	f107 0310 	add.w	r3, r7, #16
 80051ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80051d2:	2303      	movs	r3, #3
 80051d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80051d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80051dc:	2100      	movs	r1, #0
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fa16 	bl	8005610 <hci_send_req>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	da01      	bge.n	80051ee <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 80051ea:	23ff      	movs	r3, #255	; 0xff
 80051ec:	e011      	b.n	8005212 <aci_gatt_add_char+0x1ca>
  if (resp.Status) {
 80051ee:	f107 0310 	add.w	r3, r7, #16
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 80051f8:	f107 0310 	add.w	r3, r7, #16
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	e008      	b.n	8005212 <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8005200:	f107 0310 	add.w	r3, r7, #16
 8005204:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005208:	b29a      	uxth	r2, r3
 800520a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800520e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8005218:	46bd      	mov	sp, r7
 800521a:	bd90      	pop	{r4, r7, pc}

0800521c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800521c:	b5b0      	push	{r4, r5, r7, lr}
 800521e:	b0cc      	sub	sp, #304	; 0x130
 8005220:	af00      	add	r7, sp, #0
 8005222:	4605      	mov	r5, r0
 8005224:	460c      	mov	r4, r1
 8005226:	4610      	mov	r0, r2
 8005228:	4619      	mov	r1, r3
 800522a:	1dbb      	adds	r3, r7, #6
 800522c:	462a      	mov	r2, r5
 800522e:	801a      	strh	r2, [r3, #0]
 8005230:	1d3b      	adds	r3, r7, #4
 8005232:	4622      	mov	r2, r4
 8005234:	801a      	strh	r2, [r3, #0]
 8005236:	1cfb      	adds	r3, r7, #3
 8005238:	4602      	mov	r2, r0
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	1cbb      	adds	r3, r7, #2
 800523e:	460a      	mov	r2, r1
 8005240:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8005242:	f107 030c 	add.w	r3, r7, #12
 8005246:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800524a:	f107 030b 	add.w	r3, r7, #11
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8005252:	2300      	movs	r3, #0
 8005254:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 8005258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800525c:	1dba      	adds	r2, r7, #6
 800525e:	8812      	ldrh	r2, [r2, #0]
 8005260:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005262:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005266:	3302      	adds	r3, #2
 8005268:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 800526c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005270:	1d3a      	adds	r2, r7, #4
 8005272:	8812      	ldrh	r2, [r2, #0]
 8005274:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005276:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800527a:	3302      	adds	r3, #2
 800527c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 8005280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005284:	1cfa      	adds	r2, r7, #3
 8005286:	7812      	ldrb	r2, [r2, #0]
 8005288:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800528a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800528e:	3301      	adds	r3, #1
 8005290:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8005294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005298:	1cba      	adds	r2, r7, #2
 800529a:	7812      	ldrb	r2, [r2, #0]
 800529c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800529e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80052a2:	3301      	adds	r3, #1
 80052a4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 80052a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ac:	1d98      	adds	r0, r3, #6
 80052ae:	1cbb      	adds	r3, r7, #2
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80052b8:	f000 fc7e 	bl	8005bb8 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 80052bc:	1cbb      	adds	r3, r7, #2
 80052be:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	4413      	add	r3, r2
 80052c6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80052ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052ce:	2218      	movs	r2, #24
 80052d0:	2100      	movs	r1, #0
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fc7e 	bl	8005bd4 <memset>
  rq.ogf = 0x3f;
 80052d8:	233f      	movs	r3, #63	; 0x3f
 80052da:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80052de:	f44f 7383 	mov.w	r3, #262	; 0x106
 80052e2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80052e6:	f107 030c 	add.w	r3, r7, #12
 80052ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80052ee:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80052f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80052f6:	f107 030b 	add.w	r3, r7, #11
 80052fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80052fe:	2301      	movs	r3, #1
 8005300:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005304:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005308:	2100      	movs	r1, #0
 800530a:	4618      	mov	r0, r3
 800530c:	f000 f980 	bl	8005610 <hci_send_req>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	da01      	bge.n	800531a <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8005316:	23ff      	movs	r3, #255	; 0xff
 8005318:	e009      	b.n	800532e <aci_gatt_update_char_value+0x112>
  if (status) {
 800531a:	f107 030b 	add.w	r3, r7, #11
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <aci_gatt_update_char_value+0x110>
    return status;
 8005324:	f107 030b 	add.w	r3, r7, #11
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	e000      	b.n	800532e <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005334:	46bd      	mov	sp, r7
 8005336:	bdb0      	pop	{r4, r5, r7, pc}

08005338 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b0cc      	sub	sp, #304	; 0x130
 800533c:	af00      	add	r7, sp, #0
 800533e:	463b      	mov	r3, r7
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	1dfb      	adds	r3, r7, #7
 8005344:	4602      	mov	r2, r0
 8005346:	701a      	strb	r2, [r3, #0]
 8005348:	1dbb      	adds	r3, r7, #6
 800534a:	460a      	mov	r2, r1
 800534c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800534e:	f107 030c 	add.w	r3, r7, #12
 8005352:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005356:	f107 030b 	add.w	r3, r7, #11
 800535a:	2200      	movs	r2, #0
 800535c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 8005364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005368:	1dfa      	adds	r2, r7, #7
 800536a:	7812      	ldrb	r2, [r2, #0]
 800536c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800536e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005372:	3301      	adds	r3, #1
 8005374:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 8005378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800537c:	1dba      	adds	r2, r7, #6
 800537e:	7812      	ldrb	r2, [r2, #0]
 8005380:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005382:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005386:	3301      	adds	r3, #1
 8005388:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800538c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005390:	1c98      	adds	r0, r3, #2
 8005392:	1dbb      	adds	r3, r7, #6
 8005394:	781a      	ldrb	r2, [r3, #0]
 8005396:	463b      	mov	r3, r7
 8005398:	6819      	ldr	r1, [r3, #0]
 800539a:	f000 fc0d 	bl	8005bb8 <memcpy>
    index_input += Length*sizeof(uint8_t);
 800539e:	1dbb      	adds	r3, r7, #6
 80053a0:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	4413      	add	r3, r2
 80053a8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80053ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80053b0:	2218      	movs	r2, #24
 80053b2:	2100      	movs	r1, #0
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fc0d 	bl	8005bd4 <memset>
  rq.ogf = 0x3f;
 80053ba:	233f      	movs	r3, #63	; 0x3f
 80053bc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80053c0:	230c      	movs	r3, #12
 80053c2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80053c6:	f107 030c 	add.w	r3, r7, #12
 80053ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80053ce:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80053d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80053d6:	f107 030b 	add.w	r3, r7, #11
 80053da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80053de:	2301      	movs	r3, #1
 80053e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80053e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80053e8:	2100      	movs	r1, #0
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 f910 	bl	8005610 <hci_send_req>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	da01      	bge.n	80053fa <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 80053f6:	23ff      	movs	r3, #255	; 0xff
 80053f8:	e009      	b.n	800540e <aci_hal_write_config_data+0xd6>
  if (status) {
 80053fa:	f107 030b 	add.w	r3, r7, #11
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <aci_hal_write_config_data+0xd4>
    return status;
 8005404:	f107 030b 	add.w	r3, r7, #11
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	e000      	b.n	800540e <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3308      	adds	r3, #8
 8005424:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b04      	cmp	r3, #4
 800542c:	d001      	beq.n	8005432 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800542e:	2301      	movs	r3, #1
 8005430:	e00c      	b.n	800544c <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3302      	adds	r3, #2
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005440:	3b03      	subs	r3, #3
 8005442:	429a      	cmp	r2, r3
 8005444:	d001      	beq.n	800544a <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8005446:	2302      	movs	r3, #2
 8005448:	e000      	b.n	800544c <verify_packet+0x34>
  
  return 0;      
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b0a6      	sub	sp, #152	; 0x98
 800545c:	af00      	add	r7, sp, #0
 800545e:	607b      	str	r3, [r7, #4]
 8005460:	4603      	mov	r3, r0
 8005462:	81fb      	strh	r3, [r7, #14]
 8005464:	460b      	mov	r3, r1
 8005466:	81bb      	strh	r3, [r7, #12]
 8005468:	4613      	mov	r3, r2
 800546a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800546c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005474:	b21a      	sxth	r2, r3
 8005476:	89fb      	ldrh	r3, [r7, #14]
 8005478:	029b      	lsls	r3, r3, #10
 800547a:	b21b      	sxth	r3, r3
 800547c:	4313      	orrs	r3, r2
 800547e:	b21b      	sxth	r3, r3
 8005480:	b29b      	uxth	r3, r3
 8005482:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8005484:	7afb      	ldrb	r3, [r7, #11]
 8005486:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8005488:	2301      	movs	r3, #1
 800548a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800548c:	f107 0318 	add.w	r3, r7, #24
 8005490:	3301      	adds	r3, #1
 8005492:	461a      	mov	r2, r3
 8005494:	f107 0314 	add.w	r3, r7, #20
 8005498:	8819      	ldrh	r1, [r3, #0]
 800549a:	789b      	ldrb	r3, [r3, #2]
 800549c:	8011      	strh	r1, [r2, #0]
 800549e:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80054a0:	f107 0318 	add.w	r3, r7, #24
 80054a4:	3304      	adds	r3, #4
 80054a6:	7afa      	ldrb	r2, [r7, #11]
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fb84 	bl	8005bb8 <memcpy>
  
  if (hciContext.io.Send)
 80054b0:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <send_cmd+0x7c>)
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d009      	beq.n	80054cc <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80054b8:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <send_cmd+0x7c>)
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	7afa      	ldrb	r2, [r7, #11]
 80054be:	b292      	uxth	r2, r2
 80054c0:	3204      	adds	r2, #4
 80054c2:	b291      	uxth	r1, r2
 80054c4:	f107 0218 	add.w	r2, r7, #24
 80054c8:	4610      	mov	r0, r2
 80054ca:	4798      	blx	r3
  }
}
 80054cc:	bf00      	nop
 80054ce:	3798      	adds	r7, #152	; 0x98
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20000750 	.word	0x20000750

080054d8 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80054e2:	e00a      	b.n	80054fa <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80054e4:	f107 030c 	add.w	r3, r7, #12
 80054e8:	4619      	mov	r1, r3
 80054ea:	6838      	ldr	r0, [r7, #0]
 80054ec:	f000 faea 	bl	8005ac4 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4619      	mov	r1, r3
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fa51 	bl	800599c <list_insert_head>
  while (!list_is_empty(src_list))
 80054fa:	6838      	ldr	r0, [r7, #0]
 80054fc:	f000 fa2c 	bl	8005958 <list_is_empty>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0ee      	beq.n	80054e4 <move_list+0xc>
  }
}
 8005506:	bf00      	nop
 8005508:	bf00      	nop
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005516:	e009      	b.n	800552c <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8005518:	1d3b      	adds	r3, r7, #4
 800551a:	4619      	mov	r1, r3
 800551c:	4809      	ldr	r0, [pc, #36]	; (8005544 <free_event_list+0x34>)
 800551e:	f000 faaa 	bl	8005a76 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4619      	mov	r1, r3
 8005526:	4808      	ldr	r0, [pc, #32]	; (8005548 <free_event_list+0x38>)
 8005528:	f000 fa5e 	bl	80059e8 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800552c:	4806      	ldr	r0, [pc, #24]	; (8005548 <free_event_list+0x38>)
 800552e:	f000 faf0 	bl	8005b12 <list_get_size>
 8005532:	4603      	mov	r3, r0
 8005534:	2b04      	cmp	r3, #4
 8005536:	ddef      	ble.n	8005518 <free_event_list+0x8>
  }
}
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000848 	.word	0x20000848
 8005548:	20000840 	.word	0x20000840

0800554c <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800555c:	4a18      	ldr	r2, [pc, #96]	; (80055c0 <hci_init+0x74>)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8005562:	4818      	ldr	r0, [pc, #96]	; (80055c4 <hci_init+0x78>)
 8005564:	f000 f9e8 	bl	8005938 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8005568:	4817      	ldr	r0, [pc, #92]	; (80055c8 <hci_init+0x7c>)
 800556a:	f000 f9e5 	bl	8005938 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800556e:	f7fb f9a3 	bl	80008b8 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005572:	2300      	movs	r3, #0
 8005574:	73fb      	strb	r3, [r7, #15]
 8005576:	e00c      	b.n	8005592 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	228c      	movs	r2, #140	; 0x8c
 800557c:	fb02 f303 	mul.w	r3, r2, r3
 8005580:	4a12      	ldr	r2, [pc, #72]	; (80055cc <hci_init+0x80>)
 8005582:	4413      	add	r3, r2
 8005584:	4619      	mov	r1, r3
 8005586:	480f      	ldr	r0, [pc, #60]	; (80055c4 <hci_init+0x78>)
 8005588:	f000 fa2e 	bl	80059e8 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800558c:	7bfb      	ldrb	r3, [r7, #15]
 800558e:	3301      	adds	r3, #1
 8005590:	73fb      	strb	r3, [r7, #15]
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	2b09      	cmp	r3, #9
 8005596:	d9ef      	bls.n	8005578 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8005598:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <hci_init+0x74>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <hci_init+0x5c>
 80055a0:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <hci_init+0x74>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2000      	movs	r0, #0
 80055a6:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 80055a8:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <hci_init+0x74>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <hci_init+0x6a>
 80055b0:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <hci_init+0x74>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	4798      	blx	r3
}
 80055b6:	bf00      	nop
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000750 	.word	0x20000750
 80055c4:	20000840 	.word	0x20000840
 80055c8:	20000848 	.word	0x20000848
 80055cc:	200001d8 	.word	0x200001d8

080055d0 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a0b      	ldr	r2, [pc, #44]	; (800560c <hci_register_io_bus+0x3c>)
 80055de:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4a09      	ldr	r2, [pc, #36]	; (800560c <hci_register_io_bus+0x3c>)
 80055e6:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	4a07      	ldr	r2, [pc, #28]	; (800560c <hci_register_io_bus+0x3c>)
 80055ee:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	4a05      	ldr	r2, [pc, #20]	; (800560c <hci_register_io_bus+0x3c>)
 80055f6:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	4a03      	ldr	r2, [pc, #12]	; (800560c <hci_register_io_bus+0x3c>)
 80055fe:	6093      	str	r3, [r2, #8]
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	20000750 	.word	0x20000750

08005610 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08e      	sub	sp, #56	; 0x38
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	885b      	ldrh	r3, [r3, #2]
 8005620:	b21b      	sxth	r3, r3
 8005622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005626:	b21a      	sxth	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	029b      	lsls	r3, r3, #10
 800562e:	b21b      	sxth	r3, r3
 8005630:	4313      	orrs	r3, r2
 8005632:	b21b      	sxth	r3, r3
 8005634:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8005636:	2300      	movs	r3, #0
 8005638:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800563a:	f107 0308 	add.w	r3, r7, #8
 800563e:	4618      	mov	r0, r3
 8005640:	f000 f97a 	bl	8005938 <list_init_head>

  free_event_list();
 8005644:	f7ff ff64 	bl	8005510 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8818      	ldrh	r0, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	8859      	ldrh	r1, [r3, #2]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	b2da      	uxtb	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f7ff fefd 	bl	8005458 <send_cmd>
  
  if (async)
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <hci_send_req+0x58>
  {
    return 0;
 8005664:	2300      	movs	r3, #0
 8005666:	e0e5      	b.n	8005834 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8005668:	f7fc f82c 	bl	80016c4 <HAL_GetTick>
 800566c:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800566e:	f7fc f829 	bl	80016c4 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800567c:	f200 80b6 	bhi.w	80057ec <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8005680:	486e      	ldr	r0, [pc, #440]	; (800583c <hci_send_req+0x22c>)
 8005682:	f000 f969 	bl	8005958 <list_is_empty>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d000      	beq.n	800568e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800568c:	e7ef      	b.n	800566e <hci_send_req+0x5e>
      {
        break;
 800568e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8005690:	f107 0310 	add.w	r3, r7, #16
 8005694:	4619      	mov	r1, r3
 8005696:	4869      	ldr	r0, [pc, #420]	; (800583c <hci_send_req+0x22c>)
 8005698:	f000 f9ed 	bl	8005a76 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	3308      	adds	r3, #8
 80056a0:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 80056a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d17b      	bne.n	80057a2 <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	3301      	adds	r3, #1
 80056ae:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	3308      	adds	r3, #8
 80056b4:	3303      	adds	r3, #3
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80056be:	3b03      	subs	r3, #3
 80056c0:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b3e      	cmp	r3, #62	; 0x3e
 80056c8:	d04d      	beq.n	8005766 <hci_send_req+0x156>
 80056ca:	2b3e      	cmp	r3, #62	; 0x3e
 80056cc:	dc6b      	bgt.n	80057a6 <hci_send_req+0x196>
 80056ce:	2b10      	cmp	r3, #16
 80056d0:	f000 808e 	beq.w	80057f0 <hci_send_req+0x1e0>
 80056d4:	2b10      	cmp	r3, #16
 80056d6:	dc66      	bgt.n	80057a6 <hci_send_req+0x196>
 80056d8:	2b0e      	cmp	r3, #14
 80056da:	d024      	beq.n	8005726 <hci_send_req+0x116>
 80056dc:	2b0f      	cmp	r3, #15
 80056de:	d162      	bne.n	80057a6 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	885b      	ldrh	r3, [r3, #2]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80056ec:	429a      	cmp	r2, r3
 80056ee:	f040 8081 	bne.w	80057f4 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b0f      	cmp	r3, #15
 80056f8:	d004      	beq.n	8005704 <hci_send_req+0xf4>
          if (cs->status) {
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d053      	beq.n	80057aa <hci_send_req+0x19a>
            goto failed;
 8005702:	e07a      	b.n	80057fa <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	695a      	ldr	r2, [r3, #20]
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	429a      	cmp	r2, r3
 800570c:	bf28      	it	cs
 800570e:	461a      	movcs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6918      	ldr	r0, [r3, #16]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	461a      	mov	r2, r3
 800571e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005720:	f000 fa4a 	bl	8005bb8 <memcpy>
        goto done;
 8005724:	e07a      	b.n	800581c <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005730:	b29b      	uxth	r3, r3
 8005732:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005734:	429a      	cmp	r2, r3
 8005736:	d15f      	bne.n	80057f8 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	3303      	adds	r3, #3
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	3b03      	subs	r3, #3
 8005742:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	695a      	ldr	r2, [r3, #20]
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	429a      	cmp	r2, r3
 800574c:	bf28      	it	cs
 800574e:	461a      	movcs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6918      	ldr	r0, [r3, #16]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	461a      	mov	r2, r3
 800575e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005760:	f000 fa2a 	bl	8005bb8 <memcpy>
        goto done;
 8005764:	e05a      	b.n	800581c <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	429a      	cmp	r2, r3
 8005776:	d11a      	bne.n	80057ae <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	3b01      	subs	r3, #1
 800577c:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695a      	ldr	r2, [r3, #20]
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	429a      	cmp	r2, r3
 8005786:	bf28      	it	cs
 8005788:	461a      	movcs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6918      	ldr	r0, [r3, #16]
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	1c59      	adds	r1, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	461a      	mov	r2, r3
 800579c:	f000 fa0c 	bl	8005bb8 <memcpy>
        goto done;
 80057a0:	e03c      	b.n	800581c <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 80057a2:	bf00      	nop
 80057a4:	e004      	b.n	80057b0 <hci_send_req+0x1a0>
        break;
 80057a6:	bf00      	nop
 80057a8:	e002      	b.n	80057b0 <hci_send_req+0x1a0>
          break;
 80057aa:	bf00      	nop
 80057ac:	e000      	b.n	80057b0 <hci_send_req+0x1a0>
          break;
 80057ae:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80057b0:	4823      	ldr	r0, [pc, #140]	; (8005840 <hci_send_req+0x230>)
 80057b2:	f000 f8d1 	bl	8005958 <list_is_empty>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00d      	beq.n	80057d8 <hci_send_req+0x1c8>
 80057bc:	481f      	ldr	r0, [pc, #124]	; (800583c <hci_send_req+0x22c>)
 80057be:	f000 f8cb 	bl	8005958 <list_is_empty>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	4619      	mov	r1, r3
 80057cc:	481c      	ldr	r0, [pc, #112]	; (8005840 <hci_send_req+0x230>)
 80057ce:	f000 f90b 	bl	80059e8 <list_insert_tail>
      hciReadPacket=NULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	e008      	b.n	80057ea <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	f107 0308 	add.w	r3, r7, #8
 80057de:	4611      	mov	r1, r2
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 f901 	bl	80059e8 <list_insert_tail>
      hciReadPacket=NULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	613b      	str	r3, [r7, #16]
  {
 80057ea:	e73d      	b.n	8005668 <hci_send_req+0x58>
        goto failed;
 80057ec:	bf00      	nop
 80057ee:	e004      	b.n	80057fa <hci_send_req+0x1ea>
        goto failed;
 80057f0:	bf00      	nop
 80057f2:	e002      	b.n	80057fa <hci_send_req+0x1ea>
          goto failed;
 80057f4:	bf00      	nop
 80057f6:	e000      	b.n	80057fa <hci_send_req+0x1ea>
          goto failed;
 80057f8:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d004      	beq.n	800580a <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	4619      	mov	r1, r3
 8005804:	480e      	ldr	r0, [pc, #56]	; (8005840 <hci_send_req+0x230>)
 8005806:	f000 f8c9 	bl	800599c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800580a:	f107 0308 	add.w	r3, r7, #8
 800580e:	4619      	mov	r1, r3
 8005810:	480a      	ldr	r0, [pc, #40]	; (800583c <hci_send_req+0x22c>)
 8005812:	f7ff fe61 	bl	80054d8 <move_list>

  return -1;
 8005816:	f04f 33ff 	mov.w	r3, #4294967295
 800581a:	e00b      	b.n	8005834 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	4619      	mov	r1, r3
 8005820:	4807      	ldr	r0, [pc, #28]	; (8005840 <hci_send_req+0x230>)
 8005822:	f000 f8bb 	bl	800599c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8005826:	f107 0308 	add.w	r3, r7, #8
 800582a:	4619      	mov	r1, r3
 800582c:	4803      	ldr	r0, [pc, #12]	; (800583c <hci_send_req+0x22c>)
 800582e:	f7ff fe53 	bl	80054d8 <move_list>

  return 0;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3738      	adds	r7, #56	; 0x38
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20000848 	.word	0x20000848
 8005840:	20000840 	.word	0x20000840

08005844 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800584a:	2300      	movs	r3, #0
 800584c:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800584e:	e013      	b.n	8005878 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8005850:	1d3b      	adds	r3, r7, #4
 8005852:	4619      	mov	r1, r3
 8005854:	480e      	ldr	r0, [pc, #56]	; (8005890 <hci_user_evt_proc+0x4c>)
 8005856:	f000 f90e 	bl	8005a76 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800585a:	4b0e      	ldr	r3, [pc, #56]	; (8005894 <hci_user_evt_proc+0x50>)
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8005862:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <hci_user_evt_proc+0x50>)
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	3208      	adds	r2, #8
 800586a:	4610      	mov	r0, r2
 800586c:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4619      	mov	r1, r3
 8005872:	4809      	ldr	r0, [pc, #36]	; (8005898 <hci_user_evt_proc+0x54>)
 8005874:	f000 f8b8 	bl	80059e8 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005878:	4805      	ldr	r0, [pc, #20]	; (8005890 <hci_user_evt_proc+0x4c>)
 800587a:	f000 f86d 	bl	8005958 <list_is_empty>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0e5      	beq.n	8005850 <hci_user_evt_proc+0xc>
  }
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000848 	.word	0x20000848
 8005894:	20000750 	.word	0x20000750
 8005898:	20000840 	.word	0x20000840

0800589c <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80058ac:	481f      	ldr	r0, [pc, #124]	; (800592c <hci_notify_asynch_evt+0x90>)
 80058ae:	f000 f853 	bl	8005958 <list_is_empty>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d132      	bne.n	800591e <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80058b8:	f107 030c 	add.w	r3, r7, #12
 80058bc:	4619      	mov	r1, r3
 80058be:	481b      	ldr	r0, [pc, #108]	; (800592c <hci_notify_asynch_evt+0x90>)
 80058c0:	f000 f8d9 	bl	8005a76 <list_remove_head>
    
    if (hciContext.io.Receive)
 80058c4:	4b1a      	ldr	r3, [pc, #104]	; (8005930 <hci_notify_asynch_evt+0x94>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d02a      	beq.n	8005922 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80058cc:	4b18      	ldr	r3, [pc, #96]	; (8005930 <hci_notify_asynch_evt+0x94>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	3208      	adds	r2, #8
 80058d4:	2180      	movs	r1, #128	; 0x80
 80058d6:	4610      	mov	r0, r2
 80058d8:	4798      	blx	r3
 80058da:	4603      	mov	r3, r0
 80058dc:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 80058de:	7cfb      	ldrb	r3, [r7, #19]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d016      	beq.n	8005912 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	7cfa      	ldrb	r2, [r7, #19]
 80058e8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff fd92 	bl	8005418 <verify_packet>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d105      	bne.n	8005906 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4619      	mov	r1, r3
 80058fe:	480d      	ldr	r0, [pc, #52]	; (8005934 <hci_notify_asynch_evt+0x98>)
 8005900:	f000 f872 	bl	80059e8 <list_insert_tail>
 8005904:	e00d      	b.n	8005922 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4619      	mov	r1, r3
 800590a:	4808      	ldr	r0, [pc, #32]	; (800592c <hci_notify_asynch_evt+0x90>)
 800590c:	f000 f846 	bl	800599c <list_insert_head>
 8005910:	e007      	b.n	8005922 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4619      	mov	r1, r3
 8005916:	4805      	ldr	r0, [pc, #20]	; (800592c <hci_notify_asynch_evt+0x90>)
 8005918:	f000 f840 	bl	800599c <list_insert_head>
 800591c:	e001      	b.n	8005922 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800591e:	2301      	movs	r3, #1
 8005920:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8005922:	697b      	ldr	r3, [r7, #20]
  
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20000840 	.word	0x20000840
 8005930:	20000750 	.word	0x20000750
 8005934:	20000848 	.word	0x20000848

08005938 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	605a      	str	r2, [r3, #4]
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005960:	f3ef 8310 	mrs	r3, PRIMASK
 8005964:	60fb      	str	r3, [r7, #12]
  return(result);
 8005966:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005968:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800596a:	b672      	cpsid	i
}
 800596c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	429a      	cmp	r2, r3
 8005976:	d102      	bne.n	800597e <list_is_empty+0x26>
  {
    return_value = 1;
 8005978:	2301      	movs	r3, #1
 800597a:	75fb      	strb	r3, [r7, #23]
 800597c:	e001      	b.n	8005982 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800597e:	2300      	movs	r3, #0
 8005980:	75fb      	strb	r3, [r7, #23]
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f383 8810 	msr	PRIMASK, r3
}
 800598c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800598e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005990:	4618      	mov	r0, r3
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059a6:	f3ef 8310 	mrs	r3, PRIMASK
 80059aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80059ac:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80059ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80059b0:	b672      	cpsid	i
}
 80059b2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	605a      	str	r2, [r3, #4]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f383 8810 	msr	PRIMASK, r3
}
 80059da:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80059dc:	bf00      	nop
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f2:	f3ef 8310 	mrs	r3, PRIMASK
 80059f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80059f8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80059fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80059fc:	b672      	cpsid	i
}
 80059fe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f383 8810 	msr	PRIMASK, r3
}
 8005a26:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005a28:	bf00      	nop
 8005a2a:	371c      	adds	r7, #28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a40:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a42:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005a44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a46:	b672      	cpsid	i
}
 8005a48:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6852      	ldr	r2, [r2, #4]
 8005a5c:	605a      	str	r2, [r3, #4]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f383 8810 	msr	PRIMASK, r3
}
 8005a68:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005a6a:	bf00      	nop
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b086      	sub	sp, #24
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a80:	f3ef 8310 	mrs	r3, PRIMASK
 8005a84:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a86:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005a88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a8a:	b672      	cpsid	i
}
 8005a8c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff ffca 	bl	8005a34 <list_remove_node>
  (*node)->next = NULL;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2200      	movs	r2, #0
 8005aae:	605a      	str	r2, [r3, #4]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f383 8810 	msr	PRIMASK, r3
}
 8005aba:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005abc:	bf00      	nop
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ace:	f3ef 8310 	mrs	r3, PRIMASK
 8005ad2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005ad6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ad8:	b672      	cpsid	i
}
 8005ada:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff ffa3 	bl	8005a34 <list_remove_node>
  (*node)->next = NULL;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2200      	movs	r2, #0
 8005afc:	605a      	str	r2, [r3, #4]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f383 8810 	msr	PRIMASK, r3
}
 8005b08:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005b0a:	bf00      	nop
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b089      	sub	sp, #36	; 0x24
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  int size = 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b22:	613b      	str	r3, [r7, #16]
  return(result);
 8005b24:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005b26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b28:	b672      	cpsid	i
}
 8005b2a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005b32:	e005      	b.n	8005b40 <list_get_size+0x2e>
  {
    size++;
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	3301      	adds	r3, #1
 8005b38:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d1f5      	bne.n	8005b34 <list_get_size+0x22>
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f383 8810 	msr	PRIMASK, r3
}
 8005b52:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8005b54:	69fb      	ldr	r3, [r7, #28]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3724      	adds	r7, #36	; 0x24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <__errno>:
 8005b64:	4b01      	ldr	r3, [pc, #4]	; (8005b6c <__errno+0x8>)
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	20000048 	.word	0x20000048

08005b70 <__libc_init_array>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	4d0d      	ldr	r5, [pc, #52]	; (8005ba8 <__libc_init_array+0x38>)
 8005b74:	4c0d      	ldr	r4, [pc, #52]	; (8005bac <__libc_init_array+0x3c>)
 8005b76:	1b64      	subs	r4, r4, r5
 8005b78:	10a4      	asrs	r4, r4, #2
 8005b7a:	2600      	movs	r6, #0
 8005b7c:	42a6      	cmp	r6, r4
 8005b7e:	d109      	bne.n	8005b94 <__libc_init_array+0x24>
 8005b80:	4d0b      	ldr	r5, [pc, #44]	; (8005bb0 <__libc_init_array+0x40>)
 8005b82:	4c0c      	ldr	r4, [pc, #48]	; (8005bb4 <__libc_init_array+0x44>)
 8005b84:	f000 ff84 	bl	8006a90 <_init>
 8005b88:	1b64      	subs	r4, r4, r5
 8005b8a:	10a4      	asrs	r4, r4, #2
 8005b8c:	2600      	movs	r6, #0
 8005b8e:	42a6      	cmp	r6, r4
 8005b90:	d105      	bne.n	8005b9e <__libc_init_array+0x2e>
 8005b92:	bd70      	pop	{r4, r5, r6, pc}
 8005b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b98:	4798      	blx	r3
 8005b9a:	3601      	adds	r6, #1
 8005b9c:	e7ee      	b.n	8005b7c <__libc_init_array+0xc>
 8005b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba2:	4798      	blx	r3
 8005ba4:	3601      	adds	r6, #1
 8005ba6:	e7f2      	b.n	8005b8e <__libc_init_array+0x1e>
 8005ba8:	08006e64 	.word	0x08006e64
 8005bac:	08006e64 	.word	0x08006e64
 8005bb0:	08006e64 	.word	0x08006e64
 8005bb4:	08006e68 	.word	0x08006e68

08005bb8 <memcpy>:
 8005bb8:	440a      	add	r2, r1
 8005bba:	4291      	cmp	r1, r2
 8005bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bc0:	d100      	bne.n	8005bc4 <memcpy+0xc>
 8005bc2:	4770      	bx	lr
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bce:	4291      	cmp	r1, r2
 8005bd0:	d1f9      	bne.n	8005bc6 <memcpy+0xe>
 8005bd2:	bd10      	pop	{r4, pc}

08005bd4 <memset>:
 8005bd4:	4402      	add	r2, r0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d100      	bne.n	8005bde <memset+0xa>
 8005bdc:	4770      	bx	lr
 8005bde:	f803 1b01 	strb.w	r1, [r3], #1
 8005be2:	e7f9      	b.n	8005bd8 <memset+0x4>

08005be4 <iprintf>:
 8005be4:	b40f      	push	{r0, r1, r2, r3}
 8005be6:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <iprintf+0x2c>)
 8005be8:	b513      	push	{r0, r1, r4, lr}
 8005bea:	681c      	ldr	r4, [r3, #0]
 8005bec:	b124      	cbz	r4, 8005bf8 <iprintf+0x14>
 8005bee:	69a3      	ldr	r3, [r4, #24]
 8005bf0:	b913      	cbnz	r3, 8005bf8 <iprintf+0x14>
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 f866 	bl	8005cc4 <__sinit>
 8005bf8:	ab05      	add	r3, sp, #20
 8005bfa:	9a04      	ldr	r2, [sp, #16]
 8005bfc:	68a1      	ldr	r1, [r4, #8]
 8005bfe:	9301      	str	r3, [sp, #4]
 8005c00:	4620      	mov	r0, r4
 8005c02:	f000 f983 	bl	8005f0c <_vfiprintf_r>
 8005c06:	b002      	add	sp, #8
 8005c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c0c:	b004      	add	sp, #16
 8005c0e:	4770      	bx	lr
 8005c10:	20000048 	.word	0x20000048

08005c14 <std>:
 8005c14:	2300      	movs	r3, #0
 8005c16:	b510      	push	{r4, lr}
 8005c18:	4604      	mov	r4, r0
 8005c1a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c22:	6083      	str	r3, [r0, #8]
 8005c24:	8181      	strh	r1, [r0, #12]
 8005c26:	6643      	str	r3, [r0, #100]	; 0x64
 8005c28:	81c2      	strh	r2, [r0, #14]
 8005c2a:	6183      	str	r3, [r0, #24]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	2208      	movs	r2, #8
 8005c30:	305c      	adds	r0, #92	; 0x5c
 8005c32:	f7ff ffcf 	bl	8005bd4 <memset>
 8005c36:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <std+0x38>)
 8005c38:	6263      	str	r3, [r4, #36]	; 0x24
 8005c3a:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <std+0x3c>)
 8005c3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c3e:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <std+0x40>)
 8005c40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c42:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <std+0x44>)
 8005c44:	6224      	str	r4, [r4, #32]
 8005c46:	6323      	str	r3, [r4, #48]	; 0x30
 8005c48:	bd10      	pop	{r4, pc}
 8005c4a:	bf00      	nop
 8005c4c:	080064b5 	.word	0x080064b5
 8005c50:	080064d7 	.word	0x080064d7
 8005c54:	0800650f 	.word	0x0800650f
 8005c58:	08006533 	.word	0x08006533

08005c5c <_cleanup_r>:
 8005c5c:	4901      	ldr	r1, [pc, #4]	; (8005c64 <_cleanup_r+0x8>)
 8005c5e:	f000 b8af 	b.w	8005dc0 <_fwalk_reent>
 8005c62:	bf00      	nop
 8005c64:	0800680d 	.word	0x0800680d

08005c68 <__sfmoreglue>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	1e4a      	subs	r2, r1, #1
 8005c6c:	2568      	movs	r5, #104	; 0x68
 8005c6e:	4355      	muls	r5, r2
 8005c70:	460e      	mov	r6, r1
 8005c72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c76:	f000 f8c5 	bl	8005e04 <_malloc_r>
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	b140      	cbz	r0, 8005c90 <__sfmoreglue+0x28>
 8005c7e:	2100      	movs	r1, #0
 8005c80:	e9c0 1600 	strd	r1, r6, [r0]
 8005c84:	300c      	adds	r0, #12
 8005c86:	60a0      	str	r0, [r4, #8]
 8005c88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c8c:	f7ff ffa2 	bl	8005bd4 <memset>
 8005c90:	4620      	mov	r0, r4
 8005c92:	bd70      	pop	{r4, r5, r6, pc}

08005c94 <__sfp_lock_acquire>:
 8005c94:	4801      	ldr	r0, [pc, #4]	; (8005c9c <__sfp_lock_acquire+0x8>)
 8005c96:	f000 b8b3 	b.w	8005e00 <__retarget_lock_acquire_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	20000858 	.word	0x20000858

08005ca0 <__sfp_lock_release>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	; (8005ca8 <__sfp_lock_release+0x8>)
 8005ca2:	f000 b8ae 	b.w	8005e02 <__retarget_lock_release_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	20000858 	.word	0x20000858

08005cac <__sinit_lock_acquire>:
 8005cac:	4801      	ldr	r0, [pc, #4]	; (8005cb4 <__sinit_lock_acquire+0x8>)
 8005cae:	f000 b8a7 	b.w	8005e00 <__retarget_lock_acquire_recursive>
 8005cb2:	bf00      	nop
 8005cb4:	20000853 	.word	0x20000853

08005cb8 <__sinit_lock_release>:
 8005cb8:	4801      	ldr	r0, [pc, #4]	; (8005cc0 <__sinit_lock_release+0x8>)
 8005cba:	f000 b8a2 	b.w	8005e02 <__retarget_lock_release_recursive>
 8005cbe:	bf00      	nop
 8005cc0:	20000853 	.word	0x20000853

08005cc4 <__sinit>:
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	f7ff fff0 	bl	8005cac <__sinit_lock_acquire>
 8005ccc:	69a3      	ldr	r3, [r4, #24]
 8005cce:	b11b      	cbz	r3, 8005cd8 <__sinit+0x14>
 8005cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cd4:	f7ff bff0 	b.w	8005cb8 <__sinit_lock_release>
 8005cd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005cdc:	6523      	str	r3, [r4, #80]	; 0x50
 8005cde:	4b13      	ldr	r3, [pc, #76]	; (8005d2c <__sinit+0x68>)
 8005ce0:	4a13      	ldr	r2, [pc, #76]	; (8005d30 <__sinit+0x6c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ce6:	42a3      	cmp	r3, r4
 8005ce8:	bf04      	itt	eq
 8005cea:	2301      	moveq	r3, #1
 8005cec:	61a3      	streq	r3, [r4, #24]
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f000 f820 	bl	8005d34 <__sfp>
 8005cf4:	6060      	str	r0, [r4, #4]
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f000 f81c 	bl	8005d34 <__sfp>
 8005cfc:	60a0      	str	r0, [r4, #8]
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f000 f818 	bl	8005d34 <__sfp>
 8005d04:	2200      	movs	r2, #0
 8005d06:	60e0      	str	r0, [r4, #12]
 8005d08:	2104      	movs	r1, #4
 8005d0a:	6860      	ldr	r0, [r4, #4]
 8005d0c:	f7ff ff82 	bl	8005c14 <std>
 8005d10:	68a0      	ldr	r0, [r4, #8]
 8005d12:	2201      	movs	r2, #1
 8005d14:	2109      	movs	r1, #9
 8005d16:	f7ff ff7d 	bl	8005c14 <std>
 8005d1a:	68e0      	ldr	r0, [r4, #12]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	2112      	movs	r1, #18
 8005d20:	f7ff ff78 	bl	8005c14 <std>
 8005d24:	2301      	movs	r3, #1
 8005d26:	61a3      	str	r3, [r4, #24]
 8005d28:	e7d2      	b.n	8005cd0 <__sinit+0xc>
 8005d2a:	bf00      	nop
 8005d2c:	08006dc4 	.word	0x08006dc4
 8005d30:	08005c5d 	.word	0x08005c5d

08005d34 <__sfp>:
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	4607      	mov	r7, r0
 8005d38:	f7ff ffac 	bl	8005c94 <__sfp_lock_acquire>
 8005d3c:	4b1e      	ldr	r3, [pc, #120]	; (8005db8 <__sfp+0x84>)
 8005d3e:	681e      	ldr	r6, [r3, #0]
 8005d40:	69b3      	ldr	r3, [r6, #24]
 8005d42:	b913      	cbnz	r3, 8005d4a <__sfp+0x16>
 8005d44:	4630      	mov	r0, r6
 8005d46:	f7ff ffbd 	bl	8005cc4 <__sinit>
 8005d4a:	3648      	adds	r6, #72	; 0x48
 8005d4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	d503      	bpl.n	8005d5c <__sfp+0x28>
 8005d54:	6833      	ldr	r3, [r6, #0]
 8005d56:	b30b      	cbz	r3, 8005d9c <__sfp+0x68>
 8005d58:	6836      	ldr	r6, [r6, #0]
 8005d5a:	e7f7      	b.n	8005d4c <__sfp+0x18>
 8005d5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d60:	b9d5      	cbnz	r5, 8005d98 <__sfp+0x64>
 8005d62:	4b16      	ldr	r3, [pc, #88]	; (8005dbc <__sfp+0x88>)
 8005d64:	60e3      	str	r3, [r4, #12]
 8005d66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d6a:	6665      	str	r5, [r4, #100]	; 0x64
 8005d6c:	f000 f847 	bl	8005dfe <__retarget_lock_init_recursive>
 8005d70:	f7ff ff96 	bl	8005ca0 <__sfp_lock_release>
 8005d74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d7c:	6025      	str	r5, [r4, #0]
 8005d7e:	61a5      	str	r5, [r4, #24]
 8005d80:	2208      	movs	r2, #8
 8005d82:	4629      	mov	r1, r5
 8005d84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d88:	f7ff ff24 	bl	8005bd4 <memset>
 8005d8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d94:	4620      	mov	r0, r4
 8005d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d98:	3468      	adds	r4, #104	; 0x68
 8005d9a:	e7d9      	b.n	8005d50 <__sfp+0x1c>
 8005d9c:	2104      	movs	r1, #4
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f7ff ff62 	bl	8005c68 <__sfmoreglue>
 8005da4:	4604      	mov	r4, r0
 8005da6:	6030      	str	r0, [r6, #0]
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d1d5      	bne.n	8005d58 <__sfp+0x24>
 8005dac:	f7ff ff78 	bl	8005ca0 <__sfp_lock_release>
 8005db0:	230c      	movs	r3, #12
 8005db2:	603b      	str	r3, [r7, #0]
 8005db4:	e7ee      	b.n	8005d94 <__sfp+0x60>
 8005db6:	bf00      	nop
 8005db8:	08006dc4 	.word	0x08006dc4
 8005dbc:	ffff0001 	.word	0xffff0001

08005dc0 <_fwalk_reent>:
 8005dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	4688      	mov	r8, r1
 8005dc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005dcc:	2700      	movs	r7, #0
 8005dce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dd2:	f1b9 0901 	subs.w	r9, r9, #1
 8005dd6:	d505      	bpl.n	8005de4 <_fwalk_reent+0x24>
 8005dd8:	6824      	ldr	r4, [r4, #0]
 8005dda:	2c00      	cmp	r4, #0
 8005ddc:	d1f7      	bne.n	8005dce <_fwalk_reent+0xe>
 8005dde:	4638      	mov	r0, r7
 8005de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de4:	89ab      	ldrh	r3, [r5, #12]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d907      	bls.n	8005dfa <_fwalk_reent+0x3a>
 8005dea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dee:	3301      	adds	r3, #1
 8005df0:	d003      	beq.n	8005dfa <_fwalk_reent+0x3a>
 8005df2:	4629      	mov	r1, r5
 8005df4:	4630      	mov	r0, r6
 8005df6:	47c0      	blx	r8
 8005df8:	4307      	orrs	r7, r0
 8005dfa:	3568      	adds	r5, #104	; 0x68
 8005dfc:	e7e9      	b.n	8005dd2 <_fwalk_reent+0x12>

08005dfe <__retarget_lock_init_recursive>:
 8005dfe:	4770      	bx	lr

08005e00 <__retarget_lock_acquire_recursive>:
 8005e00:	4770      	bx	lr

08005e02 <__retarget_lock_release_recursive>:
 8005e02:	4770      	bx	lr

08005e04 <_malloc_r>:
 8005e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e06:	1ccd      	adds	r5, r1, #3
 8005e08:	f025 0503 	bic.w	r5, r5, #3
 8005e0c:	3508      	adds	r5, #8
 8005e0e:	2d0c      	cmp	r5, #12
 8005e10:	bf38      	it	cc
 8005e12:	250c      	movcc	r5, #12
 8005e14:	2d00      	cmp	r5, #0
 8005e16:	4606      	mov	r6, r0
 8005e18:	db01      	blt.n	8005e1e <_malloc_r+0x1a>
 8005e1a:	42a9      	cmp	r1, r5
 8005e1c:	d903      	bls.n	8005e26 <_malloc_r+0x22>
 8005e1e:	230c      	movs	r3, #12
 8005e20:	6033      	str	r3, [r6, #0]
 8005e22:	2000      	movs	r0, #0
 8005e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e26:	f000 fda3 	bl	8006970 <__malloc_lock>
 8005e2a:	4921      	ldr	r1, [pc, #132]	; (8005eb0 <_malloc_r+0xac>)
 8005e2c:	680a      	ldr	r2, [r1, #0]
 8005e2e:	4614      	mov	r4, r2
 8005e30:	b99c      	cbnz	r4, 8005e5a <_malloc_r+0x56>
 8005e32:	4f20      	ldr	r7, [pc, #128]	; (8005eb4 <_malloc_r+0xb0>)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	b923      	cbnz	r3, 8005e42 <_malloc_r+0x3e>
 8005e38:	4621      	mov	r1, r4
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	f000 fb2a 	bl	8006494 <_sbrk_r>
 8005e40:	6038      	str	r0, [r7, #0]
 8005e42:	4629      	mov	r1, r5
 8005e44:	4630      	mov	r0, r6
 8005e46:	f000 fb25 	bl	8006494 <_sbrk_r>
 8005e4a:	1c43      	adds	r3, r0, #1
 8005e4c:	d123      	bne.n	8005e96 <_malloc_r+0x92>
 8005e4e:	230c      	movs	r3, #12
 8005e50:	6033      	str	r3, [r6, #0]
 8005e52:	4630      	mov	r0, r6
 8005e54:	f000 fd92 	bl	800697c <__malloc_unlock>
 8005e58:	e7e3      	b.n	8005e22 <_malloc_r+0x1e>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	1b5b      	subs	r3, r3, r5
 8005e5e:	d417      	bmi.n	8005e90 <_malloc_r+0x8c>
 8005e60:	2b0b      	cmp	r3, #11
 8005e62:	d903      	bls.n	8005e6c <_malloc_r+0x68>
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	441c      	add	r4, r3
 8005e68:	6025      	str	r5, [r4, #0]
 8005e6a:	e004      	b.n	8005e76 <_malloc_r+0x72>
 8005e6c:	6863      	ldr	r3, [r4, #4]
 8005e6e:	42a2      	cmp	r2, r4
 8005e70:	bf0c      	ite	eq
 8005e72:	600b      	streq	r3, [r1, #0]
 8005e74:	6053      	strne	r3, [r2, #4]
 8005e76:	4630      	mov	r0, r6
 8005e78:	f000 fd80 	bl	800697c <__malloc_unlock>
 8005e7c:	f104 000b 	add.w	r0, r4, #11
 8005e80:	1d23      	adds	r3, r4, #4
 8005e82:	f020 0007 	bic.w	r0, r0, #7
 8005e86:	1ac2      	subs	r2, r0, r3
 8005e88:	d0cc      	beq.n	8005e24 <_malloc_r+0x20>
 8005e8a:	1a1b      	subs	r3, r3, r0
 8005e8c:	50a3      	str	r3, [r4, r2]
 8005e8e:	e7c9      	b.n	8005e24 <_malloc_r+0x20>
 8005e90:	4622      	mov	r2, r4
 8005e92:	6864      	ldr	r4, [r4, #4]
 8005e94:	e7cc      	b.n	8005e30 <_malloc_r+0x2c>
 8005e96:	1cc4      	adds	r4, r0, #3
 8005e98:	f024 0403 	bic.w	r4, r4, #3
 8005e9c:	42a0      	cmp	r0, r4
 8005e9e:	d0e3      	beq.n	8005e68 <_malloc_r+0x64>
 8005ea0:	1a21      	subs	r1, r4, r0
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	f000 faf6 	bl	8006494 <_sbrk_r>
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d1dd      	bne.n	8005e68 <_malloc_r+0x64>
 8005eac:	e7cf      	b.n	8005e4e <_malloc_r+0x4a>
 8005eae:	bf00      	nop
 8005eb0:	20000770 	.word	0x20000770
 8005eb4:	20000774 	.word	0x20000774

08005eb8 <__sfputc_r>:
 8005eb8:	6893      	ldr	r3, [r2, #8]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	b410      	push	{r4}
 8005ec0:	6093      	str	r3, [r2, #8]
 8005ec2:	da08      	bge.n	8005ed6 <__sfputc_r+0x1e>
 8005ec4:	6994      	ldr	r4, [r2, #24]
 8005ec6:	42a3      	cmp	r3, r4
 8005ec8:	db01      	blt.n	8005ece <__sfputc_r+0x16>
 8005eca:	290a      	cmp	r1, #10
 8005ecc:	d103      	bne.n	8005ed6 <__sfputc_r+0x1e>
 8005ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ed2:	f000 bb33 	b.w	800653c <__swbuf_r>
 8005ed6:	6813      	ldr	r3, [r2, #0]
 8005ed8:	1c58      	adds	r0, r3, #1
 8005eda:	6010      	str	r0, [r2, #0]
 8005edc:	7019      	strb	r1, [r3, #0]
 8005ede:	4608      	mov	r0, r1
 8005ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <__sfputs_r>:
 8005ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee8:	4606      	mov	r6, r0
 8005eea:	460f      	mov	r7, r1
 8005eec:	4614      	mov	r4, r2
 8005eee:	18d5      	adds	r5, r2, r3
 8005ef0:	42ac      	cmp	r4, r5
 8005ef2:	d101      	bne.n	8005ef8 <__sfputs_r+0x12>
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	e007      	b.n	8005f08 <__sfputs_r+0x22>
 8005ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005efc:	463a      	mov	r2, r7
 8005efe:	4630      	mov	r0, r6
 8005f00:	f7ff ffda 	bl	8005eb8 <__sfputc_r>
 8005f04:	1c43      	adds	r3, r0, #1
 8005f06:	d1f3      	bne.n	8005ef0 <__sfputs_r+0xa>
 8005f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f0c <_vfiprintf_r>:
 8005f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f10:	460d      	mov	r5, r1
 8005f12:	b09d      	sub	sp, #116	; 0x74
 8005f14:	4614      	mov	r4, r2
 8005f16:	4698      	mov	r8, r3
 8005f18:	4606      	mov	r6, r0
 8005f1a:	b118      	cbz	r0, 8005f24 <_vfiprintf_r+0x18>
 8005f1c:	6983      	ldr	r3, [r0, #24]
 8005f1e:	b90b      	cbnz	r3, 8005f24 <_vfiprintf_r+0x18>
 8005f20:	f7ff fed0 	bl	8005cc4 <__sinit>
 8005f24:	4b89      	ldr	r3, [pc, #548]	; (800614c <_vfiprintf_r+0x240>)
 8005f26:	429d      	cmp	r5, r3
 8005f28:	d11b      	bne.n	8005f62 <_vfiprintf_r+0x56>
 8005f2a:	6875      	ldr	r5, [r6, #4]
 8005f2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f2e:	07d9      	lsls	r1, r3, #31
 8005f30:	d405      	bmi.n	8005f3e <_vfiprintf_r+0x32>
 8005f32:	89ab      	ldrh	r3, [r5, #12]
 8005f34:	059a      	lsls	r2, r3, #22
 8005f36:	d402      	bmi.n	8005f3e <_vfiprintf_r+0x32>
 8005f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f3a:	f7ff ff61 	bl	8005e00 <__retarget_lock_acquire_recursive>
 8005f3e:	89ab      	ldrh	r3, [r5, #12]
 8005f40:	071b      	lsls	r3, r3, #28
 8005f42:	d501      	bpl.n	8005f48 <_vfiprintf_r+0x3c>
 8005f44:	692b      	ldr	r3, [r5, #16]
 8005f46:	b9eb      	cbnz	r3, 8005f84 <_vfiprintf_r+0x78>
 8005f48:	4629      	mov	r1, r5
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	f000 fb5a 	bl	8006604 <__swsetup_r>
 8005f50:	b1c0      	cbz	r0, 8005f84 <_vfiprintf_r+0x78>
 8005f52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f54:	07dc      	lsls	r4, r3, #31
 8005f56:	d50e      	bpl.n	8005f76 <_vfiprintf_r+0x6a>
 8005f58:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5c:	b01d      	add	sp, #116	; 0x74
 8005f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f62:	4b7b      	ldr	r3, [pc, #492]	; (8006150 <_vfiprintf_r+0x244>)
 8005f64:	429d      	cmp	r5, r3
 8005f66:	d101      	bne.n	8005f6c <_vfiprintf_r+0x60>
 8005f68:	68b5      	ldr	r5, [r6, #8]
 8005f6a:	e7df      	b.n	8005f2c <_vfiprintf_r+0x20>
 8005f6c:	4b79      	ldr	r3, [pc, #484]	; (8006154 <_vfiprintf_r+0x248>)
 8005f6e:	429d      	cmp	r5, r3
 8005f70:	bf08      	it	eq
 8005f72:	68f5      	ldreq	r5, [r6, #12]
 8005f74:	e7da      	b.n	8005f2c <_vfiprintf_r+0x20>
 8005f76:	89ab      	ldrh	r3, [r5, #12]
 8005f78:	0598      	lsls	r0, r3, #22
 8005f7a:	d4ed      	bmi.n	8005f58 <_vfiprintf_r+0x4c>
 8005f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f7e:	f7ff ff40 	bl	8005e02 <__retarget_lock_release_recursive>
 8005f82:	e7e9      	b.n	8005f58 <_vfiprintf_r+0x4c>
 8005f84:	2300      	movs	r3, #0
 8005f86:	9309      	str	r3, [sp, #36]	; 0x24
 8005f88:	2320      	movs	r3, #32
 8005f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f92:	2330      	movs	r3, #48	; 0x30
 8005f94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006158 <_vfiprintf_r+0x24c>
 8005f98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f9c:	f04f 0901 	mov.w	r9, #1
 8005fa0:	4623      	mov	r3, r4
 8005fa2:	469a      	mov	sl, r3
 8005fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fa8:	b10a      	cbz	r2, 8005fae <_vfiprintf_r+0xa2>
 8005faa:	2a25      	cmp	r2, #37	; 0x25
 8005fac:	d1f9      	bne.n	8005fa2 <_vfiprintf_r+0x96>
 8005fae:	ebba 0b04 	subs.w	fp, sl, r4
 8005fb2:	d00b      	beq.n	8005fcc <_vfiprintf_r+0xc0>
 8005fb4:	465b      	mov	r3, fp
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	4629      	mov	r1, r5
 8005fba:	4630      	mov	r0, r6
 8005fbc:	f7ff ff93 	bl	8005ee6 <__sfputs_r>
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	f000 80aa 	beq.w	800611a <_vfiprintf_r+0x20e>
 8005fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fc8:	445a      	add	r2, fp
 8005fca:	9209      	str	r2, [sp, #36]	; 0x24
 8005fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 80a2 	beq.w	800611a <_vfiprintf_r+0x20e>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fe0:	f10a 0a01 	add.w	sl, sl, #1
 8005fe4:	9304      	str	r3, [sp, #16]
 8005fe6:	9307      	str	r3, [sp, #28]
 8005fe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fec:	931a      	str	r3, [sp, #104]	; 0x68
 8005fee:	4654      	mov	r4, sl
 8005ff0:	2205      	movs	r2, #5
 8005ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff6:	4858      	ldr	r0, [pc, #352]	; (8006158 <_vfiprintf_r+0x24c>)
 8005ff8:	f7fa f8fa 	bl	80001f0 <memchr>
 8005ffc:	9a04      	ldr	r2, [sp, #16]
 8005ffe:	b9d8      	cbnz	r0, 8006038 <_vfiprintf_r+0x12c>
 8006000:	06d1      	lsls	r1, r2, #27
 8006002:	bf44      	itt	mi
 8006004:	2320      	movmi	r3, #32
 8006006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800600a:	0713      	lsls	r3, r2, #28
 800600c:	bf44      	itt	mi
 800600e:	232b      	movmi	r3, #43	; 0x2b
 8006010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006014:	f89a 3000 	ldrb.w	r3, [sl]
 8006018:	2b2a      	cmp	r3, #42	; 0x2a
 800601a:	d015      	beq.n	8006048 <_vfiprintf_r+0x13c>
 800601c:	9a07      	ldr	r2, [sp, #28]
 800601e:	4654      	mov	r4, sl
 8006020:	2000      	movs	r0, #0
 8006022:	f04f 0c0a 	mov.w	ip, #10
 8006026:	4621      	mov	r1, r4
 8006028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800602c:	3b30      	subs	r3, #48	; 0x30
 800602e:	2b09      	cmp	r3, #9
 8006030:	d94e      	bls.n	80060d0 <_vfiprintf_r+0x1c4>
 8006032:	b1b0      	cbz	r0, 8006062 <_vfiprintf_r+0x156>
 8006034:	9207      	str	r2, [sp, #28]
 8006036:	e014      	b.n	8006062 <_vfiprintf_r+0x156>
 8006038:	eba0 0308 	sub.w	r3, r0, r8
 800603c:	fa09 f303 	lsl.w	r3, r9, r3
 8006040:	4313      	orrs	r3, r2
 8006042:	9304      	str	r3, [sp, #16]
 8006044:	46a2      	mov	sl, r4
 8006046:	e7d2      	b.n	8005fee <_vfiprintf_r+0xe2>
 8006048:	9b03      	ldr	r3, [sp, #12]
 800604a:	1d19      	adds	r1, r3, #4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	9103      	str	r1, [sp, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	bfbb      	ittet	lt
 8006054:	425b      	neglt	r3, r3
 8006056:	f042 0202 	orrlt.w	r2, r2, #2
 800605a:	9307      	strge	r3, [sp, #28]
 800605c:	9307      	strlt	r3, [sp, #28]
 800605e:	bfb8      	it	lt
 8006060:	9204      	strlt	r2, [sp, #16]
 8006062:	7823      	ldrb	r3, [r4, #0]
 8006064:	2b2e      	cmp	r3, #46	; 0x2e
 8006066:	d10c      	bne.n	8006082 <_vfiprintf_r+0x176>
 8006068:	7863      	ldrb	r3, [r4, #1]
 800606a:	2b2a      	cmp	r3, #42	; 0x2a
 800606c:	d135      	bne.n	80060da <_vfiprintf_r+0x1ce>
 800606e:	9b03      	ldr	r3, [sp, #12]
 8006070:	1d1a      	adds	r2, r3, #4
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	9203      	str	r2, [sp, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	bfb8      	it	lt
 800607a:	f04f 33ff 	movlt.w	r3, #4294967295
 800607e:	3402      	adds	r4, #2
 8006080:	9305      	str	r3, [sp, #20]
 8006082:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006168 <_vfiprintf_r+0x25c>
 8006086:	7821      	ldrb	r1, [r4, #0]
 8006088:	2203      	movs	r2, #3
 800608a:	4650      	mov	r0, sl
 800608c:	f7fa f8b0 	bl	80001f0 <memchr>
 8006090:	b140      	cbz	r0, 80060a4 <_vfiprintf_r+0x198>
 8006092:	2340      	movs	r3, #64	; 0x40
 8006094:	eba0 000a 	sub.w	r0, r0, sl
 8006098:	fa03 f000 	lsl.w	r0, r3, r0
 800609c:	9b04      	ldr	r3, [sp, #16]
 800609e:	4303      	orrs	r3, r0
 80060a0:	3401      	adds	r4, #1
 80060a2:	9304      	str	r3, [sp, #16]
 80060a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060a8:	482c      	ldr	r0, [pc, #176]	; (800615c <_vfiprintf_r+0x250>)
 80060aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060ae:	2206      	movs	r2, #6
 80060b0:	f7fa f89e 	bl	80001f0 <memchr>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	d03f      	beq.n	8006138 <_vfiprintf_r+0x22c>
 80060b8:	4b29      	ldr	r3, [pc, #164]	; (8006160 <_vfiprintf_r+0x254>)
 80060ba:	bb1b      	cbnz	r3, 8006104 <_vfiprintf_r+0x1f8>
 80060bc:	9b03      	ldr	r3, [sp, #12]
 80060be:	3307      	adds	r3, #7
 80060c0:	f023 0307 	bic.w	r3, r3, #7
 80060c4:	3308      	adds	r3, #8
 80060c6:	9303      	str	r3, [sp, #12]
 80060c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ca:	443b      	add	r3, r7
 80060cc:	9309      	str	r3, [sp, #36]	; 0x24
 80060ce:	e767      	b.n	8005fa0 <_vfiprintf_r+0x94>
 80060d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80060d4:	460c      	mov	r4, r1
 80060d6:	2001      	movs	r0, #1
 80060d8:	e7a5      	b.n	8006026 <_vfiprintf_r+0x11a>
 80060da:	2300      	movs	r3, #0
 80060dc:	3401      	adds	r4, #1
 80060de:	9305      	str	r3, [sp, #20]
 80060e0:	4619      	mov	r1, r3
 80060e2:	f04f 0c0a 	mov.w	ip, #10
 80060e6:	4620      	mov	r0, r4
 80060e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060ec:	3a30      	subs	r2, #48	; 0x30
 80060ee:	2a09      	cmp	r2, #9
 80060f0:	d903      	bls.n	80060fa <_vfiprintf_r+0x1ee>
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d0c5      	beq.n	8006082 <_vfiprintf_r+0x176>
 80060f6:	9105      	str	r1, [sp, #20]
 80060f8:	e7c3      	b.n	8006082 <_vfiprintf_r+0x176>
 80060fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80060fe:	4604      	mov	r4, r0
 8006100:	2301      	movs	r3, #1
 8006102:	e7f0      	b.n	80060e6 <_vfiprintf_r+0x1da>
 8006104:	ab03      	add	r3, sp, #12
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	462a      	mov	r2, r5
 800610a:	4b16      	ldr	r3, [pc, #88]	; (8006164 <_vfiprintf_r+0x258>)
 800610c:	a904      	add	r1, sp, #16
 800610e:	4630      	mov	r0, r6
 8006110:	f3af 8000 	nop.w
 8006114:	4607      	mov	r7, r0
 8006116:	1c78      	adds	r0, r7, #1
 8006118:	d1d6      	bne.n	80060c8 <_vfiprintf_r+0x1bc>
 800611a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800611c:	07d9      	lsls	r1, r3, #31
 800611e:	d405      	bmi.n	800612c <_vfiprintf_r+0x220>
 8006120:	89ab      	ldrh	r3, [r5, #12]
 8006122:	059a      	lsls	r2, r3, #22
 8006124:	d402      	bmi.n	800612c <_vfiprintf_r+0x220>
 8006126:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006128:	f7ff fe6b 	bl	8005e02 <__retarget_lock_release_recursive>
 800612c:	89ab      	ldrh	r3, [r5, #12]
 800612e:	065b      	lsls	r3, r3, #25
 8006130:	f53f af12 	bmi.w	8005f58 <_vfiprintf_r+0x4c>
 8006134:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006136:	e711      	b.n	8005f5c <_vfiprintf_r+0x50>
 8006138:	ab03      	add	r3, sp, #12
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	462a      	mov	r2, r5
 800613e:	4b09      	ldr	r3, [pc, #36]	; (8006164 <_vfiprintf_r+0x258>)
 8006140:	a904      	add	r1, sp, #16
 8006142:	4630      	mov	r0, r6
 8006144:	f000 f880 	bl	8006248 <_printf_i>
 8006148:	e7e4      	b.n	8006114 <_vfiprintf_r+0x208>
 800614a:	bf00      	nop
 800614c:	08006de8 	.word	0x08006de8
 8006150:	08006e08 	.word	0x08006e08
 8006154:	08006dc8 	.word	0x08006dc8
 8006158:	08006e28 	.word	0x08006e28
 800615c:	08006e32 	.word	0x08006e32
 8006160:	00000000 	.word	0x00000000
 8006164:	08005ee7 	.word	0x08005ee7
 8006168:	08006e2e 	.word	0x08006e2e

0800616c <_printf_common>:
 800616c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006170:	4616      	mov	r6, r2
 8006172:	4699      	mov	r9, r3
 8006174:	688a      	ldr	r2, [r1, #8]
 8006176:	690b      	ldr	r3, [r1, #16]
 8006178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800617c:	4293      	cmp	r3, r2
 800617e:	bfb8      	it	lt
 8006180:	4613      	movlt	r3, r2
 8006182:	6033      	str	r3, [r6, #0]
 8006184:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006188:	4607      	mov	r7, r0
 800618a:	460c      	mov	r4, r1
 800618c:	b10a      	cbz	r2, 8006192 <_printf_common+0x26>
 800618e:	3301      	adds	r3, #1
 8006190:	6033      	str	r3, [r6, #0]
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	0699      	lsls	r1, r3, #26
 8006196:	bf42      	ittt	mi
 8006198:	6833      	ldrmi	r3, [r6, #0]
 800619a:	3302      	addmi	r3, #2
 800619c:	6033      	strmi	r3, [r6, #0]
 800619e:	6825      	ldr	r5, [r4, #0]
 80061a0:	f015 0506 	ands.w	r5, r5, #6
 80061a4:	d106      	bne.n	80061b4 <_printf_common+0x48>
 80061a6:	f104 0a19 	add.w	sl, r4, #25
 80061aa:	68e3      	ldr	r3, [r4, #12]
 80061ac:	6832      	ldr	r2, [r6, #0]
 80061ae:	1a9b      	subs	r3, r3, r2
 80061b0:	42ab      	cmp	r3, r5
 80061b2:	dc26      	bgt.n	8006202 <_printf_common+0x96>
 80061b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061b8:	1e13      	subs	r3, r2, #0
 80061ba:	6822      	ldr	r2, [r4, #0]
 80061bc:	bf18      	it	ne
 80061be:	2301      	movne	r3, #1
 80061c0:	0692      	lsls	r2, r2, #26
 80061c2:	d42b      	bmi.n	800621c <_printf_common+0xb0>
 80061c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061c8:	4649      	mov	r1, r9
 80061ca:	4638      	mov	r0, r7
 80061cc:	47c0      	blx	r8
 80061ce:	3001      	adds	r0, #1
 80061d0:	d01e      	beq.n	8006210 <_printf_common+0xa4>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	68e5      	ldr	r5, [r4, #12]
 80061d6:	6832      	ldr	r2, [r6, #0]
 80061d8:	f003 0306 	and.w	r3, r3, #6
 80061dc:	2b04      	cmp	r3, #4
 80061de:	bf08      	it	eq
 80061e0:	1aad      	subeq	r5, r5, r2
 80061e2:	68a3      	ldr	r3, [r4, #8]
 80061e4:	6922      	ldr	r2, [r4, #16]
 80061e6:	bf0c      	ite	eq
 80061e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061ec:	2500      	movne	r5, #0
 80061ee:	4293      	cmp	r3, r2
 80061f0:	bfc4      	itt	gt
 80061f2:	1a9b      	subgt	r3, r3, r2
 80061f4:	18ed      	addgt	r5, r5, r3
 80061f6:	2600      	movs	r6, #0
 80061f8:	341a      	adds	r4, #26
 80061fa:	42b5      	cmp	r5, r6
 80061fc:	d11a      	bne.n	8006234 <_printf_common+0xc8>
 80061fe:	2000      	movs	r0, #0
 8006200:	e008      	b.n	8006214 <_printf_common+0xa8>
 8006202:	2301      	movs	r3, #1
 8006204:	4652      	mov	r2, sl
 8006206:	4649      	mov	r1, r9
 8006208:	4638      	mov	r0, r7
 800620a:	47c0      	blx	r8
 800620c:	3001      	adds	r0, #1
 800620e:	d103      	bne.n	8006218 <_printf_common+0xac>
 8006210:	f04f 30ff 	mov.w	r0, #4294967295
 8006214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006218:	3501      	adds	r5, #1
 800621a:	e7c6      	b.n	80061aa <_printf_common+0x3e>
 800621c:	18e1      	adds	r1, r4, r3
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	2030      	movs	r0, #48	; 0x30
 8006222:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006226:	4422      	add	r2, r4
 8006228:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800622c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006230:	3302      	adds	r3, #2
 8006232:	e7c7      	b.n	80061c4 <_printf_common+0x58>
 8006234:	2301      	movs	r3, #1
 8006236:	4622      	mov	r2, r4
 8006238:	4649      	mov	r1, r9
 800623a:	4638      	mov	r0, r7
 800623c:	47c0      	blx	r8
 800623e:	3001      	adds	r0, #1
 8006240:	d0e6      	beq.n	8006210 <_printf_common+0xa4>
 8006242:	3601      	adds	r6, #1
 8006244:	e7d9      	b.n	80061fa <_printf_common+0x8e>
	...

08006248 <_printf_i>:
 8006248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800624c:	460c      	mov	r4, r1
 800624e:	4691      	mov	r9, r2
 8006250:	7e27      	ldrb	r7, [r4, #24]
 8006252:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006254:	2f78      	cmp	r7, #120	; 0x78
 8006256:	4680      	mov	r8, r0
 8006258:	469a      	mov	sl, r3
 800625a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800625e:	d807      	bhi.n	8006270 <_printf_i+0x28>
 8006260:	2f62      	cmp	r7, #98	; 0x62
 8006262:	d80a      	bhi.n	800627a <_printf_i+0x32>
 8006264:	2f00      	cmp	r7, #0
 8006266:	f000 80d8 	beq.w	800641a <_printf_i+0x1d2>
 800626a:	2f58      	cmp	r7, #88	; 0x58
 800626c:	f000 80a3 	beq.w	80063b6 <_printf_i+0x16e>
 8006270:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006278:	e03a      	b.n	80062f0 <_printf_i+0xa8>
 800627a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800627e:	2b15      	cmp	r3, #21
 8006280:	d8f6      	bhi.n	8006270 <_printf_i+0x28>
 8006282:	a001      	add	r0, pc, #4	; (adr r0, 8006288 <_printf_i+0x40>)
 8006284:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006288:	080062e1 	.word	0x080062e1
 800628c:	080062f5 	.word	0x080062f5
 8006290:	08006271 	.word	0x08006271
 8006294:	08006271 	.word	0x08006271
 8006298:	08006271 	.word	0x08006271
 800629c:	08006271 	.word	0x08006271
 80062a0:	080062f5 	.word	0x080062f5
 80062a4:	08006271 	.word	0x08006271
 80062a8:	08006271 	.word	0x08006271
 80062ac:	08006271 	.word	0x08006271
 80062b0:	08006271 	.word	0x08006271
 80062b4:	08006401 	.word	0x08006401
 80062b8:	08006325 	.word	0x08006325
 80062bc:	080063e3 	.word	0x080063e3
 80062c0:	08006271 	.word	0x08006271
 80062c4:	08006271 	.word	0x08006271
 80062c8:	08006423 	.word	0x08006423
 80062cc:	08006271 	.word	0x08006271
 80062d0:	08006325 	.word	0x08006325
 80062d4:	08006271 	.word	0x08006271
 80062d8:	08006271 	.word	0x08006271
 80062dc:	080063eb 	.word	0x080063eb
 80062e0:	680b      	ldr	r3, [r1, #0]
 80062e2:	1d1a      	adds	r2, r3, #4
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	600a      	str	r2, [r1, #0]
 80062e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80062ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062f0:	2301      	movs	r3, #1
 80062f2:	e0a3      	b.n	800643c <_printf_i+0x1f4>
 80062f4:	6825      	ldr	r5, [r4, #0]
 80062f6:	6808      	ldr	r0, [r1, #0]
 80062f8:	062e      	lsls	r6, r5, #24
 80062fa:	f100 0304 	add.w	r3, r0, #4
 80062fe:	d50a      	bpl.n	8006316 <_printf_i+0xce>
 8006300:	6805      	ldr	r5, [r0, #0]
 8006302:	600b      	str	r3, [r1, #0]
 8006304:	2d00      	cmp	r5, #0
 8006306:	da03      	bge.n	8006310 <_printf_i+0xc8>
 8006308:	232d      	movs	r3, #45	; 0x2d
 800630a:	426d      	negs	r5, r5
 800630c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006310:	485e      	ldr	r0, [pc, #376]	; (800648c <_printf_i+0x244>)
 8006312:	230a      	movs	r3, #10
 8006314:	e019      	b.n	800634a <_printf_i+0x102>
 8006316:	f015 0f40 	tst.w	r5, #64	; 0x40
 800631a:	6805      	ldr	r5, [r0, #0]
 800631c:	600b      	str	r3, [r1, #0]
 800631e:	bf18      	it	ne
 8006320:	b22d      	sxthne	r5, r5
 8006322:	e7ef      	b.n	8006304 <_printf_i+0xbc>
 8006324:	680b      	ldr	r3, [r1, #0]
 8006326:	6825      	ldr	r5, [r4, #0]
 8006328:	1d18      	adds	r0, r3, #4
 800632a:	6008      	str	r0, [r1, #0]
 800632c:	0628      	lsls	r0, r5, #24
 800632e:	d501      	bpl.n	8006334 <_printf_i+0xec>
 8006330:	681d      	ldr	r5, [r3, #0]
 8006332:	e002      	b.n	800633a <_printf_i+0xf2>
 8006334:	0669      	lsls	r1, r5, #25
 8006336:	d5fb      	bpl.n	8006330 <_printf_i+0xe8>
 8006338:	881d      	ldrh	r5, [r3, #0]
 800633a:	4854      	ldr	r0, [pc, #336]	; (800648c <_printf_i+0x244>)
 800633c:	2f6f      	cmp	r7, #111	; 0x6f
 800633e:	bf0c      	ite	eq
 8006340:	2308      	moveq	r3, #8
 8006342:	230a      	movne	r3, #10
 8006344:	2100      	movs	r1, #0
 8006346:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800634a:	6866      	ldr	r6, [r4, #4]
 800634c:	60a6      	str	r6, [r4, #8]
 800634e:	2e00      	cmp	r6, #0
 8006350:	bfa2      	ittt	ge
 8006352:	6821      	ldrge	r1, [r4, #0]
 8006354:	f021 0104 	bicge.w	r1, r1, #4
 8006358:	6021      	strge	r1, [r4, #0]
 800635a:	b90d      	cbnz	r5, 8006360 <_printf_i+0x118>
 800635c:	2e00      	cmp	r6, #0
 800635e:	d04d      	beq.n	80063fc <_printf_i+0x1b4>
 8006360:	4616      	mov	r6, r2
 8006362:	fbb5 f1f3 	udiv	r1, r5, r3
 8006366:	fb03 5711 	mls	r7, r3, r1, r5
 800636a:	5dc7      	ldrb	r7, [r0, r7]
 800636c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006370:	462f      	mov	r7, r5
 8006372:	42bb      	cmp	r3, r7
 8006374:	460d      	mov	r5, r1
 8006376:	d9f4      	bls.n	8006362 <_printf_i+0x11a>
 8006378:	2b08      	cmp	r3, #8
 800637a:	d10b      	bne.n	8006394 <_printf_i+0x14c>
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	07df      	lsls	r7, r3, #31
 8006380:	d508      	bpl.n	8006394 <_printf_i+0x14c>
 8006382:	6923      	ldr	r3, [r4, #16]
 8006384:	6861      	ldr	r1, [r4, #4]
 8006386:	4299      	cmp	r1, r3
 8006388:	bfde      	ittt	le
 800638a:	2330      	movle	r3, #48	; 0x30
 800638c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006390:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006394:	1b92      	subs	r2, r2, r6
 8006396:	6122      	str	r2, [r4, #16]
 8006398:	f8cd a000 	str.w	sl, [sp]
 800639c:	464b      	mov	r3, r9
 800639e:	aa03      	add	r2, sp, #12
 80063a0:	4621      	mov	r1, r4
 80063a2:	4640      	mov	r0, r8
 80063a4:	f7ff fee2 	bl	800616c <_printf_common>
 80063a8:	3001      	adds	r0, #1
 80063aa:	d14c      	bne.n	8006446 <_printf_i+0x1fe>
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295
 80063b0:	b004      	add	sp, #16
 80063b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b6:	4835      	ldr	r0, [pc, #212]	; (800648c <_printf_i+0x244>)
 80063b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	680e      	ldr	r6, [r1, #0]
 80063c0:	061f      	lsls	r7, r3, #24
 80063c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80063c6:	600e      	str	r6, [r1, #0]
 80063c8:	d514      	bpl.n	80063f4 <_printf_i+0x1ac>
 80063ca:	07d9      	lsls	r1, r3, #31
 80063cc:	bf44      	itt	mi
 80063ce:	f043 0320 	orrmi.w	r3, r3, #32
 80063d2:	6023      	strmi	r3, [r4, #0]
 80063d4:	b91d      	cbnz	r5, 80063de <_printf_i+0x196>
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	f023 0320 	bic.w	r3, r3, #32
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	2310      	movs	r3, #16
 80063e0:	e7b0      	b.n	8006344 <_printf_i+0xfc>
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	f043 0320 	orr.w	r3, r3, #32
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	2378      	movs	r3, #120	; 0x78
 80063ec:	4828      	ldr	r0, [pc, #160]	; (8006490 <_printf_i+0x248>)
 80063ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063f2:	e7e3      	b.n	80063bc <_printf_i+0x174>
 80063f4:	065e      	lsls	r6, r3, #25
 80063f6:	bf48      	it	mi
 80063f8:	b2ad      	uxthmi	r5, r5
 80063fa:	e7e6      	b.n	80063ca <_printf_i+0x182>
 80063fc:	4616      	mov	r6, r2
 80063fe:	e7bb      	b.n	8006378 <_printf_i+0x130>
 8006400:	680b      	ldr	r3, [r1, #0]
 8006402:	6826      	ldr	r6, [r4, #0]
 8006404:	6960      	ldr	r0, [r4, #20]
 8006406:	1d1d      	adds	r5, r3, #4
 8006408:	600d      	str	r5, [r1, #0]
 800640a:	0635      	lsls	r5, r6, #24
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	d501      	bpl.n	8006414 <_printf_i+0x1cc>
 8006410:	6018      	str	r0, [r3, #0]
 8006412:	e002      	b.n	800641a <_printf_i+0x1d2>
 8006414:	0671      	lsls	r1, r6, #25
 8006416:	d5fb      	bpl.n	8006410 <_printf_i+0x1c8>
 8006418:	8018      	strh	r0, [r3, #0]
 800641a:	2300      	movs	r3, #0
 800641c:	6123      	str	r3, [r4, #16]
 800641e:	4616      	mov	r6, r2
 8006420:	e7ba      	b.n	8006398 <_printf_i+0x150>
 8006422:	680b      	ldr	r3, [r1, #0]
 8006424:	1d1a      	adds	r2, r3, #4
 8006426:	600a      	str	r2, [r1, #0]
 8006428:	681e      	ldr	r6, [r3, #0]
 800642a:	6862      	ldr	r2, [r4, #4]
 800642c:	2100      	movs	r1, #0
 800642e:	4630      	mov	r0, r6
 8006430:	f7f9 fede 	bl	80001f0 <memchr>
 8006434:	b108      	cbz	r0, 800643a <_printf_i+0x1f2>
 8006436:	1b80      	subs	r0, r0, r6
 8006438:	6060      	str	r0, [r4, #4]
 800643a:	6863      	ldr	r3, [r4, #4]
 800643c:	6123      	str	r3, [r4, #16]
 800643e:	2300      	movs	r3, #0
 8006440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006444:	e7a8      	b.n	8006398 <_printf_i+0x150>
 8006446:	6923      	ldr	r3, [r4, #16]
 8006448:	4632      	mov	r2, r6
 800644a:	4649      	mov	r1, r9
 800644c:	4640      	mov	r0, r8
 800644e:	47d0      	blx	sl
 8006450:	3001      	adds	r0, #1
 8006452:	d0ab      	beq.n	80063ac <_printf_i+0x164>
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	079b      	lsls	r3, r3, #30
 8006458:	d413      	bmi.n	8006482 <_printf_i+0x23a>
 800645a:	68e0      	ldr	r0, [r4, #12]
 800645c:	9b03      	ldr	r3, [sp, #12]
 800645e:	4298      	cmp	r0, r3
 8006460:	bfb8      	it	lt
 8006462:	4618      	movlt	r0, r3
 8006464:	e7a4      	b.n	80063b0 <_printf_i+0x168>
 8006466:	2301      	movs	r3, #1
 8006468:	4632      	mov	r2, r6
 800646a:	4649      	mov	r1, r9
 800646c:	4640      	mov	r0, r8
 800646e:	47d0      	blx	sl
 8006470:	3001      	adds	r0, #1
 8006472:	d09b      	beq.n	80063ac <_printf_i+0x164>
 8006474:	3501      	adds	r5, #1
 8006476:	68e3      	ldr	r3, [r4, #12]
 8006478:	9903      	ldr	r1, [sp, #12]
 800647a:	1a5b      	subs	r3, r3, r1
 800647c:	42ab      	cmp	r3, r5
 800647e:	dcf2      	bgt.n	8006466 <_printf_i+0x21e>
 8006480:	e7eb      	b.n	800645a <_printf_i+0x212>
 8006482:	2500      	movs	r5, #0
 8006484:	f104 0619 	add.w	r6, r4, #25
 8006488:	e7f5      	b.n	8006476 <_printf_i+0x22e>
 800648a:	bf00      	nop
 800648c:	08006e39 	.word	0x08006e39
 8006490:	08006e4a 	.word	0x08006e4a

08006494 <_sbrk_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4d06      	ldr	r5, [pc, #24]	; (80064b0 <_sbrk_r+0x1c>)
 8006498:	2300      	movs	r3, #0
 800649a:	4604      	mov	r4, r0
 800649c:	4608      	mov	r0, r1
 800649e:	602b      	str	r3, [r5, #0]
 80064a0:	f7fb f838 	bl	8001514 <_sbrk>
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	d102      	bne.n	80064ae <_sbrk_r+0x1a>
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	b103      	cbz	r3, 80064ae <_sbrk_r+0x1a>
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	bd38      	pop	{r3, r4, r5, pc}
 80064b0:	2000085c 	.word	0x2000085c

080064b4 <__sread>:
 80064b4:	b510      	push	{r4, lr}
 80064b6:	460c      	mov	r4, r1
 80064b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064bc:	f000 fab4 	bl	8006a28 <_read_r>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	bfab      	itete	ge
 80064c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064c6:	89a3      	ldrhlt	r3, [r4, #12]
 80064c8:	181b      	addge	r3, r3, r0
 80064ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064ce:	bfac      	ite	ge
 80064d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80064d2:	81a3      	strhlt	r3, [r4, #12]
 80064d4:	bd10      	pop	{r4, pc}

080064d6 <__swrite>:
 80064d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064da:	461f      	mov	r7, r3
 80064dc:	898b      	ldrh	r3, [r1, #12]
 80064de:	05db      	lsls	r3, r3, #23
 80064e0:	4605      	mov	r5, r0
 80064e2:	460c      	mov	r4, r1
 80064e4:	4616      	mov	r6, r2
 80064e6:	d505      	bpl.n	80064f4 <__swrite+0x1e>
 80064e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ec:	2302      	movs	r3, #2
 80064ee:	2200      	movs	r2, #0
 80064f0:	f000 f9c8 	bl	8006884 <_lseek_r>
 80064f4:	89a3      	ldrh	r3, [r4, #12]
 80064f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064fe:	81a3      	strh	r3, [r4, #12]
 8006500:	4632      	mov	r2, r6
 8006502:	463b      	mov	r3, r7
 8006504:	4628      	mov	r0, r5
 8006506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800650a:	f000 b869 	b.w	80065e0 <_write_r>

0800650e <__sseek>:
 800650e:	b510      	push	{r4, lr}
 8006510:	460c      	mov	r4, r1
 8006512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006516:	f000 f9b5 	bl	8006884 <_lseek_r>
 800651a:	1c43      	adds	r3, r0, #1
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	bf15      	itete	ne
 8006520:	6560      	strne	r0, [r4, #84]	; 0x54
 8006522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800652a:	81a3      	strheq	r3, [r4, #12]
 800652c:	bf18      	it	ne
 800652e:	81a3      	strhne	r3, [r4, #12]
 8006530:	bd10      	pop	{r4, pc}

08006532 <__sclose>:
 8006532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006536:	f000 b8d3 	b.w	80066e0 <_close_r>
	...

0800653c <__swbuf_r>:
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	460e      	mov	r6, r1
 8006540:	4614      	mov	r4, r2
 8006542:	4605      	mov	r5, r0
 8006544:	b118      	cbz	r0, 800654e <__swbuf_r+0x12>
 8006546:	6983      	ldr	r3, [r0, #24]
 8006548:	b90b      	cbnz	r3, 800654e <__swbuf_r+0x12>
 800654a:	f7ff fbbb 	bl	8005cc4 <__sinit>
 800654e:	4b21      	ldr	r3, [pc, #132]	; (80065d4 <__swbuf_r+0x98>)
 8006550:	429c      	cmp	r4, r3
 8006552:	d12b      	bne.n	80065ac <__swbuf_r+0x70>
 8006554:	686c      	ldr	r4, [r5, #4]
 8006556:	69a3      	ldr	r3, [r4, #24]
 8006558:	60a3      	str	r3, [r4, #8]
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	071a      	lsls	r2, r3, #28
 800655e:	d52f      	bpl.n	80065c0 <__swbuf_r+0x84>
 8006560:	6923      	ldr	r3, [r4, #16]
 8006562:	b36b      	cbz	r3, 80065c0 <__swbuf_r+0x84>
 8006564:	6923      	ldr	r3, [r4, #16]
 8006566:	6820      	ldr	r0, [r4, #0]
 8006568:	1ac0      	subs	r0, r0, r3
 800656a:	6963      	ldr	r3, [r4, #20]
 800656c:	b2f6      	uxtb	r6, r6
 800656e:	4283      	cmp	r3, r0
 8006570:	4637      	mov	r7, r6
 8006572:	dc04      	bgt.n	800657e <__swbuf_r+0x42>
 8006574:	4621      	mov	r1, r4
 8006576:	4628      	mov	r0, r5
 8006578:	f000 f948 	bl	800680c <_fflush_r>
 800657c:	bb30      	cbnz	r0, 80065cc <__swbuf_r+0x90>
 800657e:	68a3      	ldr	r3, [r4, #8]
 8006580:	3b01      	subs	r3, #1
 8006582:	60a3      	str	r3, [r4, #8]
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	6022      	str	r2, [r4, #0]
 800658a:	701e      	strb	r6, [r3, #0]
 800658c:	6963      	ldr	r3, [r4, #20]
 800658e:	3001      	adds	r0, #1
 8006590:	4283      	cmp	r3, r0
 8006592:	d004      	beq.n	800659e <__swbuf_r+0x62>
 8006594:	89a3      	ldrh	r3, [r4, #12]
 8006596:	07db      	lsls	r3, r3, #31
 8006598:	d506      	bpl.n	80065a8 <__swbuf_r+0x6c>
 800659a:	2e0a      	cmp	r6, #10
 800659c:	d104      	bne.n	80065a8 <__swbuf_r+0x6c>
 800659e:	4621      	mov	r1, r4
 80065a0:	4628      	mov	r0, r5
 80065a2:	f000 f933 	bl	800680c <_fflush_r>
 80065a6:	b988      	cbnz	r0, 80065cc <__swbuf_r+0x90>
 80065a8:	4638      	mov	r0, r7
 80065aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065ac:	4b0a      	ldr	r3, [pc, #40]	; (80065d8 <__swbuf_r+0x9c>)
 80065ae:	429c      	cmp	r4, r3
 80065b0:	d101      	bne.n	80065b6 <__swbuf_r+0x7a>
 80065b2:	68ac      	ldr	r4, [r5, #8]
 80065b4:	e7cf      	b.n	8006556 <__swbuf_r+0x1a>
 80065b6:	4b09      	ldr	r3, [pc, #36]	; (80065dc <__swbuf_r+0xa0>)
 80065b8:	429c      	cmp	r4, r3
 80065ba:	bf08      	it	eq
 80065bc:	68ec      	ldreq	r4, [r5, #12]
 80065be:	e7ca      	b.n	8006556 <__swbuf_r+0x1a>
 80065c0:	4621      	mov	r1, r4
 80065c2:	4628      	mov	r0, r5
 80065c4:	f000 f81e 	bl	8006604 <__swsetup_r>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d0cb      	beq.n	8006564 <__swbuf_r+0x28>
 80065cc:	f04f 37ff 	mov.w	r7, #4294967295
 80065d0:	e7ea      	b.n	80065a8 <__swbuf_r+0x6c>
 80065d2:	bf00      	nop
 80065d4:	08006de8 	.word	0x08006de8
 80065d8:	08006e08 	.word	0x08006e08
 80065dc:	08006dc8 	.word	0x08006dc8

080065e0 <_write_r>:
 80065e0:	b538      	push	{r3, r4, r5, lr}
 80065e2:	4d07      	ldr	r5, [pc, #28]	; (8006600 <_write_r+0x20>)
 80065e4:	4604      	mov	r4, r0
 80065e6:	4608      	mov	r0, r1
 80065e8:	4611      	mov	r1, r2
 80065ea:	2200      	movs	r2, #0
 80065ec:	602a      	str	r2, [r5, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	f7fa ff3f 	bl	8001472 <_write>
 80065f4:	1c43      	adds	r3, r0, #1
 80065f6:	d102      	bne.n	80065fe <_write_r+0x1e>
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	b103      	cbz	r3, 80065fe <_write_r+0x1e>
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	bd38      	pop	{r3, r4, r5, pc}
 8006600:	2000085c 	.word	0x2000085c

08006604 <__swsetup_r>:
 8006604:	4b32      	ldr	r3, [pc, #200]	; (80066d0 <__swsetup_r+0xcc>)
 8006606:	b570      	push	{r4, r5, r6, lr}
 8006608:	681d      	ldr	r5, [r3, #0]
 800660a:	4606      	mov	r6, r0
 800660c:	460c      	mov	r4, r1
 800660e:	b125      	cbz	r5, 800661a <__swsetup_r+0x16>
 8006610:	69ab      	ldr	r3, [r5, #24]
 8006612:	b913      	cbnz	r3, 800661a <__swsetup_r+0x16>
 8006614:	4628      	mov	r0, r5
 8006616:	f7ff fb55 	bl	8005cc4 <__sinit>
 800661a:	4b2e      	ldr	r3, [pc, #184]	; (80066d4 <__swsetup_r+0xd0>)
 800661c:	429c      	cmp	r4, r3
 800661e:	d10f      	bne.n	8006640 <__swsetup_r+0x3c>
 8006620:	686c      	ldr	r4, [r5, #4]
 8006622:	89a3      	ldrh	r3, [r4, #12]
 8006624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006628:	0719      	lsls	r1, r3, #28
 800662a:	d42c      	bmi.n	8006686 <__swsetup_r+0x82>
 800662c:	06dd      	lsls	r5, r3, #27
 800662e:	d411      	bmi.n	8006654 <__swsetup_r+0x50>
 8006630:	2309      	movs	r3, #9
 8006632:	6033      	str	r3, [r6, #0]
 8006634:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006638:	81a3      	strh	r3, [r4, #12]
 800663a:	f04f 30ff 	mov.w	r0, #4294967295
 800663e:	e03e      	b.n	80066be <__swsetup_r+0xba>
 8006640:	4b25      	ldr	r3, [pc, #148]	; (80066d8 <__swsetup_r+0xd4>)
 8006642:	429c      	cmp	r4, r3
 8006644:	d101      	bne.n	800664a <__swsetup_r+0x46>
 8006646:	68ac      	ldr	r4, [r5, #8]
 8006648:	e7eb      	b.n	8006622 <__swsetup_r+0x1e>
 800664a:	4b24      	ldr	r3, [pc, #144]	; (80066dc <__swsetup_r+0xd8>)
 800664c:	429c      	cmp	r4, r3
 800664e:	bf08      	it	eq
 8006650:	68ec      	ldreq	r4, [r5, #12]
 8006652:	e7e6      	b.n	8006622 <__swsetup_r+0x1e>
 8006654:	0758      	lsls	r0, r3, #29
 8006656:	d512      	bpl.n	800667e <__swsetup_r+0x7a>
 8006658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800665a:	b141      	cbz	r1, 800666e <__swsetup_r+0x6a>
 800665c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006660:	4299      	cmp	r1, r3
 8006662:	d002      	beq.n	800666a <__swsetup_r+0x66>
 8006664:	4630      	mov	r0, r6
 8006666:	f000 f98f 	bl	8006988 <_free_r>
 800666a:	2300      	movs	r3, #0
 800666c:	6363      	str	r3, [r4, #52]	; 0x34
 800666e:	89a3      	ldrh	r3, [r4, #12]
 8006670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006674:	81a3      	strh	r3, [r4, #12]
 8006676:	2300      	movs	r3, #0
 8006678:	6063      	str	r3, [r4, #4]
 800667a:	6923      	ldr	r3, [r4, #16]
 800667c:	6023      	str	r3, [r4, #0]
 800667e:	89a3      	ldrh	r3, [r4, #12]
 8006680:	f043 0308 	orr.w	r3, r3, #8
 8006684:	81a3      	strh	r3, [r4, #12]
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	b94b      	cbnz	r3, 800669e <__swsetup_r+0x9a>
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006694:	d003      	beq.n	800669e <__swsetup_r+0x9a>
 8006696:	4621      	mov	r1, r4
 8006698:	4630      	mov	r0, r6
 800669a:	f000 f929 	bl	80068f0 <__smakebuf_r>
 800669e:	89a0      	ldrh	r0, [r4, #12]
 80066a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066a4:	f010 0301 	ands.w	r3, r0, #1
 80066a8:	d00a      	beq.n	80066c0 <__swsetup_r+0xbc>
 80066aa:	2300      	movs	r3, #0
 80066ac:	60a3      	str	r3, [r4, #8]
 80066ae:	6963      	ldr	r3, [r4, #20]
 80066b0:	425b      	negs	r3, r3
 80066b2:	61a3      	str	r3, [r4, #24]
 80066b4:	6923      	ldr	r3, [r4, #16]
 80066b6:	b943      	cbnz	r3, 80066ca <__swsetup_r+0xc6>
 80066b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066bc:	d1ba      	bne.n	8006634 <__swsetup_r+0x30>
 80066be:	bd70      	pop	{r4, r5, r6, pc}
 80066c0:	0781      	lsls	r1, r0, #30
 80066c2:	bf58      	it	pl
 80066c4:	6963      	ldrpl	r3, [r4, #20]
 80066c6:	60a3      	str	r3, [r4, #8]
 80066c8:	e7f4      	b.n	80066b4 <__swsetup_r+0xb0>
 80066ca:	2000      	movs	r0, #0
 80066cc:	e7f7      	b.n	80066be <__swsetup_r+0xba>
 80066ce:	bf00      	nop
 80066d0:	20000048 	.word	0x20000048
 80066d4:	08006de8 	.word	0x08006de8
 80066d8:	08006e08 	.word	0x08006e08
 80066dc:	08006dc8 	.word	0x08006dc8

080066e0 <_close_r>:
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	4d06      	ldr	r5, [pc, #24]	; (80066fc <_close_r+0x1c>)
 80066e4:	2300      	movs	r3, #0
 80066e6:	4604      	mov	r4, r0
 80066e8:	4608      	mov	r0, r1
 80066ea:	602b      	str	r3, [r5, #0]
 80066ec:	f7fa fedd 	bl	80014aa <_close>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d102      	bne.n	80066fa <_close_r+0x1a>
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	b103      	cbz	r3, 80066fa <_close_r+0x1a>
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	2000085c 	.word	0x2000085c

08006700 <__sflush_r>:
 8006700:	898a      	ldrh	r2, [r1, #12]
 8006702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006706:	4605      	mov	r5, r0
 8006708:	0710      	lsls	r0, r2, #28
 800670a:	460c      	mov	r4, r1
 800670c:	d458      	bmi.n	80067c0 <__sflush_r+0xc0>
 800670e:	684b      	ldr	r3, [r1, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	dc05      	bgt.n	8006720 <__sflush_r+0x20>
 8006714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006716:	2b00      	cmp	r3, #0
 8006718:	dc02      	bgt.n	8006720 <__sflush_r+0x20>
 800671a:	2000      	movs	r0, #0
 800671c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006722:	2e00      	cmp	r6, #0
 8006724:	d0f9      	beq.n	800671a <__sflush_r+0x1a>
 8006726:	2300      	movs	r3, #0
 8006728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800672c:	682f      	ldr	r7, [r5, #0]
 800672e:	602b      	str	r3, [r5, #0]
 8006730:	d032      	beq.n	8006798 <__sflush_r+0x98>
 8006732:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	075a      	lsls	r2, r3, #29
 8006738:	d505      	bpl.n	8006746 <__sflush_r+0x46>
 800673a:	6863      	ldr	r3, [r4, #4]
 800673c:	1ac0      	subs	r0, r0, r3
 800673e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006740:	b10b      	cbz	r3, 8006746 <__sflush_r+0x46>
 8006742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006744:	1ac0      	subs	r0, r0, r3
 8006746:	2300      	movs	r3, #0
 8006748:	4602      	mov	r2, r0
 800674a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800674c:	6a21      	ldr	r1, [r4, #32]
 800674e:	4628      	mov	r0, r5
 8006750:	47b0      	blx	r6
 8006752:	1c43      	adds	r3, r0, #1
 8006754:	89a3      	ldrh	r3, [r4, #12]
 8006756:	d106      	bne.n	8006766 <__sflush_r+0x66>
 8006758:	6829      	ldr	r1, [r5, #0]
 800675a:	291d      	cmp	r1, #29
 800675c:	d82c      	bhi.n	80067b8 <__sflush_r+0xb8>
 800675e:	4a2a      	ldr	r2, [pc, #168]	; (8006808 <__sflush_r+0x108>)
 8006760:	40ca      	lsrs	r2, r1
 8006762:	07d6      	lsls	r6, r2, #31
 8006764:	d528      	bpl.n	80067b8 <__sflush_r+0xb8>
 8006766:	2200      	movs	r2, #0
 8006768:	6062      	str	r2, [r4, #4]
 800676a:	04d9      	lsls	r1, r3, #19
 800676c:	6922      	ldr	r2, [r4, #16]
 800676e:	6022      	str	r2, [r4, #0]
 8006770:	d504      	bpl.n	800677c <__sflush_r+0x7c>
 8006772:	1c42      	adds	r2, r0, #1
 8006774:	d101      	bne.n	800677a <__sflush_r+0x7a>
 8006776:	682b      	ldr	r3, [r5, #0]
 8006778:	b903      	cbnz	r3, 800677c <__sflush_r+0x7c>
 800677a:	6560      	str	r0, [r4, #84]	; 0x54
 800677c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800677e:	602f      	str	r7, [r5, #0]
 8006780:	2900      	cmp	r1, #0
 8006782:	d0ca      	beq.n	800671a <__sflush_r+0x1a>
 8006784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006788:	4299      	cmp	r1, r3
 800678a:	d002      	beq.n	8006792 <__sflush_r+0x92>
 800678c:	4628      	mov	r0, r5
 800678e:	f000 f8fb 	bl	8006988 <_free_r>
 8006792:	2000      	movs	r0, #0
 8006794:	6360      	str	r0, [r4, #52]	; 0x34
 8006796:	e7c1      	b.n	800671c <__sflush_r+0x1c>
 8006798:	6a21      	ldr	r1, [r4, #32]
 800679a:	2301      	movs	r3, #1
 800679c:	4628      	mov	r0, r5
 800679e:	47b0      	blx	r6
 80067a0:	1c41      	adds	r1, r0, #1
 80067a2:	d1c7      	bne.n	8006734 <__sflush_r+0x34>
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0c4      	beq.n	8006734 <__sflush_r+0x34>
 80067aa:	2b1d      	cmp	r3, #29
 80067ac:	d001      	beq.n	80067b2 <__sflush_r+0xb2>
 80067ae:	2b16      	cmp	r3, #22
 80067b0:	d101      	bne.n	80067b6 <__sflush_r+0xb6>
 80067b2:	602f      	str	r7, [r5, #0]
 80067b4:	e7b1      	b.n	800671a <__sflush_r+0x1a>
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067bc:	81a3      	strh	r3, [r4, #12]
 80067be:	e7ad      	b.n	800671c <__sflush_r+0x1c>
 80067c0:	690f      	ldr	r7, [r1, #16]
 80067c2:	2f00      	cmp	r7, #0
 80067c4:	d0a9      	beq.n	800671a <__sflush_r+0x1a>
 80067c6:	0793      	lsls	r3, r2, #30
 80067c8:	680e      	ldr	r6, [r1, #0]
 80067ca:	bf08      	it	eq
 80067cc:	694b      	ldreq	r3, [r1, #20]
 80067ce:	600f      	str	r7, [r1, #0]
 80067d0:	bf18      	it	ne
 80067d2:	2300      	movne	r3, #0
 80067d4:	eba6 0807 	sub.w	r8, r6, r7
 80067d8:	608b      	str	r3, [r1, #8]
 80067da:	f1b8 0f00 	cmp.w	r8, #0
 80067de:	dd9c      	ble.n	800671a <__sflush_r+0x1a>
 80067e0:	6a21      	ldr	r1, [r4, #32]
 80067e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067e4:	4643      	mov	r3, r8
 80067e6:	463a      	mov	r2, r7
 80067e8:	4628      	mov	r0, r5
 80067ea:	47b0      	blx	r6
 80067ec:	2800      	cmp	r0, #0
 80067ee:	dc06      	bgt.n	80067fe <__sflush_r+0xfe>
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067f6:	81a3      	strh	r3, [r4, #12]
 80067f8:	f04f 30ff 	mov.w	r0, #4294967295
 80067fc:	e78e      	b.n	800671c <__sflush_r+0x1c>
 80067fe:	4407      	add	r7, r0
 8006800:	eba8 0800 	sub.w	r8, r8, r0
 8006804:	e7e9      	b.n	80067da <__sflush_r+0xda>
 8006806:	bf00      	nop
 8006808:	20400001 	.word	0x20400001

0800680c <_fflush_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	690b      	ldr	r3, [r1, #16]
 8006810:	4605      	mov	r5, r0
 8006812:	460c      	mov	r4, r1
 8006814:	b913      	cbnz	r3, 800681c <_fflush_r+0x10>
 8006816:	2500      	movs	r5, #0
 8006818:	4628      	mov	r0, r5
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	b118      	cbz	r0, 8006826 <_fflush_r+0x1a>
 800681e:	6983      	ldr	r3, [r0, #24]
 8006820:	b90b      	cbnz	r3, 8006826 <_fflush_r+0x1a>
 8006822:	f7ff fa4f 	bl	8005cc4 <__sinit>
 8006826:	4b14      	ldr	r3, [pc, #80]	; (8006878 <_fflush_r+0x6c>)
 8006828:	429c      	cmp	r4, r3
 800682a:	d11b      	bne.n	8006864 <_fflush_r+0x58>
 800682c:	686c      	ldr	r4, [r5, #4]
 800682e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0ef      	beq.n	8006816 <_fflush_r+0xa>
 8006836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006838:	07d0      	lsls	r0, r2, #31
 800683a:	d404      	bmi.n	8006846 <_fflush_r+0x3a>
 800683c:	0599      	lsls	r1, r3, #22
 800683e:	d402      	bmi.n	8006846 <_fflush_r+0x3a>
 8006840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006842:	f7ff fadd 	bl	8005e00 <__retarget_lock_acquire_recursive>
 8006846:	4628      	mov	r0, r5
 8006848:	4621      	mov	r1, r4
 800684a:	f7ff ff59 	bl	8006700 <__sflush_r>
 800684e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006850:	07da      	lsls	r2, r3, #31
 8006852:	4605      	mov	r5, r0
 8006854:	d4e0      	bmi.n	8006818 <_fflush_r+0xc>
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	059b      	lsls	r3, r3, #22
 800685a:	d4dd      	bmi.n	8006818 <_fflush_r+0xc>
 800685c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800685e:	f7ff fad0 	bl	8005e02 <__retarget_lock_release_recursive>
 8006862:	e7d9      	b.n	8006818 <_fflush_r+0xc>
 8006864:	4b05      	ldr	r3, [pc, #20]	; (800687c <_fflush_r+0x70>)
 8006866:	429c      	cmp	r4, r3
 8006868:	d101      	bne.n	800686e <_fflush_r+0x62>
 800686a:	68ac      	ldr	r4, [r5, #8]
 800686c:	e7df      	b.n	800682e <_fflush_r+0x22>
 800686e:	4b04      	ldr	r3, [pc, #16]	; (8006880 <_fflush_r+0x74>)
 8006870:	429c      	cmp	r4, r3
 8006872:	bf08      	it	eq
 8006874:	68ec      	ldreq	r4, [r5, #12]
 8006876:	e7da      	b.n	800682e <_fflush_r+0x22>
 8006878:	08006de8 	.word	0x08006de8
 800687c:	08006e08 	.word	0x08006e08
 8006880:	08006dc8 	.word	0x08006dc8

08006884 <_lseek_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	4d07      	ldr	r5, [pc, #28]	; (80068a4 <_lseek_r+0x20>)
 8006888:	4604      	mov	r4, r0
 800688a:	4608      	mov	r0, r1
 800688c:	4611      	mov	r1, r2
 800688e:	2200      	movs	r2, #0
 8006890:	602a      	str	r2, [r5, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	f7fa fe30 	bl	80014f8 <_lseek>
 8006898:	1c43      	adds	r3, r0, #1
 800689a:	d102      	bne.n	80068a2 <_lseek_r+0x1e>
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	b103      	cbz	r3, 80068a2 <_lseek_r+0x1e>
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	bd38      	pop	{r3, r4, r5, pc}
 80068a4:	2000085c 	.word	0x2000085c

080068a8 <__swhatbuf_r>:
 80068a8:	b570      	push	{r4, r5, r6, lr}
 80068aa:	460e      	mov	r6, r1
 80068ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b0:	2900      	cmp	r1, #0
 80068b2:	b096      	sub	sp, #88	; 0x58
 80068b4:	4614      	mov	r4, r2
 80068b6:	461d      	mov	r5, r3
 80068b8:	da07      	bge.n	80068ca <__swhatbuf_r+0x22>
 80068ba:	2300      	movs	r3, #0
 80068bc:	602b      	str	r3, [r5, #0]
 80068be:	89b3      	ldrh	r3, [r6, #12]
 80068c0:	061a      	lsls	r2, r3, #24
 80068c2:	d410      	bmi.n	80068e6 <__swhatbuf_r+0x3e>
 80068c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068c8:	e00e      	b.n	80068e8 <__swhatbuf_r+0x40>
 80068ca:	466a      	mov	r2, sp
 80068cc:	f000 f8be 	bl	8006a4c <_fstat_r>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	dbf2      	blt.n	80068ba <__swhatbuf_r+0x12>
 80068d4:	9a01      	ldr	r2, [sp, #4]
 80068d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068de:	425a      	negs	r2, r3
 80068e0:	415a      	adcs	r2, r3
 80068e2:	602a      	str	r2, [r5, #0]
 80068e4:	e7ee      	b.n	80068c4 <__swhatbuf_r+0x1c>
 80068e6:	2340      	movs	r3, #64	; 0x40
 80068e8:	2000      	movs	r0, #0
 80068ea:	6023      	str	r3, [r4, #0]
 80068ec:	b016      	add	sp, #88	; 0x58
 80068ee:	bd70      	pop	{r4, r5, r6, pc}

080068f0 <__smakebuf_r>:
 80068f0:	898b      	ldrh	r3, [r1, #12]
 80068f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068f4:	079d      	lsls	r5, r3, #30
 80068f6:	4606      	mov	r6, r0
 80068f8:	460c      	mov	r4, r1
 80068fa:	d507      	bpl.n	800690c <__smakebuf_r+0x1c>
 80068fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	6123      	str	r3, [r4, #16]
 8006904:	2301      	movs	r3, #1
 8006906:	6163      	str	r3, [r4, #20]
 8006908:	b002      	add	sp, #8
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	ab01      	add	r3, sp, #4
 800690e:	466a      	mov	r2, sp
 8006910:	f7ff ffca 	bl	80068a8 <__swhatbuf_r>
 8006914:	9900      	ldr	r1, [sp, #0]
 8006916:	4605      	mov	r5, r0
 8006918:	4630      	mov	r0, r6
 800691a:	f7ff fa73 	bl	8005e04 <_malloc_r>
 800691e:	b948      	cbnz	r0, 8006934 <__smakebuf_r+0x44>
 8006920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006924:	059a      	lsls	r2, r3, #22
 8006926:	d4ef      	bmi.n	8006908 <__smakebuf_r+0x18>
 8006928:	f023 0303 	bic.w	r3, r3, #3
 800692c:	f043 0302 	orr.w	r3, r3, #2
 8006930:	81a3      	strh	r3, [r4, #12]
 8006932:	e7e3      	b.n	80068fc <__smakebuf_r+0xc>
 8006934:	4b0d      	ldr	r3, [pc, #52]	; (800696c <__smakebuf_r+0x7c>)
 8006936:	62b3      	str	r3, [r6, #40]	; 0x28
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	6020      	str	r0, [r4, #0]
 800693c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006940:	81a3      	strh	r3, [r4, #12]
 8006942:	9b00      	ldr	r3, [sp, #0]
 8006944:	6163      	str	r3, [r4, #20]
 8006946:	9b01      	ldr	r3, [sp, #4]
 8006948:	6120      	str	r0, [r4, #16]
 800694a:	b15b      	cbz	r3, 8006964 <__smakebuf_r+0x74>
 800694c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006950:	4630      	mov	r0, r6
 8006952:	f000 f88d 	bl	8006a70 <_isatty_r>
 8006956:	b128      	cbz	r0, 8006964 <__smakebuf_r+0x74>
 8006958:	89a3      	ldrh	r3, [r4, #12]
 800695a:	f023 0303 	bic.w	r3, r3, #3
 800695e:	f043 0301 	orr.w	r3, r3, #1
 8006962:	81a3      	strh	r3, [r4, #12]
 8006964:	89a0      	ldrh	r0, [r4, #12]
 8006966:	4305      	orrs	r5, r0
 8006968:	81a5      	strh	r5, [r4, #12]
 800696a:	e7cd      	b.n	8006908 <__smakebuf_r+0x18>
 800696c:	08005c5d 	.word	0x08005c5d

08006970 <__malloc_lock>:
 8006970:	4801      	ldr	r0, [pc, #4]	; (8006978 <__malloc_lock+0x8>)
 8006972:	f7ff ba45 	b.w	8005e00 <__retarget_lock_acquire_recursive>
 8006976:	bf00      	nop
 8006978:	20000854 	.word	0x20000854

0800697c <__malloc_unlock>:
 800697c:	4801      	ldr	r0, [pc, #4]	; (8006984 <__malloc_unlock+0x8>)
 800697e:	f7ff ba40 	b.w	8005e02 <__retarget_lock_release_recursive>
 8006982:	bf00      	nop
 8006984:	20000854 	.word	0x20000854

08006988 <_free_r>:
 8006988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800698a:	2900      	cmp	r1, #0
 800698c:	d048      	beq.n	8006a20 <_free_r+0x98>
 800698e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006992:	9001      	str	r0, [sp, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f1a1 0404 	sub.w	r4, r1, #4
 800699a:	bfb8      	it	lt
 800699c:	18e4      	addlt	r4, r4, r3
 800699e:	f7ff ffe7 	bl	8006970 <__malloc_lock>
 80069a2:	4a20      	ldr	r2, [pc, #128]	; (8006a24 <_free_r+0x9c>)
 80069a4:	9801      	ldr	r0, [sp, #4]
 80069a6:	6813      	ldr	r3, [r2, #0]
 80069a8:	4615      	mov	r5, r2
 80069aa:	b933      	cbnz	r3, 80069ba <_free_r+0x32>
 80069ac:	6063      	str	r3, [r4, #4]
 80069ae:	6014      	str	r4, [r2, #0]
 80069b0:	b003      	add	sp, #12
 80069b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069b6:	f7ff bfe1 	b.w	800697c <__malloc_unlock>
 80069ba:	42a3      	cmp	r3, r4
 80069bc:	d90b      	bls.n	80069d6 <_free_r+0x4e>
 80069be:	6821      	ldr	r1, [r4, #0]
 80069c0:	1862      	adds	r2, r4, r1
 80069c2:	4293      	cmp	r3, r2
 80069c4:	bf04      	itt	eq
 80069c6:	681a      	ldreq	r2, [r3, #0]
 80069c8:	685b      	ldreq	r3, [r3, #4]
 80069ca:	6063      	str	r3, [r4, #4]
 80069cc:	bf04      	itt	eq
 80069ce:	1852      	addeq	r2, r2, r1
 80069d0:	6022      	streq	r2, [r4, #0]
 80069d2:	602c      	str	r4, [r5, #0]
 80069d4:	e7ec      	b.n	80069b0 <_free_r+0x28>
 80069d6:	461a      	mov	r2, r3
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	b10b      	cbz	r3, 80069e0 <_free_r+0x58>
 80069dc:	42a3      	cmp	r3, r4
 80069de:	d9fa      	bls.n	80069d6 <_free_r+0x4e>
 80069e0:	6811      	ldr	r1, [r2, #0]
 80069e2:	1855      	adds	r5, r2, r1
 80069e4:	42a5      	cmp	r5, r4
 80069e6:	d10b      	bne.n	8006a00 <_free_r+0x78>
 80069e8:	6824      	ldr	r4, [r4, #0]
 80069ea:	4421      	add	r1, r4
 80069ec:	1854      	adds	r4, r2, r1
 80069ee:	42a3      	cmp	r3, r4
 80069f0:	6011      	str	r1, [r2, #0]
 80069f2:	d1dd      	bne.n	80069b0 <_free_r+0x28>
 80069f4:	681c      	ldr	r4, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	6053      	str	r3, [r2, #4]
 80069fa:	4421      	add	r1, r4
 80069fc:	6011      	str	r1, [r2, #0]
 80069fe:	e7d7      	b.n	80069b0 <_free_r+0x28>
 8006a00:	d902      	bls.n	8006a08 <_free_r+0x80>
 8006a02:	230c      	movs	r3, #12
 8006a04:	6003      	str	r3, [r0, #0]
 8006a06:	e7d3      	b.n	80069b0 <_free_r+0x28>
 8006a08:	6825      	ldr	r5, [r4, #0]
 8006a0a:	1961      	adds	r1, r4, r5
 8006a0c:	428b      	cmp	r3, r1
 8006a0e:	bf04      	itt	eq
 8006a10:	6819      	ldreq	r1, [r3, #0]
 8006a12:	685b      	ldreq	r3, [r3, #4]
 8006a14:	6063      	str	r3, [r4, #4]
 8006a16:	bf04      	itt	eq
 8006a18:	1949      	addeq	r1, r1, r5
 8006a1a:	6021      	streq	r1, [r4, #0]
 8006a1c:	6054      	str	r4, [r2, #4]
 8006a1e:	e7c7      	b.n	80069b0 <_free_r+0x28>
 8006a20:	b003      	add	sp, #12
 8006a22:	bd30      	pop	{r4, r5, pc}
 8006a24:	20000770 	.word	0x20000770

08006a28 <_read_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d07      	ldr	r5, [pc, #28]	; (8006a48 <_read_r+0x20>)
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	4608      	mov	r0, r1
 8006a30:	4611      	mov	r1, r2
 8006a32:	2200      	movs	r2, #0
 8006a34:	602a      	str	r2, [r5, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	f7fa fcfe 	bl	8001438 <_read>
 8006a3c:	1c43      	adds	r3, r0, #1
 8006a3e:	d102      	bne.n	8006a46 <_read_r+0x1e>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	b103      	cbz	r3, 8006a46 <_read_r+0x1e>
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	2000085c 	.word	0x2000085c

08006a4c <_fstat_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	4d07      	ldr	r5, [pc, #28]	; (8006a6c <_fstat_r+0x20>)
 8006a50:	2300      	movs	r3, #0
 8006a52:	4604      	mov	r4, r0
 8006a54:	4608      	mov	r0, r1
 8006a56:	4611      	mov	r1, r2
 8006a58:	602b      	str	r3, [r5, #0]
 8006a5a:	f7fa fd32 	bl	80014c2 <_fstat>
 8006a5e:	1c43      	adds	r3, r0, #1
 8006a60:	d102      	bne.n	8006a68 <_fstat_r+0x1c>
 8006a62:	682b      	ldr	r3, [r5, #0]
 8006a64:	b103      	cbz	r3, 8006a68 <_fstat_r+0x1c>
 8006a66:	6023      	str	r3, [r4, #0]
 8006a68:	bd38      	pop	{r3, r4, r5, pc}
 8006a6a:	bf00      	nop
 8006a6c:	2000085c 	.word	0x2000085c

08006a70 <_isatty_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4d06      	ldr	r5, [pc, #24]	; (8006a8c <_isatty_r+0x1c>)
 8006a74:	2300      	movs	r3, #0
 8006a76:	4604      	mov	r4, r0
 8006a78:	4608      	mov	r0, r1
 8006a7a:	602b      	str	r3, [r5, #0]
 8006a7c:	f7fa fd31 	bl	80014e2 <_isatty>
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	d102      	bne.n	8006a8a <_isatty_r+0x1a>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	b103      	cbz	r3, 8006a8a <_isatty_r+0x1a>
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	2000085c 	.word	0x2000085c

08006a90 <_init>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	bf00      	nop
 8006a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a96:	bc08      	pop	{r3}
 8006a98:	469e      	mov	lr, r3
 8006a9a:	4770      	bx	lr

08006a9c <_fini>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	bf00      	nop
 8006aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa2:	bc08      	pop	{r3}
 8006aa4:	469e      	mov	lr, r3
 8006aa6:	4770      	bx	lr
